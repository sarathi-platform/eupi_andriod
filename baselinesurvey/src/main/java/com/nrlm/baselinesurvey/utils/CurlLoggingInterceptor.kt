package com.nrlm.baselinesurvey.utils

import com.google.gson.GsonBuilder
import com.google.gson.JsonParser
import com.google.gson.JsonSyntaxException
import okhttp3.*
import okhttp3.internal.http.promisesBody
import okhttp3.logging.HttpLoggingInterceptor.Logger
import okio.Buffer
import okio.GzipSource
import java.io.IOException
import java.nio.charset.Charset
import java.nio.charset.StandardCharsets
import java.util.concurrent.TimeUnit

/**
 * An OkHttp interceptor that logs requests as curl shell commands. They can then
 * be copied, pasted and executed inside a terminal environment. This might be
 * useful for troubleshooting client/server API interaction during development,
 * making it easy to isolate and share requests made by the app.
 *
 * Warning: The
 * logs generated by this interceptor have the potential to leak sensitive
 * information. It should only be used in a controlled manner or in a
 * non-production environment.
 */
class CurlLoggingInterceptor @JvmOverloads constructor(val logger: Logger = Logger.DEFAULT) : Interceptor {
    private var curlOptions: String? = null

    /** Set any additional curl command options (see 'curl --help').  */
    fun setCurlOptions(curlOptions: String?) {
        this.curlOptions = curlOptions
    }

    @Throws(IOException::class)
    override fun intercept(chain: Interceptor.Chain): Response {
        val request: Request = chain.request()
        var compressed = false
        var curlCmd = "curl"
        if (curlOptions != null) {
            curlCmd += " $curlOptions"
        }
        curlCmd += " -X " + request.method
        val headers: Headers = request.headers
        var i = 0
        val count: Int = headers.size
        while (i < count) {
            val name: String = headers.name(i)
            val value: String = headers.value(i)
            if ("Accept-Encoding".equals(name, ignoreCase = true) && "gzip".equals(value, ignoreCase = true)) {
                compressed = true
            }
            curlCmd += " -H \"$name: $value\""
            i++
        }
        val requestBody: RequestBody? = request.body
        if (requestBody != null) {
            val buffer = Buffer()
            requestBody.writeTo(buffer)
            var charset = UTF8
            val contentType: MediaType? = requestBody.contentType()
            contentType?.let { contentType -> curlCmd += " -H \"Content-Type: ${contentType}\"" }
            if (contentType != null) {
                charset = contentType.charset(UTF8)
            }
            // try to keep to a single line and use a subshell to preserve any line breaks
            curlCmd += " --data-raw \'" + buffer.readString(charset!!).replace("\n", "\\n") + "\'"
        }
        curlCmd += (if (compressed) " --compressed " else " ") + "\"" + request.url + "\""
        logger.log("╭--- cURL (" + request.url.toString() + ")")
        logger.log(curlCmd)
//        logger.log("╰--- (copy and paste the above line to a terminal)")

        val startNs = System.nanoTime()
        val response: Response
        try {
            response = chain.proceed(request)
        } catch (e: Exception) {
            logger.log("<-- HTTP FAILED: $e")
            throw e
        }

        val tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs)

        val responseBody = response.body!!
        val contentLength = responseBody.contentLength()
        val bodySize = if (contentLength != -1L) "$contentLength-byte" else "unknown-length"
        logger.log(
            "<-- ${response.code}${if (response.message.isEmpty()) "" else ' ' + response.message} ${response.request.url} (${tookMs}ms)")


            if (!response.promisesBody()) {
                logger.log("<-- END HTTP")
            } else if (bodyHasUnknownEncoding(response.headers)) {
                logger.log("<-- END HTTP (encoded body omitted)")
            } else {
                val source = responseBody.source()
                source.request(Long.MAX_VALUE) // Buffer the entire body.
                var buffer = source.buffer

                var gzippedLength: Long? = null
                if ("gzip".equals(headers["Content-Encoding"], ignoreCase = true)) {
                    gzippedLength = buffer.size
                    GzipSource(buffer.clone()).use { gzippedResponseBody ->
                        buffer = Buffer()
                        buffer.writeAll(gzippedResponseBody)
                    }
                }

                val contentType = responseBody.contentType()
                val charset: Charset = contentType?.charset(StandardCharsets.UTF_8) ?: StandardCharsets.UTF_8

                if (contentLength != 0L) {
                    logger.log("")
                    logger.log(buffer.clone().readString(charset))
                }

                //Enable this code to prettify json in logcat
//                val message = buffer.clone().readString(charset)
//                val logName = "ApiLogger"
//
//                if (message.startsWith("{") || message.startsWith("[")) {
//                    try {
//                        val prettyPrintJson = GsonBuilder().setPrettyPrinting()
//                            .create().toJson(JsonParser().parse(message))
//                        d(logName, prettyPrintJson)
//                    } catch (m: JsonSyntaxException) {
//                        d(logName, message)
//                    }
//                } else {
//                    d(logName, message)
//                }

                if (gzippedLength != null) {
                    logger.log("<-- END HTTP (${buffer.size}-byte, $gzippedLength-gzipped-byte body)")
                } else {
                    logger.log("<-- END HTTP (${buffer.size}-byte body)")
                }
            }
        return response
    }

    private fun bodyHasUnknownEncoding(headers: Headers): Boolean {
        val contentEncoding = headers["Content-Encoding"] ?: return false
        return !contentEncoding.equals("identity", ignoreCase = true) &&
                !contentEncoding.equals("gzip", ignoreCase = true)
    }

    companion object {
        private val UTF8 = Charset.forName("UTF-8")
    }
}
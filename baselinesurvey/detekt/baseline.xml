<?xml version="1.0" ?>
<SmellBaseline>
    <ManuallySuppressedIssues></ManuallySuppressedIssues>
    <CurrentIssues>
        <ID>ComplexCondition:BaselineLogger.kt$LogWriter$isInitializing.compareAndSet(false, true)
            &amp;&amp; !isQuitting &amp;&amp; (syslogThread == null || !syslogThread!!.isAlive)
        </ID>
        <ID>ComplexCondition:CalculatorUtils.kt$CalculatorUtils$(operatorA == '+' || operatorA ==
            '-') &amp;&amp; (operatorB == '*' || operatorB == '/')
        </ID>
        <ID>ComplexCondition:CalculatorUtils.kt$CalculatorUtils$myChar[i] == '/' || myChar[i] == '*'
            || myChar[i] == '+' || myChar[i] == '-'
        </ID>
        <ID>ComplexCondition:MediaState.kt$this == Size.Unspecified || width.isNaN() ||
            height.isNaN() || height == 0f
        </ID>
        <ID>
            ComplexCondition:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$event.optionId
            != null &amp;&amp; event.questionId != null &amp;&amp; event.sectionId != null &amp;&amp;
            event.surveyId != null &amp;&amp; event.surveyeeId != null &amp;&amp; event.surveyeeId
            != -1
        </ID>
        <ID>ComplexCondition:SurveyeeCardComponent.kt$surveyeeState.surveyState ==
            SurveyState.INPROGRESS || surveyeeState.surveyState == SurveyState.NOT_STARTED ||
            surveyeeState.surveyState == SurveyState.NOT_AVAILABLE || surveyeeState.surveyState ==
            SurveyState.NOT_AVAILABLE_WITH_CONTINUE
        </ID>
        <ID>ComplexCondition:TimePickerComponent.kt$(firstValue.isBlank() &amp;&amp;
            secondValue.isBlank()) || ((firstValue.equals("00") &amp;&amp; secondValue.equals( "00"
            ))) || ((firstValue.equals("0") &amp;&amp; secondValue.equals( "0" )))
        </ID>
        <ID>ComposableParamOrder:AllSurveyeeListTab.kt$AllSurveyeeListTab</ID>
        <ID>ComposableParamOrder:AppImageViewComponent.kt$AppImageView</ID>
        <ID>ComposableParamOrder:ButtonUtil.kt$BlueButtonWithIcon</ID>
        <ID>ComposableParamOrder:ButtonUtil.kt$ButtonNegative</ID>
        <ID>ComposableParamOrder:ButtonUtil.kt$ButtonPositive</ID>
        <ID>ComposableParamOrder:ButtonUtil.kt$DoubleButtonBox</ID>
        <ID>ComposableParamOrder:CTAButtonComponent.kt$CTAButtonComponent</ID>
        <ID>ComposableParamOrder:CTAButtonComponent.kt$OutlinedCTAButtonComponent</ID>
        <ID>ComposableParamOrder:CustomBannerComponents.kt$MoveSurveyeeUpdateBannerComponent</ID>
        <ID>ComposableParamOrder:CustomBannerComponents.kt$MoveSurveyeesUpdateBannerComponent</ID>
        <ID>ComposableParamOrder:CustomSnackbarViewComponent.kt$SnackBarCustom</ID>
        <ID>ComposableParamOrder:CustomSnackbarViewComponent.kt$SnackBarError</ID>
        <ID>ComposableParamOrder:CustomSnackbarViewComponent.kt$SnackBarSuccess</ID>
        <ID>ComposableParamOrder:DataLoadingScreenComponent.kt$DataLoadingScreenComponent</ID>
        <ID>ComposableParamOrder:DescriptionContentComponent.kt$DescriptionContentComponent</ID>
        <ID>ComposableParamOrder:DialogComponent.kt$BulletList</ID>
        <ID>ComposableParamOrder:DialogComponent.kt$DialogComponent</ID>
        <ID>ComposableParamOrder:DialogComponent.kt$ShowCustomDialog</ID>
        <ID>ComposableParamOrder:DropDownWithTitleComponent.kt$DropDownWithTitleComponent</ID>
        <ID>ComposableParamOrder:EditTextWithTitleComponent.kt$EditTextWithTitleComponent</ID>
        <ID>
            ComposableParamOrder:ExpandableDescriptionContentComponent.kt$ExpandableDescriptionContentComponent
        </ID>
        <ID>ComposableParamOrder:ExportImportScreen.kt$ExportImportScreen</ID>
        <ID>ComposableParamOrder:FormQuestionSummaryScreen.kt$FormQuestionSummaryScreen</ID>
        <ID>ComposableParamOrder:FormResponseCard.kt$DidiInfoCard</ID>
        <ID>ComposableParamOrder:FormResponseCard.kt$FormResponseCard</ID>
        <ID>ComposableParamOrder:FormTypeQuestionComponent.kt$FormTypeQuestionComponent</ID>
        <ID>ComposableParamOrder:FormTypeQuestionScreen.kt$FormTypeQuestionScreen</ID>
        <ID>
            ComposableParamOrder:FormWithNoneTypeQuestionComponent.kt$FormWithNoneTypeQuestionComponent
        </ID>
        <ID>ComposableParamOrder:GridTypeComponent.kt$GridOptionCard</ID>
        <ID>ComposableParamOrder:GridTypeComponent.kt$GridTypeComponent</ID>
        <ID>ComposableParamOrder:HomeNavScreen.kt$HomeNavScreen</ID>
        <ID>ComposableParamOrder:IncrementDecrementView.kt$IncrementDecrementView</ID>
        <ID>ComposableParamOrder:LanguageItemComponent.kt$LanguageItemComponent</ID>
        <ID>ComposableParamOrder:LanguageScreenComponent.kt$LanguageScreenComponent</ID>
        <ID>ComposableParamOrder:ListTypeComponent.kt$ListTypeQuestion</ID>
        <ID>ComposableParamOrder:ListTypeComponent.kt$OptionCard</ID>
        <ID>ComposableParamOrder:MiscQuestionBoxComponent.kt$MiscQuestionBoxComponent</ID>
        <ID>ComposableParamOrder:MissionSummaryScreen.kt$MissionSummaryScreen</ID>
        <ID>ComposableParamOrder:MissonRowScreen.kt$MissionRowScreen</ID>
        <ID>ComposableParamOrder:MultiSelectDropdown.kt$MultiSelectDropdown</ID>
        <ID>ComposableParamOrder:NestedLazyList.kt$NestedLazyList</ID>
        <ID>ComposableParamOrder:NestedLazyListForFormQuestions.kt$NestedLazyListForFormQuestions
        </ID>
        <ID>ComposableParamOrder:OtpVerificationScreenComponent.kt$OtpVerificationScreenComponent
        </ID>
        <ID>ComposableParamOrder:OutlineButtonWithIconComponent.kt$OutlineButtonWithIconComponent
        </ID>
        <ID>
            ComposableParamOrder:PrimarySecandaryButtonBoxPreFilled.kt$PrimarySecandaryButtonBoxPreFilled
        </ID>
        <ID>ComposableParamOrder:ProfileBSScreen.kt$ProfileBSScreen</ID>
        <ID>ComposableParamOrder:QuestionScreen.kt$QuestionScreen</ID>
        <ID>ComposableParamOrder:QuestionType.kt$CreateLazyHorizontalGrid</ID>
        <ID>ComposableParamOrder:QuestionType.kt$QuestionType</ID>
        <ID>ComposableParamOrder:RadioButtonOptionComponent.kt$RadioButtonOptionComponent</ID>
        <ID>ComposableParamOrder:RadioOptionTypeComponent.kt$RadioOptionTypeComponent</ID>
        <ID>ComposableParamOrder:RadioQuestionBoxComponent.kt$RadioQuestionBoxComponent</ID>
        <ID>ComposableParamOrder:SearchScreen.kt$SearchScreens</ID>
        <ID>ComposableParamOrder:SearchWithFilterComponent.kt$SearchWithFilterViewComponent</ID>
        <ID>ComposableParamOrder:SectionItemComponent.kt$SectionItemComponent</ID>
        <ID>ComposableParamOrder:SectionListScreen.kt$SectionListScreen</ID>
        <ID>ComposableParamOrder:SettingBSScreen.kt$SettingBSScreen</ID>
        <ID>ComposableParamOrder:SplashScreenComponent.kt$SplashScreenComponent</ID>
        <ID>ComposableParamOrder:StepCompletionScreen.kt$StepCompletionScreen</ID>
        <ID>ComposableParamOrder:StepsBox.kt$StepsBox</ID>
        <ID>ComposableParamOrder:SurveyeeCardComponent.kt$SurveyeeCardComponent</ID>
        <ID>
            ComposableParamOrder:SurveyeeCardWithTolaFilterComponent.kt$SurveyeeCardWithTolaFilterComponent
        </ID>
        <ID>ComposableParamOrder:SurveyeeListScreen.kt$SurveyeeListScreen</ID>
        <ID>ComposableParamOrder:TimePickerComponent.kt$RangePickerComponent</ID>
        <ID>ComposableParamOrder:ToolbarWithMenuComponent.kt$ToolbarWithMenuComponent</ID>
        <ID>ComposableParamOrder:TypeDropDownComponent.kt$TypeDropDownComponent</ID>
        <ID>
            ComposableParamOrder:TypeMultiSelectedDropDownComponent.kt$TypeMultiSelectedDropDownComponent
        </ID>
        <ID>ComposableParamOrder:Utils.kt$ShowCustomDialog</ID>
        <ID>ComposableParamOrder:VideoPlayer.kt$MediaContent</ID>
        <ID>
            ConstructorParameterNaming:ConfigResponseModel.kt$ConfigResponseModel$@SerializedName("questionImageUrlList")
            @Expose val image_profile_link:List&lt;String&gt;
        </ID>
        <ID>
            ConstructorParameterNaming:VillageEntity.kt$VillageEntity$@SerializedName("steps_completed")
            @Expose @TypeConverters(IntConverter::class) @ColumnInfo(name = "steps_completed") var
            steps_completed: List&lt;Int&gt;?
        </ID>
        <ID>CyclomaticComplexMethod:AllSurveyeeListTab.kt$@OptIn(ExperimentalMaterialApi::class)
            @Composable fun AllSurveyeeListTab( paddingValues: PaddingValues, loaderState:
            LoaderState, pullRefreshState: PullRefreshState, viewModel: SurveyeeScreenViewModel,
            isSelectionEnabled: MutableState&lt;Boolean&gt;, navController: NavController,
            onActionEvent: (surveyeeListScreenActions: SurveyeeListScreenActions) -&gt; Unit,
            modifier: Modifier = Modifier, activityName: String, activityDate: String, activityId:
            Int, )
        </ID>
        <ID>
            CyclomaticComplexMethod:BaseLineStartScreen.kt$@SuppressLint("StateFlowValueCalledInComposition",
            "UnrememberedMutableState") @Composable fun BaseLineStartScreen( navController:
            NavHostController, baseLineStartViewModel: BaseLineStartViewModel, didiId: Int,
            surveyId: Int, sectionId: Int )
        </ID>
        <ID>CyclomaticComplexMethod:BaseViewModel.kt$BaseViewModel$private fun parseException(e:
            Throwable): ErrorModel
        </ID>
        <ID>CyclomaticComplexMethod:BaselineLogger.kt$LogWriter$private suspend fun getSyslogFile(
            output: File, after: String = "", logFileNames: ArrayList&lt;String&gt;? = null ):
            Boolean
        </ID>
        <ID>
            CyclomaticComplexMethod:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$override
            suspend fun saveSurveyToDb( surveyResponseModel: SurveyResponseModel, languageId: Int, )
        </ID>
        <ID>
            CyclomaticComplexMethod:EventsWriterRepositoryImpl.kt$EventsWriterRepositoryImpl$override
            suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType:
            EventType ): Events?
        </ID>
        <ID>
            CyclomaticComplexMethod:FetchSurveyeeListFromNetworkUseCase.kt$FetchSurveyeeListFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>CyclomaticComplexMethod:FormResponseCard.kt$@Composable fun FormResponseCard( modifier:
            Modifier = Modifier, formResponseObjectDto: FormResponseObjectDto,
            optionItemListWithConditionals: List&lt;OptionItemEntity&gt;, viewModel: BaseViewModel,
            isPictureRequired: Boolean = true, onDelete: (referenceId: String) -&gt; Unit, onUpdate:
            (referenceId: String) -&gt; Unit )
        </ID>
        <ID>CyclomaticComplexMethod:FormWithNoneTypeQuestionComponent.kt$@Composable fun
            FormWithNoneTypeQuestionComponent( modifier: Modifier = Modifier, questionIndex: Int,
            question: QuestionEntity?, showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(), noneOptionValue: FormQuestionResponseEntity?
            = null, maxCustomHeight: Dp, contests: List&lt;ContentEntity?&gt;? = listOf(),
            itemCount: Int = 0, summaryValue: String = BLANK_STRING, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int, isNoneMarkedForForm: Boolean, isFormOpened:
            Boolean) -&gt; Unit, onMediaTypeDescriptionAction: (descriptionContentType:
            DescriptionContentType, contentLink: String) -&gt; Unit, questionDetailExpanded: (index:
            Int) -&gt; Unit, onViewSummaryClicked: (questionId: Int) -&gt; Unit )
        </ID>
        <ID>CyclomaticComplexMethod:GridTypeComponent.kt$@Composable fun GridTypeComponent(
            modifier: Modifier = Modifier, question: QuestionEntity, showQuestionState:
            QuestionEntityState = QuestionEntityState.getEmptyStateObject(), optionItemEntityList:
            List&lt;OptionItemEntity&gt;, areOptionsEnabled: Boolean = true, questionIndex: Int,
            contests: List&lt;ContentEntity?&gt;? = listOf(), selectedOptionIndices: List&lt;Int&gt;,
            maxCustomHeight: Dp, isEditAllowed: Boolean = true, onAnswerSelection: (questionIndex:
            Int, optionItems: List&lt;OptionItemEntity&gt;, selectedIndeciesCount: List&lt;Int&gt;)
            -&gt; Unit, onMediaTypeDescriptionAction: (descriptionContentType:
            DescriptionContentType, contentLink: String) -&gt; Unit, questionDetailExpanded: (index:
            Int) -&gt; Unit )
        </ID>
        <ID>
            CyclomaticComplexMethod:Media.kt$@androidx.annotation.OptIn(androidx.media3.common.util.UnstableApi::class)
            @Composable fun Media( state: MediaState, modifier: Modifier = Modifier, surfaceType:
            SurfaceType = SurfaceType.SurfaceView, resizeMode: ResizeMode = ResizeMode.Fit,
            shutterColor: Color = Color.Black, keepContentOnPlayerReset: Boolean = false,
            useArtwork: Boolean = true, defaultArtworkPainter: Painter? = null, subtitles:
            @Composable ((CueGroup) -&gt; Unit)? = null, // TODO showBuffering: ShowBuffering =
            ShowBuffering.Never, buffering: @Composable (() -&gt; Unit)? = null, errorMessage:
            @Composable ((PlaybackException) -&gt; Unit)? = null, overlay: @Composable (() -&gt;
            Unit)? = null, controllerHideOnTouch: Boolean = true, controllerAutoShow: Boolean =
            true, controller: @Composable ((MediaState) -&gt; Unit)? = null )
        </ID>
        <ID>CyclomaticComplexMethod:MiscQuestionBoxComponent.kt$@Composable fun
            MiscQuestionBoxComponent( modifier: Modifier = Modifier, questionIndex: Int, question:
            QuestionEntity, contests: List&lt;ContentEntity?&gt;? = listOf(), showQuestionState:
            QuestionEntityState = QuestionEntityState.getEmptyStateObject(),
            selectedOptionMapForNumericInputTypeQuestions: Map&lt;Int, InputTypeQuestionAnswerEntity&gt;,
            selectedOption: OptionItemEntity?, maxCustomHeight: Dp, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int, optionItemEntity: OptionItemEntity,
            selectedValue: String, selectedId: Int) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit )
        </ID>
        <ID>CyclomaticComplexMethod:NavHomeGraph.kt$@Composable fun NavHomeGraph(navController:
            NavHostController, prefRepo: PrefRepo, modifier: Modifier)
        </ID>
        <ID>CyclomaticComplexMethod:NestedLazyList.kt$@RequiresApi(Build.VERSION_CODES.N)
            @Composable fun NestedLazyList( modifier: Modifier = Modifier, outerState: LazyListState
            = rememberLazyListState(), innerState: LazyListState = rememberLazyListState(),
            queLazyState: LazyListState = rememberLazyListState(), surveyeeId: Int, navController:
            NavController, viewModel: BaseViewModel, sectionDetails: SectionListItem,
            sectionInfoButtonClicked: () -&gt; Unit, answeredQuestionCountIncreased: (question:
            QuestionEntityState, isQuestionResponseUnanswered: Boolean) -&gt; Unit, )
        </ID>
        <ID>CyclomaticComplexMethod:NestedLazyListForFormQuestions.kt$@Composable fun
            NestedLazyListForFormQuestions( modifier: Modifier = Modifier, outerState: LazyListState
            = rememberLazyListState(), innerState: LazyListState = rememberLazyListState(),
            viewModel: BaseViewModel, onSaveFormTypeOption: (questionTypeEvent: QuestionTypeEvent) -&gt;
            Unit, saveCacheFormData: (formQuestionResponseEntity: FormQuestionResponseEntity) -&gt;
            Unit, answeredQuestionCountIncreased: () -&gt; Unit, sectionInfoButtonClicked:
            (contents: List&lt;ContentList&gt;) -&gt; Unit, )
        </ID>
        <ID>CyclomaticComplexMethod:QuestionScreenViewModel.kt$QuestionScreenViewModel$override fun
            &lt;T&gt; onEvent(event: T)
        </ID>
        <ID>CyclomaticComplexMethod:QuestionType.kt$QuestionType.Companion$fun
            getQuestionTypeFromName(name: String): QuestionType?
        </ID>
        <ID>
            CyclomaticComplexMethod:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$override
            fun &lt;T&gt; onEvent(event: T)
        </ID>
        <ID>
            CyclomaticComplexMethod:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$private
            fun removeAnswersForUnSelectedConditions( response: FormQuestionResponseEntity,
            isMultiSelectDropDown: Boolean = false )
        </ID>
        <ID>CyclomaticComplexMethod:SettingBSViewModel.kt$SettingBSViewModel$fun
            compressEventData(title: String)
        </ID>
        <ID>CyclomaticComplexMethod:SurveyeeCardComponent.kt$@Composable fun SurveyeeCardComponent(
            modifier: Modifier = Modifier, surveyeeState: SurveyeeCardState, showCheckBox: Boolean,
            fromScreen: String, primaryButtonText: String = stringResource(R.string.start_baseline),
            checkBoxChecked: (surveyeeEntity: SurveyeeEntity, isChecked: Boolean) -&gt; Unit,
            buttonClicked: (buttonName: ButtonName, surveyeeId: Int) -&gt; Unit, moveDidiToThisWeek:
            (surveyeeCardState: SurveyeeCardState, moveToThisWeek: Boolean) -&gt; Unit )
        </ID>
        <ID>
            CyclomaticComplexMethod:SurveyeeListScreenRepositoryImpl.kt$SurveyeeListScreenRepositoryImpl$override
            suspend fun getSurveyeeListFromNetwork(): Boolean
        </ID>
        <ID>CyclomaticComplexMethod:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$override fun
            &lt;T&gt; onEvent(event: T)
        </ID>
        <ID>CyclomaticComplexMethod:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$override fun
            performSearchQuery( queryTerm: String, isFilterApplied: Boolean, fromScreen: String )
        </ID>
        <ID>CyclomaticComplexMethod:TimePickerComponent.kt$fun getPickerValue(typePicker: String,
            firstValue: String, secondValue: String): String
        </ID>
        <ID>CyclomaticComplexMethod:Utils.kt$fun List&lt;OptionItemEntity&gt;.convertToSaveAnswerEventOptionItemsDto(type:
            QuestionType?): List&lt;SaveAnswerEventOptionItemDto&gt;
        </ID>
        <ID>EmptyCatchBlock:BaselineLogger.kt$LogWriter${ }</ID>
        <ID>EmptyCatchBlock:DeviceInfoUtils.kt$DeviceInfoUtils${ }</ID>
        <ID>EmptyClassBlock:ConditionType.kt$ConditionType${ }</ID>
        <ID>EmptyClassBlock:ContentMangerRequest.kt$ContentMangerRequest${ }</ID>
        <ID>EmptyClassBlock:ContentResponse.kt$ContentResponse${ }</ID>
        <ID>EmptyClassBlock:GetFromPageUseCase.kt$GetFromPageUseCase${ }</ID>
        <ID>EmptyClassBlock:SaveQuestionImageUseCase.kt$SaveQuestionImageUseCase${ }</ID>
        <ID>EmptyClassBlock:SearchUseCase.kt$SearchUseCase${ }</ID>
        <ID>EmptyDefaultConstructor:BaseViewModel.kt$BaseViewModel$()</ID>
        <ID>EmptyDefaultConstructor:SearchTab.kt$SearchTab$()</ID>
        <ID>EmptyFunctionBlock:BaseLineStartViewModel.kt$BaseLineStartViewModel.&lt;no name provided&gt;${ }</ID>
        <ID>EmptyFunctionBlock:BaseLineStartViewModel.kt$BaseLineStartViewModel.&lt;no name provided&gt;${}</ID>
        <ID>EmptyFunctionBlock:BaselineCore.kt$BaselineCore${ }</ID>
        <ID>EmptyFunctionBlock:MainActivity.kt$MainActivity${ }</ID>
        <ID>EmptyFunctionBlock:Player.kt$PlayerManager${ }</ID>
        <ID>EmptyFunctionBlock:ProfileBSViewModel.kt$ProfileBSViewModel${ }</ID>
        <ID>
            EmptyFunctionBlock:SaveFormQuestionResponseUseCase.kt$SaveFormQuestionResponseUseCase${ }
        </ID>
        <ID>EmptyFunctionBlock:SearchScreen.kt${ }</ID>
        <ID>EmptyWhenBlock:MainActivityViewModel.kt$MainActivityViewModel$when (event) { /*is
            TestEvent.SampleEvent -&gt; { viewModelScope.launch(Dispatchers.IO) {
            eventsDao.insert(event = event.events) } }*/ }
        </ID>
        <ID>
            ExplicitItLambdaParameter:EventWriterHelperImpl.kt$EventWriterHelperImpl${ it -&gt; val totalTaskActivityCount = taskDao.getTaskCountForActivity( userId = getBaseLineUserId(), activityId = it.activityId, missionId = missionEntity.missionId ) if (totalTaskActivityCount &gt; 0) { val pendingCount = taskDao.getPendingTaskCount( userId = getBaseLineUserId(), activityId = it.activityId ) if (pendingCount &gt; 0) { baselineDatabase.missionActivityEntityDao().updateActivityStatus( userId = getBaseLineUserId(), missionId = missionEntity.missionId, activityId = it.activityId, status = SurveyState.INPROGRESS.name ) saveActivityStatusEvent( missionId = it.missionId, activityId = it.activityId, activityStatus = SurveyState.INPROGRESS.ordinal ) }
            } else { baselineDatabase.missionActivityEntityDao().updateActivityStatus( userId =
            getBaseLineUserId(), activityId = it.activityId, missionId = missionEntity.missionId,
            status = SurveyState.COMPLETED.name ) saveActivityStatusEvent( missionId = it.missionId,
            activityId = it.activityId, activityStatus = SurveyState.COMPLETED.ordinal ) } }
        </ID>
        <ID>
            ExplicitItLambdaParameter:FetchContentDataFromNetworkUseCase.kt$FetchContentDataFromNetworkUseCase${ it -&gt; it != "" &amp;&amp; it != "question" }
        </ID>
        <ID>ForEachOnRange:TimePickerComponent.kt$(0..11).toList()</ID>
        <ID>FunctionParameterNaming:HtmlText.kt$URLSpanStyle: SpanStyle</ID>
        <ID>FunctionParameterNaming:HtmlText.kt$URLSpanStyle: SpanStyle = SpanStyle( color =
            linkTextColor(), textDecoration = TextDecoration.Underline )
        </ID>
        <ID>FunctionParameterNaming:QuestionType.kt$_index: Int</ID>
        <ID>ImplicitDefaultLocale:DeviceInfoUtils.kt$DeviceInfoUtils$String.format("%02X:", aMac)
        </ID>
        <ID>InvalidPackageDeclaration:BaseRepository.kt$package com.patsurvey.nudge.base</ID>
        <ID>InvalidPackageDeclaration:CharacterStyle.kt$package com.ireward.htmlcompose</ID>
        <ID>InvalidPackageDeclaration:HtmlText.kt$package com.patsurvey.nudge.customviews.htmltext
        </ID>
        <ID>InvalidPackageDeclaration:MetricAffectingSpan.kt$package com.ireward.htmlcompose</ID>
        <ID>InvalidPackageDeclaration:NavigationController.kt$package
            com.patsurvey.nudge.navigation
        </ID>
        <ID>LargeClass:BaselineModule.kt$BaselineModule</ID>
        <ID>LargeClass:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl :
            DataLoadingScreenRepository
        </ID>
        <ID>LargeClass:EventWriterHelperImpl.kt$EventWriterHelperImpl : EventWriterHelper</ID>
        <ID>LargeClass:QuestionScreenViewModel.kt$QuestionScreenViewModel : BaseViewModel</ID>
        <ID>LargeClass:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel : BaseViewModel
        </ID>
        <ID>LongMethod:AllSurveyeeListTab.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun
            AllSurveyeeListTab( paddingValues: PaddingValues, loaderState: LoaderState,
            pullRefreshState: PullRefreshState, viewModel: SurveyeeScreenViewModel,
            isSelectionEnabled: MutableState&lt;Boolean&gt;, navController: NavController,
            onActionEvent: (surveyeeListScreenActions: SurveyeeListScreenActions) -&gt; Unit,
            modifier: Modifier = Modifier, activityName: String, activityDate: String, activityId:
            Int, )
        </ID>
        <ID>LongMethod:AndroidDownloader.kt$AndroidDownloader$@SuppressLint("Range") fun
            checkDownloadStatus( downloadId: Long, id: Int, downloadManager: DownloadManager,
            onDownloadComplete:()-&gt;Unit, onDownloadFailed:()-&gt;Unit, )
        </ID>
        <ID>LongMethod:BaseLineQnToCSV.kt$fun List&lt;SaveAnswerEventForFormQuestionDto&gt;.toCsv(
            sectionList: List&lt;SectionEntity&gt;, didiDetailList: List&lt;SurveyeeEntity&gt;,
            optionItemDao: OptionItemDao, questionEntityDao: QuestionEntityDao,
            uniqueUserIdentifier: String ): List&lt;BaseLineQnATableCSV&gt;
        </ID>
        <ID>LongMethod:BaseLineQnToCSV.kt$suspend fun List&lt;SaveAnswerEventDto&gt;.toCSVSave(
            sectionList: List&lt;SectionEntity&gt;, didiDetailList: List&lt;SurveyeeEntity&gt;,
            optionItemDao: OptionItemDao, questionEntityDao: QuestionEntityDao,
            uniqueUserIdentifier: String ): List&lt;BaseLineQnATableCSV&gt;
        </ID>
        <ID>LongMethod:BaseLineStartScreen.kt$@SuppressLint("StateFlowValueCalledInComposition",
            "UnrememberedMutableState") @Composable fun BaseLineStartScreen( navController:
            NavHostController, baseLineStartViewModel: BaseLineStartViewModel, didiId: Int,
            surveyId: Int, sectionId: Int )
        </ID>
        <ID>LongMethod:BaseLineStartViewModel.kt$BaseLineStartViewModel$override fun &lt;T&gt;
            onEvent(event: T)
        </ID>
        <ID>LongMethod:BaselineLogger.kt$LogWriter$private suspend fun getSyslogFile( output: File,
            after: String = "", logFileNames: ArrayList&lt;String&gt;? = null ): Boolean
        </ID>
        <ID>LongMethod:CalculationResultComponent.kt$@SuppressLint("UnrememberedMutableState")
            @OptIn(ExperimentalComposeUiApi::class) @Composable fun CalculationResultComponent(
            title: String? = "Select", defaultValue: String = BLANK_STRING, showQuestion:
            OptionItemEntityState? = OptionItemEntityState.getEmptyStateObject(), isOnlyNumber:
            Boolean = true, maxLength: Int = 150, )
        </ID>
        <ID>LongMethod:CommonProfileScreen.kt$@Composable fun CommonProfileScreen( title:String,
            userName:String, userEmail:String, userMobile:String, userIdentity:String,
            onBackClick:()-&gt;Unit )
        </ID>
        <ID>LongMethod:CommonSettingScreen.kt$@Composable fun CommonSettingScreen( title:String,
            versionText:String, optionList:List&lt;SettingOptionModel&gt;, onBackClick:()-&gt;Unit,
            onItemClick:(Int,SettingOptionModel)-&gt;Unit, isScreenHaveLogoutButton:Boolean=true,
            onLogoutClick:()-&gt;Unit )
        </ID>
        <ID>LongMethod:CurlLoggingInterceptor.kt$CurlLoggingInterceptor$@Throws(IOException::class)
            override fun intercept(chain: Interceptor.Chain): Response
        </ID>
        <ID>LongMethod:CustomSnackbarViewComponent.kt$@Composable internal fun
            CustomSnackBarViewComponent( state: CustomSnackBarViewState, duration: Long, position:
            CustomSnackBarViewPosition, containerColor: Color, contentColor: Color, verticalPadding:
            Dp, horizontalPadding: Dp, icon: Int, enterAnimation: EnterTransition, exitAnimation:
            ExitTransition, )
        </ID>
        <ID>LongMethod:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$override
            suspend fun saveSurveyToDb( surveyResponseModel: SurveyResponseModel, languageId: Int, )
        </ID>
        <ID>LongMethod:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$private
            fun saveQuestionAndOptionsToDb( question: QuestionList?, section: Sections,
            surveyResponseModel: SurveyResponseModel, languageId: Int, isSubQuestionList: Boolean =
            false, parentId: Int = 0 )
        </ID>
        <ID>LongMethod:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$private
            fun saveSurveyAnswerToDb(questionAnswerResponseModels: List&lt;QuestionAnswerResponseModel&gt;?)
        </ID>
        <ID>LongMethod:DescriptionContentComponent.kt$@Composable fun DescriptionContentComponent(
            modifier: Modifier = Modifier, buttonClickListener: () -&gt; Unit, imageClickListener:
            (imageTypeDescriptionContent: String) -&gt; Unit, videoLinkClicked:
            (videoTypeDescriptionContent: String) -&gt; Unit, descriptionContentState:
            DescriptionContentState, )
        </ID>
        <ID>LongMethod:DialogComponent.kt$@Composable fun ShowCustomDialog( title: String, message:
            String, positiveButtonTitle: String? = BLANK_STRING, negativeButtonTitle: String? =
            BLANK_STRING, dismissOnBackPress: Boolean? = true, onPositiveButtonClick: () -&gt; Unit,
            onNegativeButtonClick: () -&gt; Unit )
        </ID>
        <ID>LongMethod:DropDownWithTitleComponent.kt$@Composable fun &lt;T&gt;
            DropDownWithTitleComponent( title: String, hint: String = stringResource(id =
            R.string.select), items: List&lt;T&gt;, modifier: Modifier, dropDownBorder: Color =
            borderGrey, dropDownBackground: Color = white, isRequiredField: Boolean = false,
            isContent: Boolean = false, selectedItem: String = "", expanded: Boolean = false,
            mTextFieldSize: Size, onExpandedChange: (Boolean) -&gt; Unit, onDismissRequest: () -&gt;
            Unit, onGlobalPositioned: (LayoutCoordinates) -&gt; Unit, onItemSelected: (T) -&gt;
            Unit, onInfoButtonClicked: () -&gt; Unit, )
        </ID>
        <ID>LongMethod:EditTextWithTitleComponent.kt$@OptIn(ExperimentalComposeUiApi::class)
            @Composable fun EditTextWithTitleComponent( title: String? = "select", defaultValue:
            String = BLANK_STRING, showQuestion: OptionItemEntityState? =
            OptionItemEntityState.getEmptyStateObject(), isOnlyNumber: Boolean = false, maxLength:
            Int = 150, isContent: Boolean = false, resetResponse: Boolean = false,
            onInfoButtonClicked: () -&gt; Unit, onAnswerSelection: (selectValue: String) -&gt; Unit,
            )
        </ID>
        <ID>LongMethod:EventWriterHelperImpl.kt$EventWriterHelperImpl$override suspend fun
            recheckMATStatus()
        </ID>
        <ID>LongMethod:EventWriterHelperImpl.kt$EventWriterHelperImpl$private suspend fun
            regenerateFromResponseEvent(forExcel: Boolean = false): List&lt;Events&gt;
        </ID>
        <ID>LongMethod:EventWriterHelperImpl.kt$EventWriterHelperImpl$suspend fun
            generateResponseEvent(): List&lt;Events&gt;
        </ID>
        <ID>LongMethod:EventWriterHelperImpl.kt$EventWriterHelperImpl$suspend fun
            getOptionsInDefaultLanguage( surveyId: Int, sectionId: Int, questionId: Int ): List&lt;OptionItemEntityState&gt;
        </ID>
        <ID>LongMethod:EventsWriterRepositoryImpl.kt$EventsWriterRepositoryImpl$override suspend fun
            &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ):
            Events?
        </ID>
        <ID>LongMethod:ExpandableDescriptionContentComponent.kt$@Composable fun
            ExpandableDescriptionContentComponent( questionDetailExpanded: (index: Int) -&gt; Unit,
            index: Int, contents: List&lt;ContentEntity?&gt;?, subTitle: String? = BLANK_STRING,
            imageClickListener: (imageTypeDescriptionContent: String) -&gt; Unit, videoLinkClicked:
            (videoTypeDescriptionContent: String) -&gt; Unit, )
        </ID>
        <ID>LongMethod:ExportImportScreen.kt$@Composable fun ExportImportScreen( viewModel:
            ExportImportViewModel = hiltViewModel(), navController: NavController)
        </ID>
        <ID>LongMethod:ExportImportViewModel.kt$ExportImportViewModel$fun exportBaseLineQnA(context:
            Context)
        </ID>
        <ID>LongMethod:FetchCastesFromNetworkUseCase.kt$FetchCastesFromNetworkUseCase$suspend
            operator fun invoke(loadAllCastes: Boolean)
        </ID>
        <ID>
            LongMethod:FetchContentDataFromNetworkUseCase.kt$FetchContentDataFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>
            LongMethod:FetchMissionDataFromNetworkUseCase.kt$FetchMissionDataFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>
            LongMethod:FetchSurveyeeListFromNetworkUseCase.kt$FetchSurveyeeListFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>LongMethod:FormQuestionSummaryScreen.kt$@Composable fun FormQuestionSummaryScreen(
            modifier: Modifier = Modifier, formResponseSummaryScreenViewModel:
            FormResponseSummaryScreenViewModel, navController: NavController, surveyId: Int,
            sectionId: Int, questionId: Int, surveyeeId: Int, )
        </ID>
        <ID>LongMethod:FormResponseCard.kt$@Composable fun DidiInfoCard( modifier: Modifier =
            Modifier, didiInfoEntity: DidiInfoEntity, didiDetails: SurveyeeEntity?, isEditAllowed:
            Boolean = true, onUpdate: (didiId: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:FormResponseCard.kt$@Composable fun FormResponseCard( modifier: Modifier =
            Modifier, formResponseObjectDto: FormResponseObjectDto, optionItemListWithConditionals:
            List&lt;OptionItemEntity&gt;, viewModel: BaseViewModel, isPictureRequired: Boolean =
            true, onDelete: (referenceId: String) -&gt; Unit, onUpdate: (referenceId: String) -&gt;
            Unit )
        </ID>
        <ID>LongMethod:FormResponseSummaryScreenViewModel.kt$FormResponseSummaryScreenViewModel$fun
            init(surveyId: Int, sectionId: Int, questionId: Int, surveyeeId: Int)
        </ID>
        <ID>LongMethod:FormTypeQuestionComponent.kt$@Composable fun FormTypeQuestionComponent(
            modifier: Modifier = Modifier, questionIndex: Int, question: QuestionEntity?,
            showQuestionState: QuestionEntityState = QuestionEntityState.getEmptyStateObject(),
            maxCustomHeight: Dp, contests: List&lt;ContentEntity?&gt;? = listOf(), itemCount: Int =
            0, summaryValue: String = BLANK_STRING, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit, onViewSummaryClicked: (questionId: Int)
            -&gt; Unit )
        </ID>
        <ID>LongMethod:FormTypeQuestionScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable
            fun FormTypeQuestionScreen( navController: NavHostController, viewModel:
            QuestionTypeScreenViewModel = hiltViewModel(), surveyID: Int = 0, sectionId: Int = 0,
            questionId: Int = 0, surveyeeId: Int, referenceId: String = BLANK_STRING )
        </ID>
        <ID>LongMethod:FormWithNoneTypeQuestionComponent.kt$@Composable fun
            FormWithNoneTypeQuestionComponent( modifier: Modifier = Modifier, questionIndex: Int,
            question: QuestionEntity?, showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(), noneOptionValue: FormQuestionResponseEntity?
            = null, maxCustomHeight: Dp, contests: List&lt;ContentEntity?&gt;? = listOf(),
            itemCount: Int = 0, summaryValue: String = BLANK_STRING, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int, isNoneMarkedForForm: Boolean, isFormOpened:
            Boolean) -&gt; Unit, onMediaTypeDescriptionAction: (descriptionContentType:
            DescriptionContentType, contentLink: String) -&gt; Unit, questionDetailExpanded: (index:
            Int) -&gt; Unit, onViewSummaryClicked: (questionId: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:GetExportOptionListUseCase.kt$GetExportOptionListUseCase$fun
            fetchExportOptionList():List&lt;SettingOptionModel&gt;
        </ID>
        <ID>LongMethod:GridTypeComponent.kt$@Composable fun GridTypeComponent( modifier: Modifier =
            Modifier, question: QuestionEntity, showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(), optionItemEntityList: List&lt;OptionItemEntity&gt;,
            areOptionsEnabled: Boolean = true, questionIndex: Int, contests: List&lt;ContentEntity?&gt;?
            = listOf(), selectedOptionIndices: List&lt;Int&gt;, maxCustomHeight: Dp, isEditAllowed:
            Boolean = true, onAnswerSelection: (questionIndex: Int, optionItems: List&lt;OptionItemEntity&gt;,
            selectedIndeciesCount: List&lt;Int&gt;) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:GridTypeComponent.kt$@Preview(showBackground = true) @Composable fun
            GridTypeQuestionPreview()
        </ID>
        <ID>LongMethod:ImageExpanderDialogComponent.kt$@Composable fun
            ImageExpanderDialogComponent(imagePath: String, onCloseClick: () -&gt; Unit)
        </ID>
        <ID>LongMethod:IncrementDecrementView.kt$@Composable fun IncrementDecrementView( title:
            String = BLANK_STRING, currentValue: String? = "0", isEditAllowed: Boolean = true,
            isContent: Boolean = false, showQuestion: OptionItemEntityState =
            OptionItemEntityState.getEmptyStateObject(), onInfoButtonClicked: () -&gt; Unit,
            onAnswerSelection: (selectValue: String) -&gt; Unit, isRequiredField: Boolean = false, )
        </ID>
        <ID>LongMethod:LanguageScreenComponent.kt$@OptIn(ExperimentalPermissionsApi::class)
            @Composable fun LanguageScreenComponent( viewModel: LanguageScreenViewModel,
            navController: NavController, modifier: Modifier = Modifier, pageFrom: String )
        </ID>
        <ID>LongMethod:ListTypeComponent.kt$@Composable fun ListTypeQuestion( modifier: Modifier =
            Modifier, question: QuestionEntity, contests: List&lt;ContentEntity?&gt;? = listOf(),
            showQuestionState: QuestionEntityState = QuestionEntityState.getEmptyStateObject(),
            optionItemEntityList: List&lt;OptionItemEntity&gt;?, questionIndex: Int,
            selectedOptionIndex: Int = -1, maxCustomHeight: Dp, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int, optionItem: OptionItemEntity) -&gt; Unit,
            onMediaTypeDescriptionAction: (descriptionContentType: DescriptionContentType,
            contentLink: String) -&gt; Unit, questionDetailExpanded: (index: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:LocationUtil.kt$LocationUtil$@RequiresApi(Build.VERSION_CODES.R) fun
            getLocation( context: Activity, gpsConsumer: Consumer&lt;Location&gt;, networkConsumer:
            Consumer&lt;Location&gt; )
        </ID>
        <ID>LongMethod:LocationUtil.kt$LocationUtil$fun getLocation( context: Activity,
            gpsLocationListener: LocationListener, networkLocationListener: LocationListener )
        </ID>
        <ID>LongMethod:LocationUtil.kt$LocationUtil$fun getLocation(context: Activity):
            LocationCoordinates?
        </ID>
        <ID>LongMethod:LocationUtil.kt$LocationUtil$fun setLocation(context: Activity)</ID>
        <ID>LongMethod:LoginScreenComponent.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable
            fun LoginScreenComponent( navController: NavController, viewModel: LoginScreenViewModel,
            modifier: Modifier = Modifier )
        </ID>
        <ID>
            LongMethod:Media.kt$@androidx.annotation.OptIn(androidx.media3.common.util.UnstableApi::class)
            @Composable fun Media( state: MediaState, modifier: Modifier = Modifier, surfaceType:
            SurfaceType = SurfaceType.SurfaceView, resizeMode: ResizeMode = ResizeMode.Fit,
            shutterColor: Color = Color.Black, keepContentOnPlayerReset: Boolean = false,
            useArtwork: Boolean = true, defaultArtworkPainter: Painter? = null, subtitles:
            @Composable ((CueGroup) -&gt; Unit)? = null, // TODO showBuffering: ShowBuffering =
            ShowBuffering.Never, buffering: @Composable (() -&gt; Unit)? = null, errorMessage:
            @Composable ((PlaybackException) -&gt; Unit)? = null, overlay: @Composable (() -&gt;
            Unit)? = null, controllerHideOnTouch: Boolean = true, controllerAutoShow: Boolean =
            true, controller: @Composable ((MediaState) -&gt; Unit)? = null )
        </ID>
        <ID>LongMethod:MiscQuestionBoxComponent.kt$@Composable fun MiscQuestionBoxComponent(
            modifier: Modifier = Modifier, questionIndex: Int, question: QuestionEntity, contests:
            List&lt;ContentEntity?&gt;? = listOf(), showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(),
            selectedOptionMapForNumericInputTypeQuestions: Map&lt;Int, InputTypeQuestionAnswerEntity&gt;,
            selectedOption: OptionItemEntity?, maxCustomHeight: Dp, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int, optionItemEntity: OptionItemEntity,
            selectedValue: String, selectedId: Int) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:MiscQuestionBoxComponent.kt$@Preview(showBackground = true) @Composable fun
            InputQuestionBoxComponentPreview()
        </ID>
        <ID>LongMethod:MissionScreen_1.kt$@OptIn(ExperimentalMaterialApi::class)
            @SuppressLint("UnusedMaterial3ScaffoldPaddingParameter") @Preview(showBackground = true)
            @Composable fun MissionScreen( navController: NavController = rememberNavController(),
            viewModel: MissionViewModel = hiltViewModel() )
        </ID>
        <ID>
            LongMethod:MissionSummaryScreen.kt$@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
            @Composable fun MissionSummaryScreen( navController: NavController =
            rememberNavController(), missionId: Int = 0, missionName: String, missionDate: String,
            viewModel: MissionSummaryViewModel = hiltViewModel() )
        </ID>
        <ID>LongMethod:MissonRowScreen.kt$@Composable fun MissionRowScreen( modifier: Modifier =
            Modifier, mission: MissionEntity, viewModel: MissionViewModel, pendingCount: Int,
            missionDueDate: String = BLANK_STRING, onViewStatusClick: () -&gt; Unit, onStartClick:
            () -&gt; Unit )
        </ID>
        <ID>LongMethod:MultiSelectDropdown.kt$@Composable fun MultiSelectDropdown( items: List&lt;ValuesDto&gt;,
            selectedItems: List&lt;String&gt;, onItemSelected: (String) -&gt; Unit, modifier:
            Modifier = Modifier, isContent: Boolean = false, title: String = stringResource(id =
            R.string.select), hint: String = stringResource(id = R.string.select), dropDownBorder:
            Color = borderGrey, dropDownBackground: Color = white, isRequiredField: Boolean = false,
            expanded: Boolean = false, onExpandedChange: (Boolean) -&gt; Unit, onDismissRequest: ()
            -&gt; Unit, onGlobalPositioned: (LayoutCoordinates) -&gt; Unit, mTextFieldSize: Size,
            onInfoButtonClicked: () -&gt; Unit, )
        </ID>
        <ID>LongMethod:NavHomeGraph.kt$@Composable fun NavHomeGraph(navController:
            NavHostController, prefRepo: PrefRepo, modifier: Modifier)
        </ID>
        <ID>LongMethod:NestedLazyList.kt$@RequiresApi(Build.VERSION_CODES.N) @Composable fun
            NestedLazyList( modifier: Modifier = Modifier, outerState: LazyListState =
            rememberLazyListState(), innerState: LazyListState = rememberLazyListState(),
            queLazyState: LazyListState = rememberLazyListState(), surveyeeId: Int, navController:
            NavController, viewModel: BaseViewModel, sectionDetails: SectionListItem,
            sectionInfoButtonClicked: () -&gt; Unit, answeredQuestionCountIncreased: (question:
            QuestionEntityState, isQuestionResponseUnanswered: Boolean) -&gt; Unit, )
        </ID>
        <ID>LongMethod:NestedLazyListForFormQuestions.kt$@Composable fun
            NestedLazyListForFormQuestions( modifier: Modifier = Modifier, outerState: LazyListState
            = rememberLazyListState(), innerState: LazyListState = rememberLazyListState(),
            viewModel: BaseViewModel, onSaveFormTypeOption: (questionTypeEvent: QuestionTypeEvent) -&gt;
            Unit, saveCacheFormData: (formQuestionResponseEntity: FormQuestionResponseEntity) -&gt;
            Unit, answeredQuestionCountIncreased: () -&gt; Unit, sectionInfoButtonClicked:
            (contents: List&lt;ContentList&gt;) -&gt; Unit, )
        </ID>
        <ID>
            LongMethod:OtpVerificationScreenComponent.kt$@SuppressLint("StateFlowValueCalledInComposition",
            "StringFormatInvalid") @Composable fun OtpVerificationScreenComponent( navController:
            NavController, viewModel: OtpVerificationViewModel, modifier: Modifier = Modifier,
            mobileNumber: String )
        </ID>
        <ID>LongMethod:PrimarySecandaryButtonBoxPreFilled.kt$@Composable fun
            PrimarySecandaryButtonBoxPreFilled( modifier: Modifier = Modifier, primaryButtonText:
            String, secandaryButtonRequired: Boolean = true, secandaryButtonText: String = "",
            primaryButtonOnClick: () -&gt; Unit, secandaryButtonOnClick: () -&gt; Unit, )
        </ID>
        <ID>LongMethod:QuestionScreen.kt$@OptIn(ExperimentalMaterialApi::class,
            ExperimentalMaterial3Api::class) @Composable fun QuestionScreen( modifier: Modifier =
            Modifier, navController: NavController, viewModel: QuestionScreenViewModel, surveyId:
            Int, surveyeeId: Int, sectionId: Int, nextSectionHandler: (sectionId: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$override suspend
            fun getSections( sectionId: Int, surveyId: Int, languageId: Int ): SectionListItem
        </ID>
        <ID>LongMethod:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$override suspend
            fun saveSectionAnswersToServer(didiId: Int, surveyId: Int)
        </ID>
        <ID>LongMethod:QuestionScreenViewModel.kt$QuestionScreenViewModel$override fun &lt;T&gt;
            onEvent(event: T)
        </ID>
        <ID>LongMethod:QuestionType.kt$@Composable fun QuestionType( modifier: Modifier = Modifier,
            parentIndex: Int, questionIndex: Int, question: QuestionEntity, optionItemEntityList:
            List&lt;OptionItemEntity&gt;?, selectedOptionIndex: Int = -1, maxCustomHeight: Dp,
            isLazyVerticalGrid: Boolean = false, onAnswerSelection: (questionIndex: Int, optionItem:
            OptionItemEntity) -&gt; Unit, questionDetailExpanded: (index: Int) -&gt; Unit,
            onMediaTypeDescriptionAction: (descriptionContentType: DescriptionContentType,
            contentLink: String) -&gt; Unit )
        </ID>
        <ID>LongMethod:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$override fun &lt;T&gt;
            onEvent(event: T)
        </ID>
        <ID>LongMethod:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$private fun
            getOptionItemEntityState( surveyId: Int, didiId: Int, sectionId: Int, questionId: Int )
        </ID>
        <ID>LongMethod:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$private fun
            removeAnswersForUnSelectedConditions( response: FormQuestionResponseEntity,
            isMultiSelectDropDown: Boolean = false )
        </ID>
        <ID>LongMethod:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$private suspend
            fun getOptionsInDefaultLanguage( surveyId: Int, sectionId: Int, questionId: Int )
        </ID>
        <ID>LongMethod:RadioOptionTypeComponent.kt$@Composable fun RadioOptionTypeComponent(
            optionItemEntityState: OptionItemEntityState, isMandatory: Boolean = false, isContent:
            Boolean = false, selectedValue: String = BLANK_STRING, onInfoButtonClicked: () -&gt;
            Unit, onOptionSelected: (optionValue: String, optionId: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:RadioQuestionBoxComponent.kt$@SuppressLint("UnrememberedMutableState")
            @Composable fun RadioQuestionBoxComponent( modifier: Modifier = Modifier, questionIndex:
            Int, question: QuestionEntity, contests: List&lt;ContentEntity?&gt;? = listOf(),
            showQuestionState: QuestionEntityState = QuestionEntityState.getEmptyStateObject(),
            optionItemEntityList: List&lt;OptionItemEntity&gt;, selectedOptionIndex: Int = -1,
            maxCustomHeight: Dp, isEditAllowed: Boolean = true, onAnswerSelection: (questionIndex:
            Int, optionItem: OptionItemEntity) -&gt; Unit, questionDetailExpanded: (index: Int) -&gt;
            Unit, onMediaTypeDescriptionAction: (descriptionContentType: DescriptionContentType,
            contentLink: String) -&gt; Unit )
        </ID>
        <ID>LongMethod:SearchScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun
            SearchScreens( modifier: Modifier = Modifier, viewModel: SearchScreenViewModel,
            surveyId: Int, surveyeeId: Int, fromScreen: String = ARG_FROM_SECTION_SCREEN,
            navController: NavController )
        </ID>
        <ID>LongMethod:SearchWithFilterComponent.kt$@OptIn(ExperimentalMaterial3Api::class)
            @Composable fun SearchWithFilterViewComponent( placeholderString: String, modifier:
            Modifier = Modifier, filterSelected: Boolean = false, showFilter: Boolean = true,
            onFilterSelected: (Boolean) -&gt; Unit, onSearchValueChange: (String) -&gt; Unit )
        </ID>
        <ID>LongMethod:SectionItemComponent.kt$@Composable fun SectionItemComponent( index: Int,
            modifier: Modifier = Modifier, sectionStateItem: SectionState, onclick: (Int) -&gt;
            Unit, onDetailIconClicked: (Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:SectionListScreen.kt$@OptIn(ExperimentalMaterialApi::class,
            ExperimentalMaterial3Api::class) @Composable fun SectionListScreen( navController:
            NavController, viewModel: SectionListScreenViewModel, modifier: Modifier = Modifier,
            didiId: Int, surveyId: Int )
        </ID>
        <ID>LongMethod:SectionListScreenRepositoryImpl.kt$SectionListScreenRepositoryImpl$override
            fun getSectionListForSurvey(surveyId: Int, languageId: Int): List&lt;SectionListItem&gt;
        </ID>
        <ID>LongMethod:SectionListScreenRepositoryImpl.kt$SectionListScreenRepositoryImpl$override
            fun getSectionsListForDidi( didiId: Int, surveyId: Int, languageId: Int ): List&lt;SectionListItem&gt;
        </ID>
        <ID>LongMethod:SectionListScreenViewModel.kt$SectionListScreenViewModel$override fun &lt;T&gt;
            onEvent(event: T)
        </ID>
        <ID>LongMethod:SettingBSScreen.kt$@Composable fun SettingBSScreen( viewModel:
            SettingBSViewModel = hiltViewModel(), navController: NavController )
        </ID>
        <ID>LongMethod:SettingBSViewModel.kt$SettingBSViewModel$fun compressEventData(title:
            String)
        </ID>
        <ID>LongMethod:SimpleController.kt$@Composable fun SimpleController( mediaState: MediaState,
            modifier: Modifier = Modifier, )
        </ID>
        <ID>LongMethod:SplashScreenComponent.kt$@Composable fun SplashScreenComponent(
            navController: NavController, modifier: Modifier = Modifier, viewModel:
            SplashScreenViewModel )
        </ID>
        <ID>LongMethod:StepsBox.kt$@Composable fun StepsBox( modifier: Modifier = Modifier,
            boxTitle: String, subTitle: String, stepNo: Int, index: Int, iconResourceId: Int,
            isCompleted: Boolean = false, backgroundColor:Color?= white, onclick: (Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:SummaryCardComponent.kt$@Composable fun SummaryCardComponent( itemCount: Int,
            question: QuestionEntity?, onViewSummaryClicked: (questionId: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:SurveyeeCardComponent.kt$@Composable fun SurveyeeCardComponent( modifier:
            Modifier = Modifier, surveyeeState: SurveyeeCardState, showCheckBox: Boolean,
            fromScreen: String, primaryButtonText: String = stringResource(R.string.start_baseline),
            checkBoxChecked: (surveyeeEntity: SurveyeeEntity, isChecked: Boolean) -&gt; Unit,
            buttonClicked: (buttonName: ButtonName, surveyeeId: Int) -&gt; Unit, moveDidiToThisWeek:
            (surveyeeCardState: SurveyeeCardState, moveToThisWeek: Boolean) -&gt; Unit )
        </ID>
        <ID>LongMethod:SurveyeeCardWithTolaFilterComponent.kt$@Composable fun
            SurveyeeCardWithTolaFilterComponent( modifier: Modifier = Modifier, tolaName: String,
            surveyeeStateList: List&lt;SurveyeeCardState&gt;, showCheckBox: Boolean, fromScreen:
            String, primaryButtonText: String = stringResource(R.string.start_baseline),
            checkBoxChecked: (surveyeeEntity: SurveyeeEntity, isChecked: Boolean) -&gt; Unit,
            moveDidiToThisWeek: (surveyeeCardState: SurveyeeCardState, moveToThisWeek: Boolean) -&gt;
            Unit, buttonClicked: (buttonName: ButtonName, surveyeeId: Int) -&gt; Unit )
        </ID>
        <ID>LongMethod:SurveyeeCardWithTolaFilterComponent.kt$@Preview(showSystemUi = true,
            showBackground = true) @Composable fun SurveyeeCardWithTolaFilterComponentPreview()
        </ID>
        <ID>LongMethod:SurveyeeListScreen.kt$@OptIn(ExperimentalMaterial3Api::class,
            ExperimentalMaterialApi::class) @SuppressLint("UnusedMaterialScaffoldPaddingParameter")
            @Composable fun SurveyeeListScreen( modifier: Modifier = Modifier, navController:
            NavController, viewModel: SurveyeeScreenViewModel, missionId: Int, activityName: String,
            activityDate: String, activityId: Int )
        </ID>
        <ID>LongMethod:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$override fun &lt;T&gt;
            onEvent(event: T)
        </ID>
        <ID>LongMethod:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$override fun
            performSearchQuery( queryTerm: String, isFilterApplied: Boolean, fromScreen: String )
        </ID>
        <ID>LongMethod:ThisWeekSurveyeeListTab.kt$@OptIn(ExperimentalMaterialApi::class) @Composable
            fun ThisWeekSurvyeeListTab( paddingValues: PaddingValues, loaderState: LoaderState,
            pullRefreshState: PullRefreshState, viewModel: SurveyeeScreenViewModel, navController:
            NavController, activityId: Int, onActionEvent: (surveyeeListScreenActions:
            SurveyeeListScreenActions) -&gt; Unit, modifier: Modifier = Modifier )
        </ID>
        <ID>LongMethod:TimeBar.kt$@Composable fun TimeBar( durationMs: Long, positionMs: Long,
            bufferedPositionMs: Long, modifier: Modifier = Modifier, enabled: Boolean = true,
            contentPadding: PaddingValues = PaddingValues(0.dp), scrubberCenterAsAnchor: Boolean =
            false, onScrubStart: ((positionMs: Long) -&gt; Unit)? = null, onScrubMove: ((positionMs:
            Long) -&gt; Unit)? = null, onScrubStop: ((positionMs: Long) -&gt; Unit)? = null,
            progress: @Composable (current: Float, scrubbed: Float, buffered: Float) -&gt; Unit = {
            _, scrubbed, buffered -&gt; // by default, use scrubbed progress as played progress
            TimeBarProgress(played = scrubbed, buffered = buffered) }, scrubber: @Composable
            (enable: Boolean, scrubbing: Boolean) -&gt; Unit = { enable, scrubbing -&gt;
            TimeBarScrubber(enable, scrubbing) } )
        </ID>
        <ID>LongMethod:TimePickerComponent.kt$@Composable fun RangePickerComponent( isMandatory:
            Boolean = false, title: String? = BLANK_STRING, defaultValue: String = BLANK_STRING,
            showQuestionState: OptionItemEntityState? = OptionItemEntityState.getEmptyStateObject(),
            isContent: Boolean = false, typePicker: String, onInfoButtonClicked: () -&gt; Unit,
            onAnswerSelection: (selectValue: String, selectedValueId: Int) -&gt; Unit, )
        </ID>
        <ID>LongMethod:Utils.kt$@Composable fun ShowCustomDialog( title: String, message: String,
            positiveButtonTitle: String? = BLANK_STRING, negativeButtonTitle: String? =
            BLANK_STRING, dismissOnBackPress: Boolean? = true, onPositiveButtonClick: () -&gt; Unit,
            onNegativeButtonClick: () -&gt; Unit )
        </ID>
        <ID>LongMethod:Utils.kt$fun List&lt;OptionItemEntity&gt;.convertToSaveAnswerEventOptionItemsDto(type:
            QuestionType?): List&lt;SaveAnswerEventOptionItemDto&gt;
        </ID>
        <ID>LongMethod:VideoPlayer.kt$@Composable private fun MediaContent( mediaState: MediaState,
            isLandscape: Boolean, modifier: Modifier = Modifier, navController: NavHostController )
        </ID>
        <ID>LongMethod:YesNoButtonComponent.kt$@SuppressLint("UnrememberedMutableState") @Composable
            fun YesNoButtonComponent( defaultValue: Int = -1, title: String? = "Select",
            isMandatory: Boolean = false, onOptionSelected: (Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:ActivityTaskDao.kt$ActivityTaskDao$( userId: String, taskId: Int,
            activityId: Int, missionId: Int, status: String, actualCompletedDate: String )
        </ID>
        <ID>LongParameterList:ActivityTaskDao.kt$ActivityTaskDao$( userId: String, taskId: Int,
            activityId: Int, missionId: Int, status: String, actualStartDate: String )
        </ID>
        <ID>LongParameterList:AlertDialogComponent.kt$( onDismissRequest: () -&gt; Unit,
            onConfirmation: () -&gt; Unit, dialogTitle: String, dialogText: String,
            confirmButtonText: String = stringResource(R.string.default_confirm_button_text),
            dismissButtonText: String = stringResource(R.string.default_dismiss_button_text), icon:
            ImageVector? = null, )
        </ID>
        <ID>LongParameterList:AllSurveyeeListTab.kt$( paddingValues: PaddingValues, loaderState:
            LoaderState, pullRefreshState: PullRefreshState, viewModel: SurveyeeScreenViewModel,
            isSelectionEnabled: MutableState&lt;Boolean&gt;, navController: NavController,
            onActionEvent: (surveyeeListScreenActions: SurveyeeListScreenActions) -&gt; Unit,
            modifier: Modifier = Modifier, activityName: String, activityDate: String, activityId:
            Int, )
        </ID>
        <ID>LongParameterList:BaselineModule.kt$BaselineModule$( prefRepo: PrefRepo, apiService:
            ApiService, languageListDao: LanguageListDao, surveyeeEntityDao: SurveyeeEntityDao,
            surveyEntityDao: SurveyEntityDao, sectionEntityDao: SectionEntityDao, questionEntityDao:
            QuestionEntityDao, optionItemDao: OptionItemDao, missionEntityDao: MissionEntityDao,
            missionActivityDao: MissionActivityDao, activityTaskDao: ActivityTaskDao, contentDao:
            ContentDao, baselineDatabase: NudgeBaselineDatabase, didiSectionProgressEntityDao:
            DidiSectionProgressEntityDao, apiStatusDao: ApiStatusDao )
        </ID>
        <ID>LongParameterList:BaselineModule.kt$BaselineModule$( prefRepo: PrefRepo, apiService:
            ApiService, surveyEntityDao: SurveyEntityDao, sectionEntityDao: SectionEntityDao,
            questionEntityDao: QuestionEntityDao, didiSectionProgressEntityDao:
            DidiSectionProgressEntityDao, optionItemDao: OptionItemDao, surveyeeEntityDao:
            SurveyeeEntityDao, contentDao: ContentDao, taskDao: ActivityTaskDao )
        </ID>
        <ID>LongParameterList:BaselineModule.kt$BaselineModule$( prefRepo: PrefRepo, apiService:
            ApiService, surveyeeEntityDao: SurveyeeEntityDao, languageListDao: LanguageListDao,
            activityTaskDao: ActivityTaskDao, missionActivityDao: MissionActivityDao, taskDao:
            ActivityTaskDao )
        </ID>
        <ID>LongParameterList:BaselineModule.kt$BaselineModule$( prefRepo: PrefRepo, apiService:
            ApiService, surveyeeEntityDao: SurveyeeEntityDao, surveyEntityDao: SurveyEntityDao,
            sectionEntityDao: SectionEntityDao, questionEntityDao: QuestionEntityDao,
            didiSectionProgressEntityDao: DidiSectionProgressEntityDao, sectionAnswerEntityDao:
            SectionAnswerEntityDao, optionItemDao: OptionItemDao, formQuestionResponseDao:
            FormQuestionResponseDao, inputTypeQuestionAnswerDao: InputTypeQuestionAnswerDao,
            contentDao: ContentDao )
        </ID>
        <ID>LongParameterList:BaselineModule.kt$BaselineModule$( prefRepo: PrefRepo, repositoryImpl:
            EventsWriterRepositoryImpl, eventsDao: EventsDao, eventDependencyDao:
            EventDependencyDao, surveyEntityDao: SurveyEntityDao, surveyeeEntityDao:
            SurveyeeEntityDao, questionEntityDao: QuestionEntityDao, optionItemDao: OptionItemDao,
            taskDao: ActivityTaskDao, activityDao: MissionActivityDao, missionEntityDao:
            MissionEntityDao, didiSectionProgressEntityDao: DidiSectionProgressEntityDao,
            baselineDatabase: NudgeBaselineDatabase )
        </ID>
        <ID>LongParameterList:BaselineModule.kt$BaselineModule$( prefRepo: PrefRepo,
            surveyEntityDao: SurveyEntityDao, missionEntityDao: MissionEntityDao,
            didiSectionProgressEntityDao: DidiSectionProgressEntityDao, eventsDao: EventsDao,
            eventDependencyDao: EventDependencyDao, nudgeBaselineDatabase: NudgeBaselineDatabase,
            eventWriterHelper: EventWriterHelperImpl )
        </ID>
        <ID>LongParameterList:ButtonUtil.kt$( modifier: Modifier = Modifier, buttonTitle: String,
            isArrowRequired: Boolean = true, isLeftArrow: Boolean = false, isActive: Boolean =
            false, textColor: Color = Color.White, iconTintColor: Color = Color.White, onClick: () -&gt;
            Unit )
        </ID>
        <ID>LongParameterList:ButtonUtil.kt$( modifier: Modifier = Modifier, positiveButtonText:
            String, negativeButtonRequired: Boolean = true, negativeButtonText: String = "",
            positiveButtonOnClick: () -&gt; Unit, negativeButtonOnClick: () -&gt; Unit,
            isPositiveButtonActive: Boolean = true )
        </ID>
        <ID>LongParameterList:CommonProfileScreen.kt$( title:String, userName:String,
            userEmail:String, userMobile:String, userIdentity:String, onBackClick:()-&gt;Unit )
        </ID>
        <ID>LongParameterList:CommonSettingScreen.kt$( title:String, versionText:String,
            optionList:List&lt;SettingOptionModel&gt;, onBackClick:()-&gt;Unit,
            onItemClick:(Int,SettingOptionModel)-&gt;Unit, isScreenHaveLogoutButton:Boolean=true,
            onLogoutClick:()-&gt;Unit )
        </ID>
        <ID>LongParameterList:CustomAnimatedVisibilityComponent.kt$( visible: Boolean, modifier:
            Modifier = Modifier, enter: EnterTransition = fadeIn() + expandHorizontally(), exit:
            ExitTransition = shrinkHorizontally() + fadeOut(), label: String = "AnimatedVisibility",
            content: @Composable() AnimatedVisibilityScope.() -&gt; Unit )
        </ID>
        <ID>LongParameterList:CustomAnimatedVisibilityComponent.kt$( visible: Boolean, modifier:
            Modifier = Modifier, enter: EnterTransition = fadeIn() + expandIn(), exit:
            ExitTransition = shrinkOut() + fadeOut(), label: String = "AnimatedVisibility", content:
            @Composable() AnimatedVisibilityScope.() -&gt; Unit )
        </ID>
        <ID>LongParameterList:CustomAnimatedVisibilityComponent.kt$( visible: Boolean, modifier:
            Modifier = Modifier, enter: EnterTransition = fadeIn() + expandVertically(), exit:
            ExitTransition = shrinkVertically() + fadeOut(), label: String = "AnimatedVisibility",
            content: @Composable() AnimatedVisibilityScope.() -&gt; Unit )
        </ID>
        <ID>LongParameterList:CustomOutlineTextField.kt$( value: String, onValueChange: (String) -&gt;
            Unit, modifier: Modifier = Modifier, enabled: Boolean = true, readOnly: Boolean = false,
            textStyle: TextStyle = LocalTextStyle.current, placeholder: @Composable (() -&gt; Unit)?
            = null, leadingIcon: @Composable (() -&gt; Unit)? = null, trailingIcon: @Composable (()
            -&gt; Unit)? = null, isError: Boolean = false, visualTransformation:
            VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions =
            KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default,
            singleLine: Boolean = false, maxLines: Int = if (singleLine) 1 else Int.MAX_VALUE,
            minLines: Int = 1, interactionSource: MutableInteractionSource = remember {
            MutableInteractionSource() }, shape: Shape = MaterialTheme.shapes.small, colors:
            TextFieldColors = TextFieldDefaults.outlinedTextFieldColors() )
        </ID>
        <ID>LongParameterList:CustomSnackbarViewComponent.kt$( message: String?, position:
            CustomSnackBarViewPosition, containerColor: Color, contentColor: Color, verticalPadding:
            Dp, horizontalPadding: Dp, icon: Int, isCustomIcon: Boolean, isSuccess: Boolean, )
        </ID>
        <ID>LongParameterList:CustomSnackbarViewComponent.kt$( modifier: Modifier = Modifier, state:
            CustomSnackBarViewState, position: CustomSnackBarViewPosition =
            CustomSnackBarViewPosition.Bottom, duration: Long = 3000L, icon: Int, containerColor:
            Color = Color.Gray, contentColor: Color = TextWhite, enterAnimation: EnterTransition =
            expandVertically( animationSpec = tween(delayMillis = 300), expandFrom = when(position)
            { is CustomSnackBarViewPosition.Top -&gt; Alignment.Top is
            CustomSnackBarViewPosition.Bottom -&gt; Alignment.Bottom is
            CustomSnackBarViewPosition.Float -&gt; Alignment.CenterVertically } ), exitAnimation:
            ExitTransition = shrinkVertically( animationSpec = tween(delayMillis = 300),
            shrinkTowards = when(position) { is CustomSnackBarViewPosition.Top -&gt; Alignment.Top
            is CustomSnackBarViewPosition.Bottom -&gt; Alignment.Bottom is
            CustomSnackBarViewPosition.Float -&gt; Alignment.CenterVertically } ), verticalPadding:
            Dp = 12.dp, horizontalPadding: Dp = 8.dp )
        </ID>
        <ID>LongParameterList:CustomSnackbarViewComponent.kt$( state: CustomSnackBarViewState,
            duration: Long, position: CustomSnackBarViewPosition, containerColor: Color,
            contentColor: Color, verticalPadding: Dp, horizontalPadding: Dp, icon: Int,
            enterAnimation: EnterTransition, exitAnimation: ExitTransition, )
        </ID>
        <ID>LongParameterList:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$(
            question: QuestionList?, section: Sections, surveyResponseModel: SurveyResponseModel,
            languageId: Int, isSubQuestionList: Boolean = false, parentId: Int = 0 )
        </ID>
        <ID>LongParameterList:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$(
            val prefRepo: PrefRepo, val apiService: ApiService, val languageListDao:
            LanguageListDao, val surveyeeEntityDao: SurveyeeEntityDao, val surveyEntityDao:
            SurveyEntityDao, val sectionEntityDao: SectionEntityDao, val questionEntityDao:
            QuestionEntityDao, val optionItemDao: OptionItemDao, val missionEntityDao:
            MissionEntityDao, val missionActivityDao: MissionActivityDao, val activityTaskDao:
            ActivityTaskDao, val contentDao: ContentDao, val baselineDatabase:
            NudgeBaselineDatabase, val didiSectionProgressEntityDao: DidiSectionProgressEntityDao,
            val apiStatusDao: ApiStatusDao )
        </ID>
        <ID>
            LongParameterList:DeleteFormQuestionOptionResponseUseCase.kt$DeleteFormQuestionOptionResponseUseCase$(
            optionId: Int, questionId: Int, sectionId: Int, surveyId: Int, surveyeeId: Int,
            referenceId: String )
        </ID>
        <ID>LongParameterList:DialogComponent.kt$( title: String, message: String, isBulletShow:
            Boolean? = false, list: List&lt;String&gt;? = emptyList(), setShowDialog: (Boolean) -&gt;
            Unit, positiveButtonClicked: () -&gt; Unit )
        </ID>
        <ID>LongParameterList:DialogComponent.kt$( title: String, message: String,
            positiveButtonTitle: String? = BLANK_STRING, negativeButtonTitle: String? =
            BLANK_STRING, dismissOnBackPress: Boolean? = true, onPositiveButtonClick: () -&gt; Unit,
            onNegativeButtonClick: () -&gt; Unit )
        </ID>
        <ID>LongParameterList:DropDownWithTitleComponent.kt$( title: String, hint: String =
            stringResource(id = R.string.select), items: List&lt;T&gt;, modifier: Modifier,
            dropDownBorder: Color = borderGrey, dropDownBackground: Color = white, isRequiredField:
            Boolean = false, isContent: Boolean = false, selectedItem: String = "", expanded:
            Boolean = false, mTextFieldSize: Size, onExpandedChange: (Boolean) -&gt; Unit,
            onDismissRequest: () -&gt; Unit, onGlobalPositioned: (LayoutCoordinates) -&gt; Unit,
            onItemSelected: (T) -&gt; Unit, onInfoButtonClicked: () -&gt; Unit, )
        </ID>
        <ID>LongParameterList:EditTextWithTitleComponent.kt$( title: String? = "select",
            defaultValue: String = BLANK_STRING, showQuestion: OptionItemEntityState? =
            OptionItemEntityState.getEmptyStateObject(), isOnlyNumber: Boolean = false, maxLength:
            Int = 150, isContent: Boolean = false, resetResponse: Boolean = false,
            onInfoButtonClicked: () -&gt; Unit, onAnswerSelection: (selectValue: String) -&gt; Unit,
            )
        </ID>
        <ID>LongParameterList:EventWriterHelper.kt$EventWriterHelper$( didi: SurveyeeEntity,
            location: String, filePath: String, userType: String, questionId: Int, referenceId:
            String, questionEntity: QuestionEntity?, optionItemEntity: OptionItemEntity?,
            sectionDetails: SectionEntity, subjectType: String )
        </ID>
        <ID>LongParameterList:EventWriterHelper.kt$EventWriterHelper$( didi: SurveyeeEntity,
            location: String, filePath: String, userType: String, questionId: Int, referenceId:
            String, sectionDetails: SectionListItem, subjectType: String )
        </ID>
        <ID>LongParameterList:EventWriterHelper.kt$EventWriterHelper$( surveyId: Int, sectionId:
            Int, didiId: Int, questionId: Int, questionType: String, questionTag: Int, questionDesc:
            String, referenceOptionList: List&lt;OptionItemEntityState&gt;, showQuestion: Boolean =
            true, saveAnswerEventOptionItemDtoList: List&lt;SaveAnswerEventOptionItemDto&gt; )
        </ID>
        <ID>LongParameterList:EventWriterHelper.kt$EventWriterHelper$( surveyId: Int, sectionId:
            Int, didiId: Int, questionId: Int, questionType: String, questionTag: Int, questionDesc:
            String, showQuestion: Boolean = true, saveAnswerEventOptionItemDtoList: List&lt;SaveAnswerEventOptionItemDto&gt;
            )
        </ID>
        <ID>LongParameterList:EventWriterHelperImpl.kt$EventWriterHelperImpl$( val prefRepo:
            PrefRepo, private val repositoryImpl: EventsWriterRepositoryImpl, private val eventsDao:
            EventsDao, private val eventDependencyDao: EventDependencyDao, private val
            surveyEntityDao: SurveyEntityDao, private val surveyeeEntityDao: SurveyeeEntityDao,
            private val questionEntityDao: QuestionEntityDao, private val optionItemDao:
            OptionItemDao, private val taskDao: ActivityTaskDao, private val activityDao:
            MissionActivityDao, private val missionEntityDao: MissionEntityDao, private val
            didiSectionProgressEntityDao: DidiSectionProgressEntityDao, private val
            baselineDatabase: NudgeBaselineDatabase )
        </ID>
        <ID>LongParameterList:ExpandableDescriptionContentComponent.kt$( questionDetailExpanded:
            (index: Int) -&gt; Unit, index: Int, contents: List&lt;ContentEntity?&gt;?, subTitle:
            String? = BLANK_STRING, imageClickListener: (imageTypeDescriptionContent: String) -&gt;
            Unit, videoLinkClicked: (videoTypeDescriptionContent: String) -&gt; Unit, )
        </ID>
        <ID>LongParameterList:ExportImportViewModel.kt$ExportImportViewModel$( private val
            exportImportUseCase: ExportImportUseCase, private val eventWriterHelperImpl:
            EventWriterHelperImpl, private val sectionEntityDao: SectionEntityDao, private val
            surveyeeEntityDao: SurveyeeEntityDao, private val optionItemDao: OptionItemDao, private
            val questionEntityDao: QuestionEntityDao, private val missionActivityDao:
            MissionActivityDao, val prefRepo: PrefRepo )
        </ID>
        <ID>LongParameterList:FormQuestionResponseDao.kt$FormQuestionResponseDao$( userId: String,
            optionId: Int, questionId: Int, sectionId: Int, surveyId: Int, surveyeeId: Int,
            referenceId: String )
        </ID>
        <ID>LongParameterList:FormQuestionResponseDao.kt$FormQuestionResponseDao$( userId: String,
            surveyId: Int, sectionId: Int, questionId: Int, optionId: Int, referenceId: String,
            didiId: Int)
        </ID>
        <ID>LongParameterList:FormQuestionResponseDao.kt$FormQuestionResponseDao$( userId: String,
            surveyId: Int, sectionId: Int, questionId: Int, optionId: Int, selectedValue: String,
            referenceId: String, didiId: Int, selectedValueIds: List&lt;Int&gt; )
        </ID>
        <ID>LongParameterList:FormQuestionResponseDao.kt$FormQuestionResponseDao$( userId: String,
            surveyId: Int, sectionId: Int, questionId: Int, referenceId: String, didiId: Int,
            optionId: Int )
        </ID>
        <ID>LongParameterList:FormQuestionResponseRepository.kt$FormQuestionResponseRepository$(
            optionId: Int, questionId: Int, sectionId: Int, surveyId: Int, surveyeeId: Int,
            referenceId: String )
        </ID>
        <ID>LongParameterList:FormQuestionResponseRepository.kt$FormQuestionResponseRepository$(
            surveyId: Int, sectionId: Int, questionId: Int, optionId: Int, selectedValue: String,
            referenceId: String, didiId: Int, selectedValueIds: List&lt;Int&gt; )
        </ID>
        <ID>LongParameterList:FormQuestionResponseRepository.kt$FormQuestionResponseRepository$(
            surveyId: Int, sectionId: Int, questionId: Int, referenceId: String, didiId: Int,
            optionId: Int )
        </ID>
        <ID>LongParameterList:FormQuestionSummaryScreen.kt$( modifier: Modifier = Modifier,
            formResponseSummaryScreenViewModel: FormResponseSummaryScreenViewModel, navController:
            NavController, surveyId: Int, sectionId: Int, questionId: Int, surveyeeId: Int, )
        </ID>
        <ID>LongParameterList:FormResponseCard.kt$( modifier: Modifier = Modifier,
            formResponseObjectDto: FormResponseObjectDto, optionItemListWithConditionals: List&lt;OptionItemEntity&gt;,
            viewModel: BaseViewModel, isPictureRequired: Boolean = true, onDelete: (referenceId:
            String) -&gt; Unit, onUpdate: (referenceId: String) -&gt; Unit )
        </ID>
        <ID>LongParameterList:FormTypeQuestionComponent.kt$( modifier: Modifier = Modifier,
            questionIndex: Int, question: QuestionEntity?, showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(), maxCustomHeight: Dp, contests: List&lt;ContentEntity?&gt;?
            = listOf(), itemCount: Int = 0, summaryValue: String = BLANK_STRING, isEditAllowed:
            Boolean = true, onAnswerSelection: (questionIndex: Int) -&gt; Unit,
            onMediaTypeDescriptionAction: (descriptionContentType: DescriptionContentType,
            contentLink: String) -&gt; Unit, questionDetailExpanded: (index: Int) -&gt; Unit,
            onViewSummaryClicked: (questionId: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:FormTypeQuestionScreen.kt$( navController: NavHostController,
            viewModel: QuestionTypeScreenViewModel = hiltViewModel(), surveyID: Int = 0, sectionId:
            Int = 0, questionId: Int = 0, surveyeeId: Int, referenceId: String = BLANK_STRING )
        </ID>
        <ID>LongParameterList:FormWithNoneTypeQuestionComponent.kt$( modifier: Modifier = Modifier,
            questionIndex: Int, question: QuestionEntity?, showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(), noneOptionValue: FormQuestionResponseEntity?
            = null, maxCustomHeight: Dp, contests: List&lt;ContentEntity?&gt;? = listOf(),
            itemCount: Int = 0, summaryValue: String = BLANK_STRING, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int, isNoneMarkedForForm: Boolean, isFormOpened:
            Boolean) -&gt; Unit, onMediaTypeDescriptionAction: (descriptionContentType:
            DescriptionContentType, contentLink: String) -&gt; Unit, questionDetailExpanded: (index:
            Int) -&gt; Unit, onViewSummaryClicked: (questionId: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:GetFormQuestionResponseUseCase.kt$GetFormQuestionResponseUseCase$(
            surveyId: Int, sectionId: Int, questionId: Int, referenceId: String, optionId: Int,
            didiId: Int, )
        </ID>
        <ID>LongParameterList:GetSummaryFileRepository.kt$GetSummaryFileRepository$(
            uniqueUserIdentifier: String, mobileNo: String, fileNameWithoutExtension: String,
            fileNameWithExtension: String, content: List&lt;SummaryFileDto&gt;,
            insertBlankRowForEmptyEntry: Boolean = true )
        </ID>
        <ID>LongParameterList:GridTypeComponent.kt$( modifier: Modifier = Modifier, optionItem:
            OptionItemEntity, index: Int, isEnabled: Boolean = true, selectedIndex: List&lt;Int&gt;,
            onOptionSelected: (Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:GridTypeComponent.kt$( modifier: Modifier = Modifier, question:
            QuestionEntity, showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(), optionItemEntityList: List&lt;OptionItemEntity&gt;,
            areOptionsEnabled: Boolean = true, questionIndex: Int, contests: List&lt;ContentEntity?&gt;?
            = listOf(), selectedOptionIndices: List&lt;Int&gt;, maxCustomHeight: Dp, isEditAllowed:
            Boolean = true, onAnswerSelection: (questionIndex: Int, optionItems: List&lt;OptionItemEntity&gt;,
            selectedIndeciesCount: List&lt;Int&gt;) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:HtmlText.kt$( text: String, modifier: Modifier = Modifier, style:
            TextStyle = TextStyle.Default, softWrap: Boolean = true, overflow: TextOverflow =
            TextOverflow.Clip, maxLines: Int = Int.MAX_VALUE, onTextLayout: (TextLayoutResult) -&gt;
            Unit = {}, linkClicked: ((String) -&gt; Unit)? = null, fontSize: TextUnit = 14.sp,
            flags: Int = HtmlCompat.FROM_HTML_MODE_COMPACT, URLSpanStyle: SpanStyle = SpanStyle(
            color = linkTextColor(), textDecoration = TextDecoration.Underline ), color: Color =
            textColorDark, customSpannedHandler: ((Spanned) -&gt; AnnotatedString)? = null )
        </ID>
        <ID>LongParameterList:ImageUploadRequest.kt$ImageUploadRequest.Companion$( didi:
            SurveyeeEntity, subjectType: String, filePath: String, location: String, userType:
            String, referenceId: String, questionEntity: QuestionEntity?, optionItemEntity:
            OptionItemEntity?, sectionDetails: SectionEntity, questionId: Int, localTaskId: String?
            )
        </ID>
        <ID>LongParameterList:ImageUploadRequest.kt$ImageUploadRequest.Companion$( didi:
            SurveyeeEntity, subjectType: String, filePath: String, location: String, userType:
            String, referenceId: String, sectionDetails: SectionListItem, questionId: Int,
            localTaskId: String )
        </ID>
        <ID>LongParameterList:IncrementDecrementView.kt$( title: String = BLANK_STRING,
            currentValue: String? = "0", isEditAllowed: Boolean = true, isContent: Boolean = false,
            showQuestion: OptionItemEntityState = OptionItemEntityState.getEmptyStateObject(),
            onInfoButtonClicked: () -&gt; Unit, onAnswerSelection: (selectValue: String) -&gt; Unit,
            isRequiredField: Boolean = false, )
        </ID>
        <ID>LongParameterList:InputTypeQuestionAnswerDao.kt$InputTypeQuestionAnswerDao$( userId:
            String, surveyId: Int, sectionId: Int, didiId: Int, questionId: Int, optionId: Int,
            inputValue: String )
        </ID>
        <ID>LongParameterList:InputTypeQuestionAnswerDao.kt$InputTypeQuestionAnswerDao$( userId:
            String, surveyId: Int, sectionId: Int, didiId: Int, questionId: Int, optionItemId: Int )
        </ID>
        <ID>LongParameterList:InputTypeQuestionAnswerDao.kt$InputTypeQuestionAnswerDao$( userId:
            String, surveyId: Int, sectionId: Int, questionId: Int, didiId: Int, optionId: Int )
        </ID>
        <ID>LongParameterList:ListTypeComponent.kt$( modifier: Modifier = Modifier, question:
            QuestionEntity, contests: List&lt;ContentEntity?&gt;? = listOf(), showQuestionState:
            QuestionEntityState = QuestionEntityState.getEmptyStateObject(), optionItemEntityList:
            List&lt;OptionItemEntity&gt;?, questionIndex: Int, selectedOptionIndex: Int = -1,
            maxCustomHeight: Dp, isEditAllowed: Boolean = true, onAnswerSelection: (questionIndex:
            Int, optionItem: OptionItemEntity) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:Media.kt$( state: MediaState, modifier: Modifier = Modifier,
            surfaceType: SurfaceType = SurfaceType.SurfaceView, resizeMode: ResizeMode =
            ResizeMode.Fit, shutterColor: Color = Color.Black, keepContentOnPlayerReset: Boolean =
            false, useArtwork: Boolean = true, defaultArtworkPainter: Painter? = null, subtitles:
            @Composable ((CueGroup) -&gt; Unit)? = null, // TODO showBuffering: ShowBuffering =
            ShowBuffering.Never, buffering: @Composable (() -&gt; Unit)? = null, errorMessage:
            @Composable ((PlaybackException) -&gt; Unit)? = null, overlay: @Composable (() -&gt;
            Unit)? = null, controllerHideOnTouch: Boolean = true, controllerAutoShow: Boolean =
            true, controller: @Composable ((MediaState) -&gt; Unit)? = null )
        </ID>
        <ID>LongParameterList:MiscQuestionBoxComponent.kt$( modifier: Modifier = Modifier,
            questionIndex: Int, question: QuestionEntity, contests: List&lt;ContentEntity?&gt;? =
            listOf(), showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(),
            selectedOptionMapForNumericInputTypeQuestions: Map&lt;Int, InputTypeQuestionAnswerEntity&gt;,
            selectedOption: OptionItemEntity?, maxCustomHeight: Dp, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int, optionItemEntity: OptionItemEntity,
            selectedValue: String, selectedId: Int) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:MissonRowScreen.kt$( modifier: Modifier = Modifier, mission:
            MissionEntity, viewModel: MissionViewModel, pendingCount: Int, missionDueDate: String =
            BLANK_STRING, onViewStatusClick: () -&gt; Unit, onStartClick: () -&gt; Unit )
        </ID>
        <ID>LongParameterList:ModelBottomSheetDescriptionContentComponent.kt$( sheetContent:
            @Composable ColumnScope.() -&gt; Unit, modifier: Modifier = Modifier, sheetState:
            ModalBottomSheetState = rememberModalBottomSheetState(ModalBottomSheetValue.Hidden),
            sheetGesturesEnabled: Boolean = true, sheetShape: Shape = MaterialTheme.shapes.large,
            sheetElevation: Dp = ModalBottomSheetDefaults.Elevation, sheetBackgroundColor: Color =
            MaterialTheme.colors.surface, sheetContentColor: Color =
            contentColorFor(sheetBackgroundColor), scrimColor: Color =
            ModalBottomSheetDefaults.scrimColor, content: @Composable () -&gt; Unit )
        </ID>
        <ID>LongParameterList:MultiSelectDropdown.kt$( items: List&lt;ValuesDto&gt;, selectedItems:
            List&lt;String&gt;, onItemSelected: (String) -&gt; Unit, modifier: Modifier = Modifier,
            isContent: Boolean = false, title: String = stringResource(id = R.string.select), hint:
            String = stringResource(id = R.string.select), dropDownBorder: Color = borderGrey,
            dropDownBackground: Color = white, isRequiredField: Boolean = false, expanded: Boolean =
            false, onExpandedChange: (Boolean) -&gt; Unit, onDismissRequest: () -&gt; Unit,
            onGlobalPositioned: (LayoutCoordinates) -&gt; Unit, mTextFieldSize: Size,
            onInfoButtonClicked: () -&gt; Unit, )
        </ID>
        <ID>LongParameterList:NestedLazyList.kt$( modifier: Modifier = Modifier, outerState:
            LazyListState = rememberLazyListState(), innerState: LazyListState =
            rememberLazyListState(), queLazyState: LazyListState = rememberLazyListState(),
            surveyeeId: Int, navController: NavController, viewModel: BaseViewModel, sectionDetails:
            SectionListItem, sectionInfoButtonClicked: () -&gt; Unit,
            answeredQuestionCountIncreased: (question: QuestionEntityState,
            isQuestionResponseUnanswered: Boolean) -&gt; Unit, )
        </ID>
        <ID>LongParameterList:NestedLazyListForFormQuestions.kt$( modifier: Modifier = Modifier,
            outerState: LazyListState = rememberLazyListState(), innerState: LazyListState =
            rememberLazyListState(), viewModel: BaseViewModel, onSaveFormTypeOption:
            (questionTypeEvent: QuestionTypeEvent) -&gt; Unit, saveCacheFormData:
            (formQuestionResponseEntity: FormQuestionResponseEntity) -&gt; Unit,
            answeredQuestionCountIncreased: () -&gt; Unit, sectionInfoButtonClicked: (contents: List&lt;ContentList&gt;)
            -&gt; Unit, )
        </ID>
        <ID>LongParameterList:OptionItemDao.kt$OptionItemDao$( languageId: Int, optionIds: List&lt;Int&gt;,
            questionId: Int, sectionId: Int, surveyId: Int, userId: String )
        </ID>
        <ID>LongParameterList:OptionItemDao.kt$OptionItemDao$( userId: String, optionId: Int,
            questionId: Int, sectionId: Int, surveyId: Int, languageId: Int )
        </ID>
        <ID>LongParameterList:OptionItemDao.kt$OptionItemDao$( userId: String, sectionId: Int,
            surveyId: Int, questionId: Int, optionId: Int, languageId: Int )
        </ID>
        <ID>LongParameterList:OptionItemDao.kt$OptionItemDao$( userId: String, surveyId: Int,
            sectionId: Int, questionId: Int, optionId: Int, isSelected: Boolean, )
        </ID>
        <ID>LongParameterList:OptionItemDao.kt$OptionItemDao$( userId: String, surveyId: Int,
            sectionId: Int, questionId: Int, optionId: Int, selectValue: String, )
        </ID>
        <ID>LongParameterList:OutlineButtonWithIconComponent.kt$( modifier: Modifier = Modifier,
            buttonTitle: String = "Yes", textColor: Color, iconTintColor: Color,
            buttonBackgroundColor: Color = white, buttonBorderColor: Color = lightGray2, icon:
            Painter? = painterResource(id = R.drawable.icon_check), onClick: () -&gt; Unit )
        </ID>
        <ID>LongParameterList:PrimarySecandaryButtonBoxPreFilled.kt$( modifier: Modifier = Modifier,
            primaryButtonText: String, secandaryButtonRequired: Boolean = true, secandaryButtonText:
            String = "", primaryButtonOnClick: () -&gt; Unit, secandaryButtonOnClick: () -&gt; Unit,
            )
        </ID>
        <ID>LongParameterList:QuestionScreen.kt$( modifier: Modifier = Modifier, navController:
            NavController, viewModel: QuestionScreenViewModel, surveyId: Int, surveyeeId: Int,
            sectionId: Int, nextSectionHandler: (sectionId: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:QuestionScreenRepository.kt$QuestionScreenRepository$( didiId: Int,
            sectionId: Int, questionId: Int, surveyId: Int, optionItems: List&lt;OptionItemEntity&gt;,
            questionType: String, questionSummary: String )
        </ID>
        <ID>LongParameterList:QuestionScreenRepository.kt$QuestionScreenRepository$( surveyId: Int,
            sectionId: Int, questionId: Int, didiId: Int, optionId: Int, inputValue: String )
        </ID>
        <ID>LongParameterList:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$( private
            val prefRepo: PrefRepo, private val apiService: ApiService, private val
            surveyeeEntityDao: SurveyeeEntityDao, private val surveyEntityDao: SurveyEntityDao,
            private val sectionEntityDao: SectionEntityDao, private val questionEntityDao:
            QuestionEntityDao, private val didiSectionProgressEntityDao:
            DidiSectionProgressEntityDao, private val sectionAnswerEntityDao:
            SectionAnswerEntityDao, private val optionItemDao: OptionItemDao, private val
            formQuestionResponseDao: FormQuestionResponseDao, private val
            inputTypeQuestionAnswerDao: InputTypeQuestionAnswerDao, private val contentDao:
            ContentDao )
        </ID>
        <ID>LongParameterList:QuestionScreenViewModel.kt$QuestionScreenViewModel$( surveyId: Int,
            sectionId: Int, didiId: Int, questionId: Int, optionsItem: List&lt;OptionItemEntity&gt;,
            questionEntity: QuestionEntity )
        </ID>
        <ID>LongParameterList:QuestionScreenViewModel.kt$QuestionScreenViewModel$(surveyId: Int,
            sectionId: Int, didiId: Int, questionId: Int, optionId: Int, inputValue: String)
        </ID>
        <ID>LongParameterList:QuestionType.kt$( innerState: LazyGridState, maxCustomHeight: Dp,
            optionItemEntityList: List&lt;OptionItemEntity&gt;?, selectedIndex: Int,
            onAnswerSelection: (questionIndex: Int, optionItem: OptionItemEntity) -&gt; Unit,
            questionIndex: Int, questionType: String, optionDetailVisibilityState: Boolean,
            questionList: MutableList&lt;QuestionList?&gt;, selectedOptionIndex: Int = -1,
            selectedOptionIndices: List&lt;Int&gt; = listOf(), )
        </ID>
        <ID>LongParameterList:QuestionType.kt$( innerState: LazyListState, maxCustomHeight: Dp,
            optionItemEntityList: List&lt;OptionItemEntity&gt;?, selectedOptionIndex: Int = -1,
            questionIndex: Int, questionType: String, questionTitle: String = "" )
        </ID>
        <ID>LongParameterList:QuestionType.kt$( modifier: Modifier = Modifier, parentIndex: Int,
            questionIndex: Int, question: QuestionEntity, optionItemEntityList: List&lt;OptionItemEntity&gt;?,
            selectedOptionIndex: Int = -1, maxCustomHeight: Dp, isLazyVerticalGrid: Boolean = false,
            onAnswerSelection: (questionIndex: Int, optionItem: OptionItemEntity) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit )
        </ID>
        <ID>LongParameterList:RadioOptionTypeComponent.kt$( optionItemEntityState:
            OptionItemEntityState, isMandatory: Boolean = false, isContent: Boolean = false,
            selectedValue: String = BLANK_STRING, onInfoButtonClicked: () -&gt; Unit,
            onOptionSelected: (optionValue: String, optionId: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:RadioQuestionBoxComponent.kt$( modifier: Modifier = Modifier,
            questionIndex: Int, question: QuestionEntity, contests: List&lt;ContentEntity?&gt;? =
            listOf(), showQuestionState: QuestionEntityState =
            QuestionEntityState.getEmptyStateObject(), optionItemEntityList: List&lt;OptionItemEntity&gt;,
            selectedOptionIndex: Int = -1, maxCustomHeight: Dp, isEditAllowed: Boolean = true,
            onAnswerSelection: (questionIndex: Int, optionItem: OptionItemEntity) -&gt; Unit,
            questionDetailExpanded: (index: Int) -&gt; Unit, onMediaTypeDescriptionAction:
            (descriptionContentType: DescriptionContentType, contentLink: String) -&gt; Unit )
        </ID>
        <ID>LongParameterList:SaveSectionAnswerUseCase.kt$SaveSectionAnswerUseCase$( didiId: Int,
            sectionId: Int, questionId: Int, surveyId: Int, optionItems: List&lt;OptionItemEntity&gt;,
            questionType: String, questionSummary: String )
        </ID>
        <ID>LongParameterList:SaveSectionAnswerUseCase.kt$SaveSectionAnswerUseCase$( surveyId: Int,
            sectionId: Int, questionId: Int, didiId: Int, optionId: Int, inputValue: String )
        </ID>
        <ID>LongParameterList:SaveSectionAnswerUseCase.kt$SaveSectionAnswerUseCase$(surveyId: Int,
            sectionId: Int, questionId: Int, didiId: Int, optionId: Int, inputValue: String)
        </ID>
        <ID>LongParameterList:SearchScreen.kt$( modifier: Modifier = Modifier, viewModel:
            SearchScreenViewModel, surveyId: Int, surveyeeId: Int, fromScreen: String =
            ARG_FROM_SECTION_SCREEN, navController: NavController )
        </ID>
        <ID>LongParameterList:SearchWithFilterComponent.kt$( placeholderString: String, modifier:
            Modifier = Modifier, filterSelected: Boolean = false, showFilter: Boolean = true,
            onFilterSelected: (Boolean) -&gt; Unit, onSearchValueChange: (String) -&gt; Unit )
        </ID>
        <ID>LongParameterList:SectionAnswerEntityDao.kt$SectionAnswerEntityDao$( userId: String,
            didiId: Int, sectionId: Int, questionId: Int, surveyId: Int, optionItems: List&lt;OptionItemEntity&gt;,
            questionType: String, questionSummary: String )
        </ID>
        <ID>LongParameterList:SectionListScreenRepositoryImpl.kt$SectionListScreenRepositoryImpl$(
            private val prefRepo: PrefRepo, private val apiService: ApiService, private val
            surveyEntityDao: SurveyEntityDao, private val sectionEntityDao: SectionEntityDao,
            private val questionEntityDao: QuestionEntityDao, private val
            didiSectionProgressEntityDao: DidiSectionProgressEntityDao, private val optionItemDao:
            OptionItemDao, private val surveyeeEntityDao: SurveyeeEntityDao, private val contentDao:
            ContentDao, private val taskDao: ActivityTaskDao )
        </ID>
        <ID>LongParameterList:StepsBox.kt$( modifier: Modifier = Modifier, boxTitle: String,
            subTitle: String, stepNo: Int, index: Int, iconResourceId: Int, isCompleted: Boolean =
            false, backgroundColor:Color?= white, onclick: (Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:SurveyeeCardComponent.kt$( modifier: Modifier = Modifier,
            surveyeeState: SurveyeeCardState, showCheckBox: Boolean, fromScreen: String,
            primaryButtonText: String = stringResource(R.string.start_baseline), checkBoxChecked:
            (surveyeeEntity: SurveyeeEntity, isChecked: Boolean) -&gt; Unit, buttonClicked:
            (buttonName: ButtonName, surveyeeId: Int) -&gt; Unit, moveDidiToThisWeek:
            (surveyeeCardState: SurveyeeCardState, moveToThisWeek: Boolean) -&gt; Unit )
        </ID>
        <ID>LongParameterList:SurveyeeCardWithTolaFilterComponent.kt$( modifier: Modifier =
            Modifier, tolaName: String, surveyeeStateList: List&lt;SurveyeeCardState&gt;,
            showCheckBox: Boolean, fromScreen: String, primaryButtonText: String =
            stringResource(R.string.start_baseline), checkBoxChecked: (surveyeeEntity:
            SurveyeeEntity, isChecked: Boolean) -&gt; Unit, moveDidiToThisWeek: (surveyeeCardState:
            SurveyeeCardState, moveToThisWeek: Boolean) -&gt; Unit, buttonClicked: (buttonName:
            ButtonName, surveyeeId: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:SurveyeeListScreen.kt$( modifier: Modifier = Modifier, navController:
            NavController, viewModel: SurveyeeScreenViewModel, missionId: Int, activityName: String,
            activityDate: String, activityId: Int )
        </ID>
        <ID>LongParameterList:SurveyeeListScreenRepositoryImpl.kt$SurveyeeListScreenRepositoryImpl$(
            private val prefRepo: PrefRepo, private val apiService: ApiService, private val
            surveyeeEntityDao: SurveyeeEntityDao, private val languageListDao: LanguageListDao,
            private val activityTaskDao: ActivityTaskDao, private val activityDao:
            MissionActivityDao, private val taskDao: ActivityTaskDao )
        </ID>
        <ID>LongParameterList:ThisWeekSurveyeeListTab.kt$( paddingValues: PaddingValues,
            loaderState: LoaderState, pullRefreshState: PullRefreshState, viewModel:
            SurveyeeScreenViewModel, navController: NavController, activityId: Int, onActionEvent:
            (surveyeeListScreenActions: SurveyeeListScreenActions) -&gt; Unit, modifier: Modifier =
            Modifier )
        </ID>
        <ID>LongParameterList:TimeBar.kt$( durationMs: Long, positionMs: Long, bufferedPositionMs:
            Long, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding:
            PaddingValues = PaddingValues(0.dp), scrubberCenterAsAnchor: Boolean = false,
            onScrubStart: ((positionMs: Long) -&gt; Unit)? = null, onScrubMove: ((positionMs: Long)
            -&gt; Unit)? = null, onScrubStop: ((positionMs: Long) -&gt; Unit)? = null, progress:
            @Composable (current: Float, scrubbed: Float, buffered: Float) -&gt; Unit = { _,
            scrubbed, buffered -&gt; // by default, use scrubbed progress as played progress
            TimeBarProgress(played = scrubbed, buffered = buffered) }, scrubber: @Composable
            (enable: Boolean, scrubbing: Boolean) -&gt; Unit = { enable, scrubbing -&gt;
            TimeBarScrubber(enable, scrubbing) } )
        </ID>
        <ID>LongParameterList:TimeBar.kt$( enabled: Boolean, scrubbing: Boolean, modifier: Modifier
            = Modifier, enabledSize: Dp = 12.dp, disabledSize: Dp = 0.dp, draggedSize: Dp = 16.dp,
            color: Color = Color(0xFFFFFFFF), shape: Shape = CircleShape )
        </ID>
        <ID>LongParameterList:TimeBar.kt$( played: Float, buffered: Float, modifier: Modifier =
            Modifier, playedColor: Color = Color(0xFFFFFFFF), bufferedColor: Color =
            Color(0xCCFFFFFF), unplayedColor: Color = Color(0x33FFFFFF), )
        </ID>
        <ID>LongParameterList:TimePickerComponent.kt$( isMandatory: Boolean = false, title: String?
            = BLANK_STRING, defaultValue: String = BLANK_STRING, showQuestionState:
            OptionItemEntityState? = OptionItemEntityState.getEmptyStateObject(), isContent: Boolean
            = false, typePicker: String, onInfoButtonClicked: () -&gt; Unit, onAnswerSelection:
            (selectValue: String, selectedValueId: Int) -&gt; Unit, )
        </ID>
        <ID>LongParameterList:ToolbarWithMenuComponent.kt$(title:String, modifier: Modifier,
            navController:NavController?= rememberNavController(), onBackIconClick:()-&gt;Unit,
            onBottomUI: @Composable ()-&gt;Unit, onContentUI: @Composable (PaddingValues)-&gt;Unit)
        </ID>
        <ID>LongParameterList:TypeDropDownComponent.kt$( title: String?, hintText: String =
            "Select", sources: List&lt;ValuesDto&gt;?, isEditAllowed: Boolean = true, isContent:
            Boolean = false, showQuestionState: OptionItemEntityState? =
            OptionItemEntityState.getEmptyStateObject(), selectOptionText: Int = 0,
            onInfoButtonClicked: () -&gt; Unit, onAnswerSelection: (selectValue: Int) -&gt; Unit )
        </ID>
        <ID>LongParameterList:TypeMultiSelectedDropDownComponent.kt$( title: String? = BLANK_STRING,
            hintText: String = "Select", sources: List&lt;ValuesDto&gt;?, isContent: Boolean =
            false, showQuestionState: OptionItemEntityState? =
            OptionItemEntityState.getEmptyStateObject(), selectOptionText: String = BLANK_STRING,
            onInfoButtonClicked: () -&gt; Unit, onAnswerSelection: (selectValue: String) -&gt; Unit,
            )
        </ID>
        <ID>
            LongParameterList:UpdateFormQuestionResponseUseCase.kt$UpdateFormQuestionResponseUseCase$(
            surveyId: Int, sectionId: Int, questionId: Int, optionId: Int, selectedValue: String,
            referenceId: String, didiId: Int, selectedValueId: List&lt;Int&gt; )
        </ID>
        <ID>LongParameterList:Utils.kt$( title: String, message: String, positiveButtonTitle:
            String? = BLANK_STRING, negativeButtonTitle: String? = BLANK_STRING, dismissOnBackPress:
            Boolean? = true, onPositiveButtonClick: () -&gt; Unit, onNegativeButtonClick: () -&gt;
            Unit )
        </ID>
        <ID>LoopWithTooManyJumpStatements:BaselineLogger.kt$LogWriter$for</ID>
        <ID>LoopWithTooManyJumpStatements:ControllerState.kt$ControllerState$while</ID>
        <ID>MagicNumber:AndroidDownloader.kt$AndroidDownloader$100</ID>
        <ID>MagicNumber:AppConstants.kt$1000</ID>
        <ID>MagicNumber:AppConstants.kt$30</ID>
        <ID>MagicNumber:AppConstants.kt$450</ID>
        <ID>MagicNumber:BaseLineStartScreen.kt$10</ID>
        <ID>MagicNumber:BaseLineStartScreen.kt$200</ID>
        <ID>MagicNumber:BaseLineStartViewModel.kt$BaseLineStartViewModel$500</ID>
        <ID>MagicNumber:BaseViewModel.kt$BaseViewModel$6</ID>
        <ID>MagicNumber:BaselineLogger.kt$LogWriter$1024</ID>
        <ID>MagicNumber:BaselineLogger.kt$LogWriter$10L</ID>
        <ID>MagicNumber:BaselineLogger.kt$LogWriter$1234L</ID>
        <ID>MagicNumber:BaselineLogger.kt$LogWriter$20L</ID>
        <ID>MagicNumber:BaselineLogger.kt$LogWriter$256</ID>
        <ID>MagicNumber:BaselineLogger.kt$LogWriter$32</ID>
        <ID>MagicNumber:BaselineLogger.kt$LogWriter$8192</ID>
        <ID>MagicNumber:ButtonUtil.kt$1.25f</ID>
        <ID>MagicNumber:Color.kt$0x33000000</ID>
        <ID>MagicNumber:Color.kt$0x7F271914</ID>
        <ID>MagicNumber:Color.kt$0x80271914</ID>
        <ID>MagicNumber:Color.kt$0xB2B1B1B1</ID>
        <ID>MagicNumber:Color.kt$0xCC271914</ID>
        <ID>MagicNumber:Color.kt$0xCCF7F7F7</ID>
        <ID>MagicNumber:Color.kt$0xFF02B5C6</ID>
        <ID>MagicNumber:Color.kt$0xFF0B9A52</ID>
        <ID>MagicNumber:Color.kt$0xFF0C7960</ID>
        <ID>MagicNumber:Color.kt$0xFF212C4D</ID>
        <ID>MagicNumber:Color.kt$0xFF222E50</ID>
        <ID>MagicNumber:Color.kt$0xFF271424</ID>
        <ID>MagicNumber:Color.kt$0xFF271914</ID>
        <ID>MagicNumber:Color.kt$0xFF325DF6</ID>
        <ID>MagicNumber:Color.kt$0xFF439A86</ID>
        <ID>MagicNumber:Color.kt$0xFF439a86</ID>
        <ID>MagicNumber:Color.kt$0xFF46989A</ID>
        <ID>MagicNumber:Color.kt$0xFF52453d</ID>
        <ID>MagicNumber:Color.kt$0xFF576488</ID>
        <ID>MagicNumber:Color.kt$0xFF60626C</ID>
        <ID>MagicNumber:Color.kt$0xFF625b71</ID>
        <ID>MagicNumber:Color.kt$0xFF6650a4</ID>
        <ID>MagicNumber:Color.kt$0xFF693D30</ID>
        <ID>MagicNumber:Color.kt$0xFF69BFAC</ID>
        <ID>MagicNumber:Color.kt$0xFF707070</ID>
        <ID>MagicNumber:Color.kt$0xFF7C7C7C</ID>
        <ID>MagicNumber:Color.kt$0xFF7D5260</ID>
        <ID>MagicNumber:Color.kt$0xFF7D7572</ID>
        <ID>MagicNumber:Color.kt$0xFF87D3C1</ID>
        <ID>MagicNumber:Color.kt$0xFF888888</ID>
        <ID>MagicNumber:Color.kt$0xFF938c89</ID>
        <ID>MagicNumber:Color.kt$0xFFA3A5AB</ID>
        <ID>MagicNumber:Color.kt$0xFFACACAC</ID>
        <ID>MagicNumber:Color.kt$0xFFB1B1B1</ID>
        <ID>MagicNumber:Color.kt$0xFFB4B4B4</ID>
        <ID>MagicNumber:Color.kt$0xFFB5B6BA</ID>
        <ID>MagicNumber:Color.kt$0xFFBFBFBF</ID>
        <ID>MagicNumber:Color.kt$0xFFC1C1C1</ID>
        <ID>MagicNumber:Color.kt$0xFFC6C6C6</ID>
        <ID>MagicNumber:Color.kt$0xFFCCC2DC</ID>
        <ID>MagicNumber:Color.kt$0xFFD0BCFF</ID>
        <ID>MagicNumber:Color.kt$0xFFD12222</ID>
        <ID>MagicNumber:Color.kt$0xFFD1D5DE</ID>
        <ID>MagicNumber:Color.kt$0xFFD32505</ID>
        <ID>MagicNumber:Color.kt$0xFFD32517</ID>
        <ID>MagicNumber:Color.kt$0xFFD3FFF5</ID>
        <ID>MagicNumber:Color.kt$0xFFD5D5D5</ID>
        <ID>MagicNumber:Color.kt$0xFFD5D8E2</ID>
        <ID>MagicNumber:Color.kt$0xFFD8C7BE</ID>
        <ID>MagicNumber:Color.kt$0xFFDCDCDC</ID>
        <ID>MagicNumber:Color.kt$0xFFDD6541</ID>
        <ID>MagicNumber:Color.kt$0xFFDDDDDD</ID>
        <ID>MagicNumber:Color.kt$0xFFDDFFF7</ID>
        <ID>MagicNumber:Color.kt$0xFFDE0101</ID>
        <ID>MagicNumber:Color.kt$0xFFDEDEDE</ID>
        <ID>MagicNumber:Color.kt$0xFFE08B00</ID>
        <ID>MagicNumber:Color.kt$0xFFE0D9D7</ID>
        <ID>MagicNumber:Color.kt$0xFFE2E2E2</ID>
        <ID>MagicNumber:Color.kt$0xFFE2E9FF</ID>
        <ID>MagicNumber:Color.kt$0xFFE30707</ID>
        <ID>MagicNumber:Color.kt$0xFFE31F06</ID>
        <ID>MagicNumber:Color.kt$0xFFE8E8E8</ID>
        <ID>MagicNumber:Color.kt$0xFFEAEAEA</ID>
        <ID>MagicNumber:Color.kt$0xFFEBEBEB</ID>
        <ID>MagicNumber:Color.kt$0xFFEFB8C8</ID>
        <ID>MagicNumber:Color.kt$0xFFEFF2FC</ID>
        <ID>MagicNumber:Color.kt$0xFFF0665B</ID>
        <ID>MagicNumber:Color.kt$0xFFF0F7FC</ID>
        <ID>MagicNumber:Color.kt$0xFFF2F4F8</ID>
        <ID>MagicNumber:Color.kt$0xFFF4E9E2</ID>
        <ID>MagicNumber:Color.kt$0xFFF4F7FF</ID>
        <ID>MagicNumber:Color.kt$0xFFF4FFFC</ID>
        <ID>MagicNumber:Color.kt$0xFFF7F7F7</ID>
        <ID>MagicNumber:Color.kt$0xFFF8D5D5</ID>
        <ID>MagicNumber:Color.kt$0xFFF8FAFF</ID>
        <ID>MagicNumber:Color.kt$0xFFFAFAFA</ID>
        <ID>MagicNumber:Color.kt$0xFFFCF3E2</ID>
        <ID>MagicNumber:Color.kt$0xFFFCF6F0</ID>
        <ID>MagicNumber:Color.kt$0xFFFCFFFD</ID>
        <ID>MagicNumber:Color.kt$0xFFFDEACB</ID>
        <ID>MagicNumber:Color.kt$0xFFFDEBEB</ID>
        <ID>MagicNumber:Color.kt$0xFFFF0808</ID>
        <ID>MagicNumber:Color.kt$0xFFFFEDED</ID>
        <ID>MagicNumber:Color.kt$0xFFFFF4E3</ID>
        <ID>MagicNumber:Color.kt$0xFFFFF5D2</ID>
        <ID>MagicNumber:Color.kt$0xFFFFFAF0</ID>
        <ID>MagicNumber:Color.kt$0xFFFFFAFE</ID>
        <ID>MagicNumber:Color.kt$0xFFFFFFFF</ID>
        <ID>MagicNumber:Color.kt$0xFFe3051a</ID>
        <ID>MagicNumber:Color.kt$0xFFf1f3f4</ID>
        <ID>MagicNumber:Color.kt$0xc6c5b9</ID>
        <ID>MagicNumber:Color.kt$0xffFFFCFC</ID>
        <ID>MagicNumber:CommonSettingScreen.kt$3</ID>
        <ID>MagicNumber:ConnectionMonitor.kt$ConnectionMonitor.DoesNetworkHaveInternet$1500</ID>
        <ID>MagicNumber:ConnectionMonitor.kt$ConnectionMonitor.DoesNetworkHaveInternet$53</ID>
        <ID>MagicNumber:CustomBannerComponents.kt$1000</ID>
        <ID>MagicNumber:CustomSnackbarViewComponent.kt$0xFF19B661</ID>
        <ID>MagicNumber:CustomSnackbarViewComponent.kt$0xFFE8503A</ID>
        <ID>MagicNumber:CustomSnackbarViewComponent.kt$0xFFEEEEEE</ID>
        <ID>MagicNumber:DataLoadingScreenViewModel.kt$DataLoadingScreenViewModel$7</ID>
        <ID>MagicNumber:Dimens.kt$0.1f</ID>
        <ID>MagicNumber:Dimens.kt$0.2f</ID>
        <ID>MagicNumber:Dimens.kt$0.4f</ID>
        <ID>MagicNumber:Dimens.kt$0.5f</ID>
        <ID>MagicNumber:Dimens.kt$0.6f</ID>
        <ID>MagicNumber:Dimens.kt$0.8f</ID>
        <ID>MagicNumber:Dimens.kt$400</ID>
        <ID>MagicNumber:Dimens.kt$450</ID>
        <ID>MagicNumber:DownloadStatus.kt$DownloadStatus.DOWNLOAD_PAUSED$3</ID>
        <ID>MagicNumber:DropDownWithTitleComponent.kt$.9f</ID>
        <ID>MagicNumber:EditTextWithTitleComponent.kt$.9f</ID>
        <ID>MagicNumber:ErrorInterceptor.kt$ErrorInterceptor$300</ID>
        <ID>MagicNumber:EventWriterHelperImpl.kt$EventWriterHelperImpl$500</ID>
        <ID>MagicNumber:FormTypeQuestionComponent.kt$11</ID>
        <ID>MagicNumber:FormTypeQuestionComponent.kt$111</ID>
        <ID>MagicNumber:FormTypeQuestionComponent.kt$12</ID>
        <ID>MagicNumber:FormTypeQuestionComponent.kt$8</ID>
        <ID>MagicNumber:FormTypeQuestionComponent.kt$9</ID>
        <ID>MagicNumber:FormTypeQuestionScreen.kt$100</ID>
        <ID>MagicNumber:GetExportOptionListUseCase.kt$GetExportOptionListUseCase$3</ID>
        <ID>MagicNumber:GetExportOptionListUseCase.kt$GetExportOptionListUseCase$4</ID>
        <ID>MagicNumber:GetExportOptionListUseCase.kt$GetExportOptionListUseCase$5</ID>
        <ID>MagicNumber:GetExportOptionListUseCase.kt$GetExportOptionListUseCase$6</ID>
        <ID>MagicNumber:GetExportOptionListUseCase.kt$GetExportOptionListUseCase$7</ID>
        <ID>MagicNumber:GetExportOptionListUseCase.kt$GetExportOptionListUseCase$8</ID>
        <ID>MagicNumber:GridTypeComponent.kt$100</ID>
        <ID>MagicNumber:GridTypeComponent.kt$5</ID>
        <ID>MagicNumber:IncrementDecrementView.kt$.9f</ID>
        <ID>MagicNumber:ListTypeComponent.kt$5</ID>
        <ID>MagicNumber:LocationUtil.kt$LocationUtil$3</ID>
        <ID>MagicNumber:LocationUtil.kt$LocationUtil$30</ID>
        <ID>MagicNumber:MediaState.kt$MediaState$0.01f</ID>
        <ID>MagicNumber:MiscQuestionBoxComponent.kt$100</ID>
        <ID>MagicNumber:MissionSummaryScreenRepositoryImpl.kt$MissionSummaryScreenRepositoryImpl$8
        </ID>
        <ID>MagicNumber:MissionSummaryViewModel.kt$MissionSummaryViewModel$200</ID>
        <ID>MagicNumber:MissionViewModel.kt$MissionViewModel$200</ID>
        <ID>MagicNumber:MultiSelectDropdown.kt$.9f</ID>
        <ID>MagicNumber:NestedLazyList.kt$10</ID>
        <ID>MagicNumber:NestedLazyList.kt$3</ID>
        <ID>MagicNumber:NetworkModule.kt$NetworkModule$10</ID>
        <ID>MagicNumber:NetworkModule.kt$NetworkModule$1024</ID>
        <ID>MagicNumber:NetworkModule.kt$NetworkModule.&lt;no name provided&gt;$60</ID>
        <ID>MagicNumber:OtpVerificationScreenComponent.kt$8</ID>
        <ID>MagicNumber:OtpVerificationScreenComponent.kt$&lt;no name provided&gt;$1000</ID>
        <ID>MagicNumber:OtpView.kt$50</ID>
        <ID>MagicNumber:OtpView.kt$6</ID>
        <ID>MagicNumber:Player.kt$23</ID>
        <ID>MagicNumber:QuestionScreenViewModel.kt$QuestionScreenViewModel$300</ID>
        <ID>MagicNumber:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$100</ID>
        <ID>MagicNumber:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$500</ID>
        <ID>MagicNumber:RadioOptionTypeComponent.kt$.9f</ID>
        <ID>MagicNumber:SectionListScreen.kt$100</ID>
        <ID>MagicNumber:SectionListScreenViewModel.kt$SectionListScreenViewModel$200</ID>
        <ID>MagicNumber:SectionStatus.kt$SectionStatus.Companion$3</ID>
        <ID>MagicNumber:SettingBSScreen.kt$3</ID>
        <ID>MagicNumber:SettingBSScreen.kt$5</ID>
        <ID>MagicNumber:SimpleController.kt$0x98000000</ID>
        <ID>MagicNumber:SimpleController.kt$200</ID>
        <ID>MagicNumber:SimpleController.kt$3000</ID>
        <ID>MagicNumber:SplashScreenViewModel.kt$SplashScreenViewModel$200</ID>
        <ID>MagicNumber:StepCompletionScreen.kt$0.3</ID>
        <ID>MagicNumber:StepCompletionScreen.kt$0.5</ID>
        <ID>MagicNumber:StepCompletionScreen.kt$0xb48def</ID>
        <ID>MagicNumber:StepCompletionScreen.kt$0xf4306d</ID>
        <ID>MagicNumber:StepCompletionScreen.kt$0xfce18a</ID>
        <ID>MagicNumber:StepCompletionScreen.kt$0xff726d</ID>
        <ID>MagicNumber:StepCompletionScreen.kt$80</ID>
        <ID>MagicNumber:StepsBox.kt$6</ID>
        <ID>MagicNumber:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$200</ID>
        <ID>MagicNumber:SwitchComponent.kt$0.3f</ID>
        <ID>MagicNumber:SwitchComponent.kt$0.7F</ID>
        <ID>MagicNumber:TimeBar.kt$0x33FFFFFF</ID>
        <ID>MagicNumber:TimeBar.kt$0xCCFFFFFF</ID>
        <ID>MagicNumber:TimeBar.kt$0xFFFFFFFF</ID>
        <ID>MagicNumber:TimePickerComponent.kt$11</ID>
        <ID>MagicNumber:VideoPlayer.kt$0x80808080</ID>
        <ID>MagicNumber:VideoPlayer.kt$16f</ID>
        <ID>MagicNumber:VideoPlayer.kt$9f</ID>
        <ID>MagicNumber:keyboardAsState.kt$0.15</ID>
        <ID>MatchingDeclarationName:CasteListRespositoryImpl.kt$CasteListRepositoryImpl :
            CasteListRepository
        </ID>
        <ID>MatchingDeclarationName:EventWriterRepository.kt$EventsWriterRepository</ID>
        <ID>MatchingDeclarationName:SettingEnum.kt$SettingTagEnum</ID>
        <ID>MatchingDeclarationName:keyboardAsState.kt$KeyboardStatus</ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("SELECT * FROM $TASK_TABLE_NAME
            where userId=:userId and activityId=:activityId AND missionId = :missionId and taskId =
            :taskId")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("SELECT * FROM $TASK_TABLE_NAME
            where userId=:userId and missionId=:missionId and activityId = :activityId and
            isActive=1")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("SELECT COUNT(*) from
            $TASK_TABLE_NAME where userId=:userId and activityId = :activityId AND status NOT in
            (:status) and isActive=1")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("SELECT COUNT(*) from
            $TASK_TABLE_NAME where userId=:userId and missionId = :missionId AND status != :status
            and isActive=1")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("SELECT COUNT(*) from
            $TASK_TABLE_NAME where userId=:userId and missionId = :missionId and
            activityId=:activityId and isActive=1")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("SELECT status as summaryKey,
            count(*) as summaryCount from $TASK_TABLE_NAME where userId = :userId and missionId =
            :missionId and activityId = :activityId and isActive = 1 group by status")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("Select * FROM $TASK_TABLE_NAME
            where userId=:userId and isActive=1 and missionId in(:missionId) and activityName
            in(:activityName)")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("UPDATE $TASK_TABLE_NAME SET
            actualCompletedDate = :actualCompletedDate where userId=:userId and taskId = :taskId")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("UPDATE $TASK_TABLE_NAME set
            isActive = 0 where userId=:userId and activityId=:activityId and missionId = :missionId
            ")
        </ID>
        <ID>MaxLineLength:ActivityTaskDao.kt$ActivityTaskDao$@Query("UPDATE $TASK_TABLE_NAME set
            status = :status where userId=:userId and taskId = :taskId AND activityId = :activityId
            AND missionId = :missionId")
        </ID>
        <ID>MaxLineLength:AllSurveyeeListTab.kt$(</ID>
        <ID>MaxLineLength:AllSurveyeeListTab.kt$/*.coerceIn(0.0F, 1.0F)*/</ID>
        <ID>MaxLineLength:AllSurveyeeListTab.kt$if</ID>
        <ID>MaxLineLength:AllSurveyeeListTab.kt$isFilterApplied =
            viewModel.isFilterAppliedState.value.isFilterApplied
        </ID>
        <ID>MaxLineLength:AndroidDownloader.kt$AndroidDownloader$.</ID>
        <ID>MaxLineLength:AndroidDownloader.kt$AndroidDownloader$/* override fun
            downloadFile(videoItem: TrainingVideoEntity, fileType: FileType): Long { val request =
            DownloadManager.Request(videoItem.url.toUri()) .setTitle("Training Videos")
            .setDescription("Downloading") .setMimeType(if (fileType == FileType.VIDEO) "video/mp4"
            else if (fileType == FileType.IMAGE) "image/jpeg" else "application/pdf")
            .setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI or
            DownloadManager.Request.NETWORK_MOBILE)
            .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
            .setDestinationInExternalFilesDir(context, Environment.DIRECTORY_MOVIES,
            "${videoItem.id}.mp4") return downloadManager.enqueue(request) } */
        </ID>
        <ID>
            MaxLineLength:AndroidDownloader.kt$AndroidDownloader$/*BaselineLogger.d("AndroidDownloader",
            "checkDownloadStatus -&gt; downloadId: $downloadId, id: $id, status: $status, ")*/
        </ID>
        <ID>
            MaxLineLength:AndroidDownloader.kt$AndroidDownloader$BaselineLogger.d("AndroidDownloader",
            "checkDownloadStatus -&gt; onDownloadComplete = downloadId: $downloadId, id: $id,
            status: $status, ")
        </ID>
        <ID>
            MaxLineLength:AndroidDownloader.kt$AndroidDownloader$BaselineLogger.d("AndroidDownloader",
            "checkDownloadStatus -&gt; onDownloadFailed = downloadId: $downloadId, id: $id, status:
            $status, ")
        </ID>
        <ID>
            MaxLineLength:AndroidDownloader.kt$AndroidDownloader$cursor.getLong(cursor.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR))
        </ID>
        <ID>MaxLineLength:ApiService.kt$ApiService$// suspend fun getSurveyFromNetwork(@Body
            surveyRequestBodyModel: SurveyRequestBodyModel): ApiResponseModel&lt;List&lt;SurveyResponseModel&gt;&gt;
        </ID>
        <ID>MaxLineLength:ApiService.kt$ApiService$suspend</ID>
        <ID>MaxLineLength:BaseLineQnToCSV.kt$// You need to replace 'id' with the actual property
            from ValuesDto that should match optionItem.optionId.
        </ID>
        <ID>MaxLineLength:BaseLineQnToCSV.kt$section = sectionList.find { sectionEntity -&gt;
            sectionEntity.surveyId == it.surveyId &amp;&amp; sectionEntity.sectionId == it.sectionId
            }?.sectionName
        </ID>
        <ID>MaxLineLength:BaseLineStartScreen.kt$(baseLineStartViewModel.photoUri.value !=
            Uri.EMPTY) &amp;&amp; (baseLineStartViewModel.isVoterCard.value != -1) &amp;&amp;
            (baseLineStartViewModel.phoneNumber.value.length == 10)
        </ID>
        <ID>MaxLineLength:BaseLineStartScreen.kt$// (baseLineStartViewModel.photoUri.value !=
            Uri.EMPTY) &amp;&amp; (baseLineStartViewModel.isVoterCard.value != -1) &amp;&amp;
            (baseLineStartViewModel.phoneNumber.value.length == 10) &amp;&amp;
            (baseLineStartViewModel.isAdharCard.value != -1)
        </ID>
        <ID>
            MaxLineLength:BaseLineStartScreen.kt$baseLineStartViewModel.adharCardState.value.copy(showQuestion
            = baseLineStartViewModel.isAdharTxtVisible.value)
        </ID>
        <ID>MaxLineLength:BaseLineStartScreen.kt$title</ID>
        <ID>MaxLineLength:BaseLineStartViewModel.kt$BaseLineStartViewModel$"saveFilePathInDb -&gt;
            didiDao.saveLocalImagePath before = didiId: ${didiEntity.id}, finalPathWithCoordinates:
            $finalPathWithCoordinates"
        </ID>
        <ID>MaxLineLength:BaseLineStartViewModel.kt$BaseLineStartViewModel$referenceOptionList</ID>
        <ID>MaxLineLength:BaseRepository.kt$BaseRepository$/*open fun onCatchError(e:Exception, api:
            ApiType) { NudgeLogger.d("BaseViewModel", "onCatchError: message: ${e.message}, api:
            ${api.name}") AnalyticsHelper.logServiceFailedEvent(exception = e, apiType = api) when
            (e) { is HttpException -&gt; { NudgeLogger.d("BaseViewModel", "onCatchError code:
            ${e.response()?.code() ?: 0}, api: ${api.name}") when (e.response()?.code() ?: 0) {
            RESPONSE_CODE_UNAUTHORIZED -&gt; { if(!RetryHelper.tokenExpired.value &amp;&amp; api !=
            ApiType.LOGOUT_API) { RetryHelper.tokenExpired.value = true }
            onServerError(ErrorModel(e.response()?.code() ?: 0, UNAUTHORISED_MESSAGE)) }
            RESPONSE_CODE_CONFLICT -&gt; { if(!RetryHelper.tokenExpired.value &amp;&amp; api !=
            ApiType.LOGOUT_API) { RetryHelper.tokenExpired.value = true }
            onServerError(ErrorModel(e.response()?.code() ?: 0, message = e.response()?.message()))
            } RESPONSE_CODE_NOT_FOUND -&gt; onServerError( ErrorModelWithApi(apiName = api, message
            = UNREACHABLE_ERROR_MSG, statusCode = e.response()?.code() ?: -1) )
            RESPONSE_CODE_DEACTIVATED, RESPONSE_CODE_500, RESPONSE_CODE_BAD_GATEWAY,
            RESPONSE_CODE_SERVICE_TEMPORARY_UNAVAILABLE -&gt;
            onServerError(ErrorModelWithApi(apiName = api, statusCode = e.response()?.code() ?: -1,
            message = e.response()?.message())) else -&gt; onServerError( ErrorModelWithApi(apiName
            = api, statusCode = e.response()?.code() ?: -1, message = e.message?: COMMON_ERROR_MSG )
            ) } } is SocketTimeoutException -&gt; { onServerError(ErrorModelWithApi(apiName = api,
            statusCode = RESPONSE_CODE_TIMEOUT,message = TIMEOUT_ERROR_MSG)) } is IOException -&gt;
            { onServerError(ErrorModelWithApi(apiName = api, statusCode =
            RESPONSE_CODE_NETWORK_ERROR)) } is JsonSyntaxException -&gt;{
            onServerError(ErrorModelWithApi(-1, apiName = api, e.message, statusCode =
            RESPONSE_CODE_NO_DATA)) } is ApiResponseFailException -&gt; {
            onServerError(ErrorModelWithApi(code = -1, apiName = api, e.message)) } else -&gt;
            onServerError(ErrorModelWithApi(-1, apiName = api, e.message)) } }*/
        </ID>
        <ID>MaxLineLength:BaseRepository.kt$BaseRepository$onServerError(ErrorModel(statusCode =
            e.response()?.code() ?: -1, message = e.response()?.message()))
        </ID>
        <ID>MaxLineLength:BaselineApplication.kt$BaselineApplication.Companion$fun</ID>
        <ID>MaxLineLength:BaselineCore.kt$BaselineCore$BaselineLogger.d("VillageSelectorViewModel",
            "downloadAuthorizedImageItem -&gt; onDownloadFailed")
        </ID>
        <ID>MaxLineLength:BaselineCore.kt$BaselineCore$BaselineLogger.e("VillageSelectorViewModel",
            "downloadAuthorizedImageItem -&gt; downloadItem exception", ex)
        </ID>
        <ID>MaxLineLength:BaselineLogger.kt$BaselineLogger$return if (ex != null) "
            ${ex.javaClass.simpleName}${if (ex.message != null) ": \"${ex.message}\"" else ""}" else
            ""
        </ID>
        <ID>MaxLineLength:BaselineLogger.kt$LogWriter$(bytesOfLogFiles &gt; SUPPORT_LOG_SIZE_MAX
            &amp;&amp; !TextUtils.equals(syslogFile?.name, logFile.name))
        </ID>
        <ID>MaxLineLength:BaselineLogger.kt$LogWriter$)</ID>
        <ID>MaxLineLength:BaselineLogger.kt$LogWriter$//delete oldest files where the newer files
            total &gt; SUPPORT_LOG_SIZE_MAX, except for the current file
        </ID>
        <ID>MaxLineLength:BaselineLogger.kt$LogWriter$BaselineLogger.d(TAG, "Logs on Disk:
            ${formatShortFileSize(context, bytesOfLogFiles - removedBytes)} Cleanup Removed:
            ${formatShortFileSize(context, removedBytes)}")
        </ID>
        <ID>MaxLineLength:BaselineLogger.kt$LogWriter$if</ID>
        <ID>MaxLineLength:BaselineLogger.kt$LogWriter$if (DEBUG) BaselineLogger.d(TAG, "Deleted
            logfile ${logFile.name} of size ${formatShortFileSize(context, length)}")
        </ID>
        <ID>MaxLineLength:BaselineLogger.kt$LogWriter$private</ID>
        <ID>MaxLineLength:BaselineLogger.kt$LogWriter$val bytes =
            "${syslogMessageTimeStampFormat.format(packet.timestamp)} ${packet.tag}
            ${packet.message}\n".toByteArray()
        </ID>
        <ID>MaxLineLength:CommonProfileScreen.kt$CommonProfileScreen(title = "Profile", userName =
            "Naren", userEmail = "anas.mansoori@tothenew.com", userMobile = "7619983037",
            userIdentity = "78456",onBackClick = {})
        </ID>
        <ID>MaxLineLength:CommonSettingScreen.kt$CommonSettingScreen(title = "Setting", versionText
            = "Version 978", list ,onBackClick = {}, onItemClick = {index,item-&gt;},isScreenHaveLogoutButton
            = true, onLogoutClick = {})
        </ID>
        <ID>MaxLineLength:ComplexSearchComponent.kt$Row</ID>
        <ID>MaxLineLength:CurlLoggingInterceptor.kt$CurlLoggingInterceptor$"&lt;--
            ${response.code}${if (response.message.isEmpty()) "" else ' ' + response.message}
            ${response.request.url} (${tookMs}ms)"
        </ID>
        <ID>MaxLineLength:CustomBannerComponents.kt$Text(text =
            "${surveyeeEntity?.didiName ?: BLANK_STRING} moved to this week", color =
            bannerTextGreen, style = smallTextStyle)
        </ID>
        <ID>MaxLineLength:CustomBannerComponents.kt$Text(text = "${surveyeeIdList.size} didis moved
            to this week", color = bannerTextGreen, style = smallTextStyle)
        </ID>
        <ID>MaxLineLength:CustomSnackbarViewComponent.kt$fun</ID>
        <ID>MaxLineLength:DataLoadingScreenRepository.kt$DataLoadingScreenRepository$suspend fun
            fetchContentsFromServer(contentMangerRequest: ContentMangerRequest): ApiResponseModel&lt;List&lt;ContentResponse&gt;&gt;
        </ID>
        <ID>MaxLineLength:DataLoadingScreenRepository.kt$DataLoadingScreenRepository$suspend fun
            fetchSurveyFromNetwork(surveyRequestBodyModel: SurveyRequestBodyModel): ApiResponseModel&lt;SurveyResponseModel&gt;
        </ID>
        <ID>MaxLineLength:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$if</ID>
        <ID>
            MaxLineLength:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$override
            suspend
        </ID>
        <ID>
            MaxLineLength:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$private
        </ID>
        <ID>MaxLineLength:DataLoadingScreenViewModel.kt$DataLoadingScreenViewModel$"Network
            Transaction end with fetchSectionStatusData and fetchSurveyAnswerData "
        </ID>
        <ID>MaxLineLength:DescriptionContentComponent.kt$textStyle</ID>
        <ID>MaxLineLength:DescriptionContentState.kt$DescriptionContentState$// val
            imageTypeDescriptionContent: String =
            "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/images/ForBiggerJoyrides.jpg",
        </ID>
        <ID>MaxLineLength:DescriptionContentState.kt$DescriptionContentState$// val
            videoTypeDescriptionContent: String =
            "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"
        </ID>
        <ID>MaxLineLength:DescriptionContentState.kt$DescriptionContentState$//val
            subTextTypeDescriptionContent: String = "Please check if the family is getting ration
            through the public distribution system (PDS) of the government or not? Please check the
            granary/ where they store their grain and also check with neighbors also to understand
            the food security of the family",
        </ID>
        <ID>
            MaxLineLength:DidiSectionProgressEntityDao.kt$DidiSectionProgressEntityDao$@Query("Select
            * from $DIDI_SECTION_PROGRESS_TABLE where userId=:userId and surveyId = :surveyId and
            didiId = :didiId")
        </ID>
        <ID>
            MaxLineLength:DidiSectionProgressEntityDao.kt$DidiSectionProgressEntityDao$@Query("Select
            * from $DIDI_SECTION_PROGRESS_TABLE where userId=:userId and surveyId = :surveyId and
            sectionId = :sectionId and didiId = :didiId")
        </ID>
        <ID>
            MaxLineLength:DidiSectionProgressEntityDao.kt$DidiSectionProgressEntityDao$@Query("Update
            $DIDI_SECTION_PROGRESS_TABLE set sectionStatus = :sectionStatus where userId=:userId and
            surveyId = :surveyId and sectionId = :sectionId and didiId = :didiId")
        </ID>
        <ID>MaxLineLength:EventWriterHelperImpl.kt$EventWriterHelperImpl$if</ID>
        <ID>
            MaxLineLength:EventWriterHelperImpl.kt$EventWriterHelperImpl$repositoryImpl.saveEventToMultipleSources(event
            = it, eventDependencies = listOf(), eventType = EventType.STATEFUL)
        </ID>
        <ID>
            MaxLineLength:EventWriterHelperImpl.kt$EventWriterHelperImpl$saveAnswerEventOptionItemDtoList
        </ID>
        <ID>
            MaxLineLength:ExportImportRepositoryImpl.kt$ExportImportRepositoryImpl$nudgeBaselineDatabase.didiSectionProgressEntityDao().deleteAllSectionProgress(prefRepo.getUniqueUserIdentifier())
        </ID>
        <ID>
            MaxLineLength:ExportImportRepositoryImpl.kt$ExportImportRepositoryImpl$nudgeBaselineDatabase.inputTypeQuestionAnswerDao().deleteAllInputTypeAnswers(prefRepo.getUniqueUserIdentifier())
        </ID>
        <ID>
            MaxLineLength:ExportImportViewModel.kt$ExportImportViewModel$BaselineLogger.e("ExportImportViewModel",
            "Exception CSV SAVE ANSWER FORM generate: ${e.message} ---------------", e)
        </ID>
        <ID>
            MaxLineLength:ExportImportViewModel.kt$ExportImportViewModel$BaselineLogger.e("ExportImportViewModel",
            "Exception CSV SAVE ANSWER generate: ${e.message} ---------------", e)
        </ID>
        <ID>
            MaxLineLength:ExportImportViewModel.kt$ExportImportViewModel$BaselineLogger.e("ExportImportViewModel",
            "Exception CSV generate work: ${exception.message} ---------------", exception)
        </ID>
        <ID>
            MaxLineLength:ExportImportViewModel.kt$ExportImportViewModel$baseLineQnATableCSV.addAll(dtoList.toCSVSave(sectionList,
            surveeList, optionItemDao, questionEntityDao, prefRepo.getUniqueUserIdentifier()))
        </ID>
        <ID>
            MaxLineLength:ExportImportViewModel.kt$ExportImportViewModel$baseLineQnATableCSV.addAll(dtoSaveFormList.toCsv(sectionList,
            surveeList, optionItemDao, questionEntityDao, prefRepo.getUniqueUserIdentifier()))
        </ID>
        <ID>MaxLineLength:ExportImportViewModel.kt$ExportImportViewModel$else</ID>
        <ID>
            MaxLineLength:ExportImportViewModel.kt$ExportImportViewModel$withContext(Dispatchers.Main)
            {showCustomToast(context, context.getString(R.string.no_data_available_at_the_moment))}
        </ID>
        <ID>
            MaxLineLength:FetchSurveyeeListFromNetworkUseCase.kt$FetchSurveyeeListFromNetworkUseCase$if
        </ID>
        <ID>MaxLineLength:FinalStepCompletionScreen.kt$"composition: $composition,
            composition?.duration: ${composition?.duration}, composition?.startFrame:
            ${composition?.startFrame} composition?.endFrame: ${composition?.endFrame}"
        </ID>
        <ID>
            MaxLineLength:FormCardMatching.kt$FormCardMatching.Companion$"alternative.contains(display,
            true): ${alternative.contains(display ?: BLANK_STRING, true)}"
        </ID>
        <ID>MaxLineLength:FormCardMatching.kt$FormCardMatching.Companion$/*fun
            getStringToCompare(display: String?, matchingKey: FormCardMatching, matchEqual: Boolean
            = false): String { values().forEach { it.alternatives.forEach { alternative -&gt; if
            (matchEqual) { if (display.equals(alternative, true) &amp;&amp;
            matchingKey.alternatives.contains(alternative)) return alternative } else { Log.d("TAG",
            "getStringToCompare: " + "display: $display, alternative: $alternative,
            matchingKey.title: ${matchingKey.title}") if (display?.contains(alternative, true) ==
            true &amp;&amp; matchingKey.alternatives.contains(alternative)) { Log.d("TAG",
            "getStringToCompare: " + "display?.contains(alternative, true) == true:
            ${ display?.contains( alternative, true ) == true } &amp;&amp;
            matchingKey.alternatives.contains(alternative):
            ${matchingKey.alternatives.contains(alternative)}") return alternative } } } } return
            BLANK_STRING }*/
        </ID>
        <ID>MaxLineLength:FormQuestionResponseDao.kt$FormQuestionResponseDao$@Query("DELETE from
            $FORM_QUESTION_RESPONSE_TABLE where userId=:userId and optionId = :optionId AND
            questionId = :questionId AND sectionId = :sectionId AND surveyId = :surveyId AND didiId
            = :surveyeeId AND referenceId = :referenceId")
        </ID>
        <ID>MaxLineLength:FormQuestionResponseDao.kt$FormQuestionResponseDao$@Query("SELECT * from
            $FORM_QUESTION_RESPONSE_TABLE where userId = :userId AND surveyId=:surveyId AND
            sectionId=:sectionId AND questionId = :questionId and didiId = :didiId")
        </ID>
        <ID>MaxLineLength:FormQuestionResponseDao.kt$FormQuestionResponseDao$@Query("SELECT * from
            $FORM_QUESTION_RESPONSE_TABLE where userId=:userId and surveyId = :surveyId and
            sectionId = :sectionId and didiId = :didiId")
        </ID>
        <ID>MaxLineLength:FormQuestionResponseDao.kt$FormQuestionResponseDao$@Query("SELECT * from
            $FORM_QUESTION_RESPONSE_TABLE where userId=:userId and surveyId=:surveyId AND
            sectionId=:sectionId AND didiId = :didiId")
        </ID>
        <ID>MaxLineLength:FormQuestionResponseDao.kt$FormQuestionResponseDao$@Query("SELECT * from
            $FORM_QUESTION_RESPONSE_TABLE where userId=:userId and surveyId=:surveyId AND
            sectionId=:sectionId AND questionId = :questionId AND referenceId = :referenceId AND
            didiId = :didiId and optionId = :optionId")
        </ID>
        <ID>MaxLineLength:FormQuestionResponseDao.kt$FormQuestionResponseDao$@Query("SELECT * from
            $FORM_QUESTION_RESPONSE_TABLE where userId=:userId and surveyId=:surveyId AND
            sectionId=:sectionId AND questionId = :questionId and didiId = :didiId")
        </ID>
        <ID>MaxLineLength:FormQuestionResponseDao.kt$FormQuestionResponseDao$@Query("SELECT COUNT(*)
            from $FORM_QUESTION_RESPONSE_TABLE where userId=:userId and surveyId=:surveyId AND
            sectionId=:sectionId AND questionId = :questionId AND referenceId = :referenceId AND
            didiId = :didiId and optionId = :optionId")
        </ID>
        <ID>MaxLineLength:FormQuestionResponseDao.kt$FormQuestionResponseDao$@Query("Update
            $FORM_QUESTION_RESPONSE_TABLE set selectedValue = :selectedValue, selectedValueId
            =:selectedValueIds where userId=:userId and didiId = :didiId AND surveyId=:surveyId AND
            sectionId=:sectionId AND questionId = :questionId AND optionId = :optionId AND
            referenceId = :referenceId")
        </ID>
        <ID>MaxLineLength:FormQuestionSummaryScreen.kt$itemsIndexed</ID>
        <ID>MaxLineLength:FormResponseCard.kt$/*TextButton(onClick = {
            onDelete(formResponseObjectDto.referenceId) }, modifier = Modifier .fillMaxWidth()
            .weight(1f), colors = ButtonDefaults.buttonColors(containerColor = Color.White,
            contentColor = blueDark) ) { Icon(imageVector = Icons.Outlined.Delete,
            contentDescription = "Delete Button", tint = blueDark) }*/
        </ID>
        <ID>
            MaxLineLength:FormResponseCard.kt$append("${stringResource(R.string.influence_type_comparision_and_label)}:
            $influenceType")
        </ID>
        <ID>
            MaxLineLength:FormResponseSummaryScreenViewModel.kt$FormResponseSummaryScreenViewModel$_formResponseObjectDtoList.value
        </ID>
        <ID>
            MaxLineLength:FormResponseSummaryScreenViewModel.kt$FormResponseSummaryScreenViewModel$saveAnswerEventOptionItemDtoList
        </ID>
        <ID>MaxLineLength:FormTypeQuestionScreen.kt$/*referenceId.isNotBlank() ||
            */(viewModel.answeredOptionCount.intValue &gt;= viewModel.totalOptionSize.intValue)
        </ID>
        <ID>MaxLineLength:FormTypeQuestionScreen.kt$if</ID>
        <ID>
            MaxLineLength:FormWithNoneTypeQuestionComponent.kt$append(stringResource(R.string.total_annual_income_label))
        </ID>
        <ID>MaxLineLength:FormWithNoneTypeQuestionComponent.kt$if</ID>
        <ID>MaxLineLength:FormWithNoneTypeQuestionComponent.kt$optionType =
            showQuestionState.optionItemEntityState.find { it.optionItemEntity?.optionType ==
            QuestionType.FormWithNone.name }?.optionItemEntity?.optionType
        </ID>
        <ID>
            MaxLineLength:FormWithNoneTypeQuestionComponent.kt$showQuestionState.optionItemEntityState.find
            { it.optionItemEntity?.optionType == QuestionType.FormWithNone.name
            }?.optionItemEntity?.values
        </ID>
        <ID>MaxLineLength:FormWithNoneTypeQuestionComponent.kt$text =
            "${showQuestionState.optionItemEntityState.find { it.optionItemEntity?.optionType == QuestionType.FormWithNone.name }?.optionItemEntity?.display}"
        </ID>
        <ID>MaxLineLength:GetSectionUseCase.kt$GetSectionUseCase$suspend</ID>
        <ID>MaxLineLength:GridTypeComponent.kt$"GridOptionCard onOptionSelected exception -&gt;
            ${ex.localizedMessage}"
        </ID>
        <ID>MaxLineLength:GridTypeComponent.kt$?.</ID>
        <ID>MaxLineLength:GridTypeComponent.kt$if</ID>
        <ID>MaxLineLength:GridTypeComponent.kt$isOnlyNumber =
            optionItemEntityState?.optionItemEntity?.optionType == QuestionType.InputNumber.name
        </ID>
        <ID>MaxLineLength:GridTypeComponent.kt$onAnswerSelection: (questionIndex: Int, optionItems:
            List&lt;OptionItemEntity&gt;, selectedIndeciesCount: List&lt;Int&gt;) -&gt; Unit
        </ID>
        <ID>MaxLineLength:GridTypeComponent.kt$optionItemEntityList</ID>
        <ID>MaxLineLength:GridTypeComponent.kt$showQuestionState.optionItemEntityState.find {
            it.optionId == optionItem.optionId }
        </ID>
        <ID>MaxLineLength:IncrementDecrementView.kt$onAnswerSelection(if
            (currentCount.value.isEmpty()) "0" else currentCount.value)
        </ID>
        <ID>MaxLineLength:InputTypeQuestionAnswerDao.kt$InputTypeQuestionAnswerDao$@Query("DELETE
            from $INPUT_TYPE_QUESTION_ANSWER_TABLE where userId=:userId and surveyId = :surveyId AND
            sectionId = :sectionId AND questionId = :questionId AND didiId = :didiId AND optionId =
            :optionId")
        </ID>
        <ID>MaxLineLength:InputTypeQuestionAnswerDao.kt$InputTypeQuestionAnswerDao$@Query("SELECT *
            from $INPUT_TYPE_QUESTION_ANSWER_TABLE where userId=:userId and surveyId = :surveyId AND
            sectionId = :sectionId AND didiId = :didiId")
        </ID>
        <ID>MaxLineLength:InputTypeQuestionAnswerDao.kt$InputTypeQuestionAnswerDao$@Query("SELECT *
            from $INPUT_TYPE_QUESTION_ANSWER_TABLE where userId=:userId and surveyId = :surveyId AND
            sectionId = :sectionId AND questionId = :questionId AND didiId = :didiId")
        </ID>
        <ID>MaxLineLength:InputTypeQuestionAnswerDao.kt$InputTypeQuestionAnswerDao$@Query("SELECT
            COUNT(*) from $INPUT_TYPE_QUESTION_ANSWER_TABLE where userId=:userId and surveyId =
            :surveyId AND sectionId = :sectionId AND questionId = :questionId AND didiId = :didiId
            AND optionId = :optionItemId")
        </ID>
        <ID>MaxLineLength:LanguageItemComponent.kt$color = if (itemIndex ==
            languageState.selectedLanguageId) languageItemActiveBorderBg else
            languageItemInActiveBorderBg
        </ID>
        <ID>MaxLineLength:LanguageScreenComponent.kt$LanguageItemComponent</ID>
        <ID>
            MaxLineLength:LanguageScreenComponent.kt$languagesState.languageList[languagesState.selectedLanguageId].langCode
            ?: DEFAULT_LANGUAGE_CODE
        </ID>
        <ID>MaxLineLength:LanguageScreenViewModel.kt$LanguageScreenViewModel$.</ID>
        <ID>
            MaxLineLength:LanguageScreenViewModel.kt$LanguageScreenViewModel$languageScreenUseCase.saveSelectedLanguageUseCase.saveSelectedLanguageCode(event.mainActivity,
            event.languageCode)
        </ID>
        <ID>MaxLineLength:LocationUtil.kt$LocationUtil$"locationProvider: $locationProvider,
            location: lat-${location?.latitude}, long-${location?.longitude}"
        </ID>
        <ID>MaxLineLength:LoginScreenViewModel.kt$LoginScreenViewModel$val loginResponse =
            loginScreenUseCase.generateOtpUseCase.invoke(event.mobileNumber.text) /*ApiResponseModel&lt;String&gt;(status
            = SUCCESS, "Otp successfully Send", data = "Otp successfully Send")*/
        </ID>
        <ID>MaxLineLength:MiscQuestionBoxComponent.kt$currentValue =
            selectedOptionMapForNumericInputTypeQuestions[optionsItem.optionId]?.inputValue
        </ID>
        <ID>MaxLineLength:MiscQuestionBoxComponent.kt$hintText</ID>
        <ID>MaxLineLength:MiscQuestionBoxComponent.kt$isOnlyNumber =
            optionsItem?.optionItemEntity.optionType == QuestionType.InputNumberEditText.name
        </ID>
        <ID>MaxLineLength:MiscQuestionBoxComponent.kt$onAnswerSelection: (questionIndex: Int,
            optionItemEntity: OptionItemEntity, selectedValue: String, selectedId: Int) -&gt; Unit
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$"$ACTIVITY_TABLE_NAME.activityTypeId,
            $ACTIVITY_TABLE_NAME.doer, $ACTIVITY_TABLE_NAME.subject, $ACTIVITY_TABLE_NAME.reviewer,
            $TASK_TABLE_NAME.taskId, $TASK_TABLE_NAME.didiId, "
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$"$ACTIVITY_TABLE_NAME.missionId missionId,
            $ACTIVITY_TABLE_NAME.activityId, $ACTIVITY_TABLE_NAME.activityName,
            $ACTIVITY_TABLE_NAME.activityType, "
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("SELECT
            $activityForSubject FROM $ACTIVITY_TABLE_NAME LEFT JOIN $TASK_TABLE_NAME on
            $ACTIVITY_TABLE_NAME.activityId = $TASK_TABLE_NAME.activityId where
            $TASK_TABLE_NAME.userId=:userId and $TASK_TABLE_NAME.didiId = :subjectId and
            $TASK_TABLE_NAME.isActive=1")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("SELECT * from
            $ACTIVITY_TABLE_NAME where userId=:userId and missionId = :missionId and activityId =
            :activityId and isActive=1")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("SELECT COUNT(*) from
            $ACTIVITY_TABLE_NAME where userId = :userId AND missionId = :missionId AND status !=
            :status and isActive=1")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("SELECT COUNT(*) from
            $ACTIVITY_TABLE_NAME where userId=:userId and missionId = :missionId AND status NOT in
            (:status) and isActive=1")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("UPDATE
            $ACTIVITY_TABLE_NAME SET actualCompleteDate = :completedDate WHERE userId=:userId and
            activityId = :activityId AND missionId = :missionId")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("UPDATE
            $ACTIVITY_TABLE_NAME SET actualStartDate = :actualStartDate WHERE userId=:userId and
            activityId = :activityId AND missionId = :missionId")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("UPDATE
            $ACTIVITY_TABLE_NAME SET isActive = :isActive where userId=:userId and missionId =
            :missionId and activityId= :activityId")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("UPDATE
            $ACTIVITY_TABLE_NAME SET status = :status WHERE userId=:userId and activityId =
            :activityId AND missionId = :missionId")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("Update
            $ACTIVITY_TABLE_NAME set activityStatus = :status, pendingDidi=:pendingDidi where
            userId=:userId and activityId = :activityId")
        </ID>
        <ID>MaxLineLength:MissionActivityDao.kt$MissionActivityDao$@Query("Update
            $ACTIVITY_TABLE_NAME set isAllTask = :isAllTaskDone where userId=:userId and activityId
            = :activityId")
        </ID>
        <ID>MaxLineLength:MissionEntityDao.kt$"$ACTIVITY_TABLE_NAME.activityTypeId activityTypeId,
            $ACTIVITY_TABLE_NAME.doer, $ACTIVITY_TABLE_NAME.subject, $ACTIVITY_TABLE_NAME.reviewer,
            "
        </ID>
        <ID>MaxLineLength:MissionEntityDao.kt$"$ACTIVITY_TABLE_NAME.status activityStatus,
            $ACTIVITY_TABLE_NAME.actualStartDate activityActualStartDate,
            $ACTIVITY_TABLE_NAME.actualCompleteDate activityActualCompletedDate, "
        </ID>
        <ID>MaxLineLength:MissionEntityDao.kt$"$MISSION_TABLE_NAME.missionId missionId,
            $MISSION_TABLE_NAME.status missionStatus, $MISSION_TABLE_NAME.actualStartDate
            missionActualStartDate, $MISSION_TABLE_NAME.actualCompletedDate
            missionActualCompletedDate, $ACTIVITY_TABLE_NAME.activityId activityId,"
        </ID>
        <ID>MaxLineLength:MissionEntityDao.kt$"$TASK_TABLE_NAME.actualStartDate taskActualStartDate,
            $TASK_TABLE_NAME.actualCompletedDate taskActualCompletedDate"
        </ID>
        <ID>MaxLineLength:MissionEntityDao.kt$MissionEntityDao$// @Query("SELECT
            $missionActivityTaskDto from $MISSION_TABLE_NAME JOIN $ACTIVITY_TABLE_NAME on
            $ACTIVITY_TABLE_NAME.missionId = $MISSION_TABLE_NAME.missionId JOIN $TASK_TABLE_NAME on
            $TASK_TABLE_NAME.missionId = $MISSION_TABLE_NAME.missionId where $TASK_TABLE_NAME.taskId
            = :taskId AND $TASK_TABLE_NAME.activityId = :activityId AND $TASK_TABLE_NAME.missionId =
            :missionId")
        </ID>
        <ID>MaxLineLength:MissionEntityDao.kt$MissionEntityDao$@Query("UPDATE $MISSION_TABLE_NAME
            SET actualCompletedDate = :actualCompletedDate where userId=:userId and missionId =
            :missionId")
        </ID>
        <ID>MaxLineLength:MissionEntityDao.kt$MissionEntityDao$@Query("UPDATE $MISSION_TABLE_NAME
            SET actualStartDate = :actualStartDate where userId=:userId and missionId = :missionId")
        </ID>
        <ID>MaxLineLength:MissionEntityDao.kt$MissionEntityDao$@Query("Update $MISSION_TABLE_NAME
            set pendingActivity=:pendingActivity, activityComplete=:activityComplete where
            userId=:userId and missionId = :missionId")
        </ID>
        <ID>
            MaxLineLength:MissionScreen_1.kt$navController.navigate("${MISSION_SUMMARY_SCREEN_ROUTE_NAME}/${mission.missionId}/${mission.missionName}/${mission.endDate}")
        </ID>
        <ID>
            MaxLineLength:MissionSummaryScreen.kt$navController.navigate("add_didi_graph/${activity.activityName}/${missionId}/${activity.endDate}/${activity.activityId}")
        </ID>
        <ID>MaxLineLength:MissonRowScreen.kt$// .background(if (pendingCount == 0 &amp;&amp;
            viewModel.missionActivityCountMap.value[mission.missionId] != 0) greenOnline else
            greyLightColor)
        </ID>
        <ID>MaxLineLength:MissonRowScreen.kt$// color = if (pendingCount == 0 &amp;&amp;
            viewModel.missionActivityCountMap.value[mission.missionId] != 0) white else
            black100Percent,
        </ID>
        <ID>MaxLineLength:MissonRowScreen.kt$// text = if (pendingCount == 0 &amp;&amp;
            viewModel.missionActivityCountMap.value[mission.missionId] != 0) "Completed"
        </ID>
        <ID>MaxLineLength:MissonRowScreen.kt$targetValue</ID>
        <ID>MaxLineLength:MissonRowScreen.kt$text = stringResource(R.string.task_completed_label) +
            "${completedProgress}/${viewModel.missionActivityCountMap.value[mission.missionId]}"
        </ID>
        <ID>MaxLineLength:NavHomeGraph.kt$.</ID>
        <ID>MaxLineLength:NavHomeGraph.kt$HomeScreens$SearchScreen : HomeScreens</ID>
        <ID>MaxLineLength:NavHomeGraph.kt$HomeScreens.FORM_QUESTION_SUMMARY_SCREEN$route =
            "$FORM_QUESTION_SUMMARY_SCREEN_ROUTE_NAME/{$ARG_SURVEY_ID}/{$ARG_SECTION_ID}/{$ARG_QUESTION_ID}/{$ARG_DIDI_ID}"
        </ID>
        <ID>MaxLineLength:NavHomeGraph.kt$HomeScreens.FormTypeQuestionScreen$HomeScreens(route =
            "${FORM_TYPE_QUESTION_SCREEN_ROUTE_NAME}/{$ARG_SURVEY_ID}/{$ARG_SECTION_ID}/{$ARG_QUESTION_ID}/{$ARG_DIDI_ID}?{$ARG_FORM_QUESTION_RESPONSE_REFERENCE_ID}")
        </ID>
        <ID>MaxLineLength:NavHomeGraph.kt$HomeScreens.MISSION_SUMMARY_SCREEN$HomeScreens(route =
            "$MISSION_SUMMARY_SCREEN_ROUTE_NAME/{$ARG_MISSION_ID}/{$ARG_MISSION_NAME}/{$ARG_MISSION_DATE}")
        </ID>
        <ID>MaxLineLength:NavHomeGraph.kt$fun</ID>
        <ID>
            MaxLineLength:NavHomeGraph.kt$navController.navigate("$FORM_TYPE_QUESTION_SCREEN_ROUTE_NAME/${surveyId}/${sectionId}/${question.questionId}/${surveyeeId}")
        </ID>
        <ID>MaxLineLength:NavigationController.kt$/* } composable( route =
            ScreenRoutes.STEP_COMPLETION_SCREEN.route, arguments =
            listOf(navArgument(ARG_COMPLETION_MESSAGE) { type = NavType.StringType }) ) { //
            StepCompletionScreen(navController = homeScreenNavController, modifier = Modifier,
            message = it.arguments?.getString(ARG_COMPLETION_MESSAGE) ?: "") } composable(route =
            ScreenRoutes.VILLAGE_SELECTION_SCREEN.route) { */
        </ID>
        <ID>MaxLineLength:NavigationController.kt$/* } composable(route =
            ScreenRoutes.MORE_SCREEN.route) { MoreScreen(navController) } composable(route =
            ScreenRoutes.HOME_SCREEN.route) { HomeScreen(navController = navController, modifier =
            Modifier.fillMaxWidth()) } composable( route = ScreenRoutes.TRANSECT_WALK_SCREEN.route,
            arguments = listOf(navArgument(ARG_VILLAGE_ID) { type = NavType.IntType },
            navArgument(ARG_STEP_ID) { type = NavType.IntArrayType }) ) { // TransectWalkScreen( //
            navController = navController, // modifier = Modifier // .fillMaxSize() //
            .then(modifier), // viewModel = hiltViewModel(), // villageId =
            it.arguments?.getInt(ARG_VILLAGE_ID) ?: 0, // stepId = it.arguments?.getInt(ARG_STEP_ID)
            ?: -1 // ) } composable( route = ScreenRoutes.STEP_COMPLETION_SCREEN.route, arguments =
            listOf(navArgument(ARG_COMPLETION_MESSAGE) { type = NavType.StringType }) ) { //
            StepCompletionScreen(navController = navController, modifier = Modifier, message =
            it.arguments?.getString(ARG_COMPLETION_MESSAGE) ?: "") } composable(route =
            ScreenRoutes.VILLAGE_SELECTION_SCREEN.route) { // VillageSelectionScreen(navController =
            navController, viewModel = hiltViewModel()) } composable(route =
            ScreenRoutes.PAT_SURVEY_YES_NO_SCREEN.route) { val viewModel : YesNoQuestionViewModel =
            hiltViewModel() val surveyUiState = viewModel.surveyHeaderUiState.collectAsState().value
            val questionAnswerUiState = viewModel.questionAnswerUiState.collectAsState().value val
            nextPreviousUiState = viewModel.nextPreviousUiState.collectAsState().value
            YesNoQuestionScreen( navController, modifier = Modifier .fillMaxSize() .then(modifier),
            surveyUiState, questionAnswerUiState, nextPreviousUiState, viewModel::OnEvent ) } } }
            @Composable fun HomeScreenFlowNavigation( homeScreenNavController: NavHostController,
            stepsNavHostController: NavHostController, modifier: Modifier = Modifier ) { val
            sharedViewModel: AddDidiViewModel = hiltViewModel() NavHost( navController =
            homeScreenNavController, startDestination = ScreenRoutes.PROGRESS_SCREEN.route ) {
            composable(route = ScreenRoutes.PROGRESS_SCREEN.route) { */
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$.</ID>
        <ID>MaxLineLength:NestedLazyList.kt$/*item { Row(verticalAlignment =
            Alignment.CenterVertically) { LinearProgressIndicator( modifier = Modifier .weight(1f)
            .height(dimen_8_dp) .padding(top = 1.dp) .clip(RoundedCornerShape(14.dp)), color =
            progressIndicatorColor, trackColor = trackColor, progress = curPercentage.value )
            Spacer(modifier = Modifier.width(dimen_8_dp)) Text( text =
            "${questionScreenViewModel.answeredQuestionCount.size}/${questionScreenViewModel.totalQuestionCount.intValue}",
            color = textColorDark, style = smallTextStyle ) } } item { Spacer( modifier = Modifier
            .fillMaxWidth() .height(dimen_8_dp) ) }*/
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$/*val answeredQuestionCount = remember {
            mutableIntStateOf(sectionDetails.questionAnswerMapping.size) } val
            answeredQuestionIndices = remember { mutableStateOf(mutableListOf&lt;Int&gt;()) } val
            curPercentage = animateFloatAsState( targetValue = if
            (questionScreenViewModel.totalQuestionCount.intValue == 0) 0f else { ( if
            (questionScreenViewModel.answeredQuestionCount.size.toFloat() &gt;
            questionScreenViewModel.totalQuestionCount.intValue.toFloat())
            questionScreenViewModel.totalQuestionCount.intValue.toFloat() else
            questionScreenViewModel.answeredQuestionCount.size.toFloat() ) /
            questionScreenViewModel.totalQuestionCount.intValue.toFloat() }, label = "",
            animationSpec = tween() )*/
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$//
            BaselineCore.setReferenceId(questionScreenViewModel.getReferenceIdForFormWithNoneQuestion())
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$// if
            (sectionDetails.sectionName.equals(context.getString(R.string.didi_info), true) &amp;&amp;
            questionScreenViewModel.didiInfoObjectLive.value?.isEmpty() == true) {
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$?.</ID>
        <ID>MaxLineLength:NestedLazyList.kt$QuestionTypeEvent</ID>
        <ID>MaxLineLength:NestedLazyList.kt$areOptionsEnabled =
            question.optionItemEntityState.filter { it.isOptionEnabled }.size &gt; 1
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$if</ID>
        <ID>MaxLineLength:NestedLazyList.kt$if
            (sectionDetails.questionAnswerMapping[question.questionId].isNullOrEmpty())
            OptionItemEntity.getEmptyOptionItemEntity() else
            sectionDetails.questionAnswerMapping[question.questionId]?.first()
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$inputTypeQuestionAnswerEntitiesForQuestion</ID>
        <ID>MaxLineLength:NestedLazyList.kt$inputTypeQuestionAnswerEntityList?.value?.filter {
            it.questionId == question.questionId }
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$inputTypeQuestionEntity =
            inputTypeQuestionAnswerEntitiesForQuestion
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$mOptionItem</ID>
        <ID>MaxLineLength:NestedLazyList.kt$navigateToSearchScreen(navController,
            sectionDetails.surveyId, surveyeeId, fromScreen = ARG_FROM_QUESTION_SCREEN)
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$question.optionItemEntityState.find { it.optionId ==
            inputTypeQuestionAnswerEntity.optionId }?.optionItemEntity
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$question.optionItemEntityState.find {
            it.optionItemEntity?.optionType == QuestionType.FormWithNone.name }
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$referenceId =
            questionScreenViewModel.getReferenceIdForFormWithNoneQuestion()
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$saveAnswerEventOptionItemDtoList</ID>
        <ID>MaxLineLength:NestedLazyList.kt$selectedOptionIndex</ID>
        <ID>MaxLineLength:NestedLazyList.kt$selectedOptionMapForNumericInputTypeQuestions =
            selectedOptionMapForNumericInputTypeQuestions
        </ID>
        <ID>MaxLineLength:NestedLazyList.kt$showConditionalQuestion = optionItems.any {
            it.conditions.isNullOrEmpty() }
        </ID>
        <ID>MaxLineLength:NestedLazyListForFormQuestions.kt$.</ID>
        <ID>MaxLineLength:NestedLazyListForFormQuestions.kt$isOnlyNumber =
            option.optionItemEntity.optionType == QuestionType.InputNumber.name ||
            option.optionItemEntity.optionType == QuestionType.InputNumberEditText.name
        </ID>
        <ID>MaxLineLength:NestedLazyListForFormQuestions.kt$items</ID>
        <ID>
            MaxLineLength:NestedLazyListForFormQuestions.kt$questionTypeScreenViewModel.onEvent(QuestionTypeEvent.UpdateCalculationTypeQuestionValue)
        </ID>
        <ID>MaxLineLength:NetworkModule.kt$NetworkModule$// Workaround for the error "Caused by:
            javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException:
            Trust anchor for certification path not found.
        </ID>
        <ID>MaxLineLength:OptionEntityMapper.kt$OptionEntityMapper$selectedValueId</ID>
        <ID>MaxLineLength:OptionItemDao.kt$OptionItemDao$@Query("Delete from $OPTION_TABLE where
            userId=:userId and optionId=:optionId and questionId = :questionId and sectionId =
            :sectionId and surveyId = :surveyId and languageId = :languageId")
        </ID>
        <ID>MaxLineLength:OptionItemDao.kt$OptionItemDao$@Query("SELECT * FROM option_table WHERE
            languageId = :languageId AND optionId IN (:optionIds) AND questionId = :questionId AND
            sectionId = :sectionId AND surveyId = :surveyId and userId =:userId")
        </ID>
        <ID>MaxLineLength:OptionItemDao.kt$OptionItemDao$@Query("Select * from $OPTION_TABLE where
            userId=:userId and sectionId = :sectionId and surveyId = :surveyId and languageId =
            :languageId")
        </ID>
        <ID>MaxLineLength:OptionItemDao.kt$OptionItemDao$@Query("Select * from $OPTION_TABLE where
            userId=:userId and sectionId = :sectionId and surveyId = :surveyId and questionId =
            :questionId and languageId=:languageId")
        </ID>
        <ID>MaxLineLength:OptionItemDao.kt$OptionItemDao$@Query("Select * from $OPTION_TABLE where
            userId=:userId and sectionId = :sectionId and surveyId = :surveyId and questionId =
            :questionId and optionId = :optionId and languageId = :languageId")
        </ID>
        <ID>MaxLineLength:OptionItemDao.kt$OptionItemDao$@Query("Select COUNT(*) FROM $ANSWER_TABLE
            where userId=:userId and questionId = :questionId AND sectionId = :sectionId AND
            surveyId = :surveyId")
        </ID>
        <ID>MaxLineLength:OptionItemDao.kt$OptionItemDao$@Query("Update $OPTION_TABLE set isSelected
            = :isSelected where userId=:userId and surveyId=:surveyId AND sectionId=:sectionId AND
            questionId = :questionId AND optionId = :optionId")
        </ID>
        <ID>MaxLineLength:OptionItemDao.kt$OptionItemDao$@Query("Update $OPTION_TABLE set
            selectedValue = :selectValue where userId=:userId and surveyId=:surveyId AND
            sectionId=:sectionId AND questionId = :questionId AND optionId = :optionId")
        </ID>
        <ID>MaxLineLength:OtpVerificationScreenComponent.kt$colors</ID>
        <ID>
            MaxLineLength:OtpVerificationViewModel.kt$OtpVerificationViewModel$OtpRequest(mobileNumber
            = otpVerificationUseCase.getMobileNumberUseCase.invoke() ?: "", otp = if
            (otpNumber.value == "") BaselineCore.autoReadOtp.value else otpNumber.value )
        </ID>
        <ID>MaxLineLength:QuestionEntityDao.kt$QuestionEntityDao$@Query("Delete from $QUESTION_TABLE
            where userId=:userid and questionId = :questionId and sectionId = :sectionId and
            surveyId = :surveyId and languageId = :languageId")
        </ID>
        <ID>MaxLineLength:QuestionEntityDao.kt$QuestionEntityDao$@Query("SELECT * from
            $QUESTION_TABLE where userId=:userid and questionId = :questionId and sectionId =
            :sectionId and surveyId = :surveyId and languageId = :languageId")
        </ID>
        <ID>MaxLineLength:QuestionEntityDao.kt$QuestionEntityDao$@Query("SELECT * from
            $QUESTION_TABLE where userId=:userid and surveyId = :surveyId and sectionId = :sectionId
            and questionId = :questionId and languageId = :languageId")
        </ID>
        <ID>MaxLineLength:QuestionEntityDao.kt$QuestionEntityDao$@Query("SELECT * from
            $QUESTION_TABLE where userId=:userid and surveyId = :surveyId and sectionId = :sectionId
            and questionId = :questionId")
        </ID>
        <ID>MaxLineLength:QuestionEntityDao.kt$QuestionEntityDao$@Query("SELECT `order` from
            $QUESTION_TABLE where userId=:userid and surveyId = :surveyId and sectionId = :sectionId
            and questionId = :questionId")
        </ID>
        <ID>MaxLineLength:QuestionEntityDao.kt$QuestionEntityDao$@Query("SELECT questionDisplay from
            $QUESTION_TABLE where userId=:userid and surveyId = :surveyId and sectionId = :sectionId
            and questionId = :questionId")
        </ID>
        <ID>MaxLineLength:QuestionEntityDao.kt$QuestionEntityDao$@Query("SELECT tag from
            $QUESTION_TABLE where userId=:userid and surveyId = :surveyId and sectionId = :sectionId
            and questionId = :questionId")
        </ID>
        <ID>MaxLineLength:QuestionEntityDao.kt$QuestionEntityDao$@Query("Select * from
            $QUESTION_TABLE where userId=:userId and sectionId = :sectionId and surveyId = :surveyId
            and languageId = :languageId")
        </ID>
        <ID>MaxLineLength:QuestionScreen.kt$// shape = RoundedCornerShape(bottomStart =
            roundedCornerRadiusDefault, bottomEnd = roundedCornerRadiusDefault),
        </ID>
        <ID>MaxLineLength:QuestionScreen.kt$//
            viewModel.onEvent(QuestionScreenEvents.SendAnswersToServer(surveyId =
            sectionDetails.surveyId, sectionId = sectionDetails.sectionId, surveyeeId))
        </ID>
        <ID>MaxLineLength:QuestionScreen.kt$containerColor = if (viewModel.isSectionCompleted.value)
            blueDark else inactiveLightBlue
        </ID>
        <ID>MaxLineLength:QuestionScreenEvents.kt$QuestionScreenEvents$SaveMiscTypeQuestionAnswers :
            QuestionScreenEvents
        </ID>
        <ID>
            MaxLineLength:QuestionScreenEvents.kt$QuestionScreenEvents$UpdateInputTypeQuestionAnswerEntityForUi
        </ID>
        <ID>
            MaxLineLength:QuestionScreenEvents.kt$QuestionScreenEvents$UpdateQuestionAnswerMappingForUi
            : QuestionScreenEvents
        </ID>
        <ID>MaxLineLength:QuestionScreenHandler.kt$/* // TODO @Anupam Temp Solution only until order
            number is not received from backend navigateBackToDidiScreen(navController) } catch (ex:
            Exception) { navigateBackToDidiScreen(navController) }*/
        </ID>
        <ID>MaxLineLength:QuestionScreenRepository.kt$QuestionScreenRepository$fun
            isInputTypeQuestionAlreadyAnswered(surveyId: Int, sectionId: Int, didiId: Int,
            questionId: Int, optionItemId: Int): Int
        </ID>
        <ID>MaxLineLength:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$//
            BaselineLogger.d("QuestionScreenRepositoryImpl", "saveSectionAnswersToServer:
            saveAnswersToServerApiResponse -&gt; ${saveAnswersToServerApiResponse.json()}")
        </ID>
        <ID>
            MaxLineLength:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$it.sectionStatus.equals(SectionStatus.INPROGRESS.ordinal)
            || it.sectionStatus.equals(SectionStatus.NOT_STARTED.ordinal)
        </ID>
        <ID>MaxLineLength:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$questionName
            = questionEntityList[questionEntityList.map { it.questionId
            }.indexOf(sectionAnswerEntity.questionId)].questionDisplay ?: BLANK_STRING
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$" questionSummary =
            ${questionEntity.questionSummary ?: BLANK_STRING},\n"
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$// Log.d("TAG",
            "updateSaveUpdateState: questionEntityStateList.filter { it.showQuestion }.size:
            ${questionEntityStateList.filter { it.showQuestion }.size} answeredQuestionCount:
            $answeredQuestionCount ::: totalQuestionCount: ${totalQuestionCount.intValue}")
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$?.</ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$QuestionTypeEvent</ID>
        <ID>
            MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$answeredQuestionCount.size
            == totalQuestionCount.intValue || answeredQuestionCount.size &gt;
            totalQuestionCount.intValue
        </ID>
        <ID>
            MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$event.questionEntityState?.questionEntity?.type
            == QuestionType.SingleSelectDropdown.name
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$if</ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$optionItemEntityState =
            emptyList()
        </ID>
        <ID>
            MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$optionToUpdate.add(questionToShow?.optionItemEntityState?.find
            { it.optionId == opt?.optionId }!!)
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$private</ID>
        <ID>
            MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$questionEntityState.optionItemEntityState.find
            { it.optionId == inputTypeQuestionAnswerEntity.optionId }?.optionItemEntity
        </ID>
        <ID>
            MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$questionEntityStateList.find
            { it.questionId == event.questionEntityState?.questionId &amp;&amp; it.showQuestion }
        </ID>
        <ID>
            MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$questionToUpdate?.optionItemEntityState?.filter
            { it.optionId != event.optionItemEntity.optionId }
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$referenceOptionList
        </ID>
        <ID>
            MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$updateQuestionStateForCondition(conditionResult
            = conditionCheckResult == true, conditionsDto)
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val
            conditionCheckResult = conditionsDto?.checkCondition(event.optionItemEntity.display ?:
            BLANK_STRING)
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val
            existingGridTypeAnswers =
            questionScreenUseCase.getSectionAnswersUseCase.getSectionAnswerForDidi(sectionId =
            sectionId, didiId = didiId).findQuestionForQuestionId(questionId)
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val
            formResponseEntityToQuestionMap: State&lt;Map&lt;Int, List&lt;FormQuestionResponseEntity&gt;&gt;&gt;
            get() = _formResponseEntityToQuestionMap
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val index =
            mInputTypeQuestionAnswerEntityList.map { it.optionId
            }.indexOf(isAnswerAlreadyMarked.optionId)
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val
            inputTypeQuestionAnswerEntityList: State&lt;List&lt;InputTypeQuestionAnswerEntity&gt;&gt;
            get() = _inputTypeQuestionAnswerEntityList
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val
            isAnswerAlreadyMarked = mInputTypeQuestionAnswerEntityList.find { it.optionId ==
            event.inputTypeQuestionAnswerEntity.optionId }
        </ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$var</ID>
        <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$var index = if
            (((questionToShow?.questionEntity?.order ?: 0) - 1) &gt; questionToShowIndex)
            questionToShowIndex else (questionToShow?.questionEntity?.order ?: 0) - 1
        </ID>
        <ID>
            MaxLineLength:QuestionScreenViewModel.kt$com.nrlm.baselinesurvey.ui.question_screen.viewmodel.QuestionScreenViewModel.kt
        </ID>
        <ID>MaxLineLength:QuestionTypeEvent.kt$QuestionTypeEvent$UpdateConditionalOptionState</ID>
        <ID>MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$"onEvent -&gt;
            QuestionTypeEvent.DeleteFormQuestionOptionResponseEvent -&gt; null pointer exception"
        </ID>
        <ID>
            MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$"updateCachedData:
            storeCacheForResponse.size: ${storeCacheForResponse.size}, totalOptionSize.intValue:
            ${totalOptionSize.intValue}, answeredOptionCount.intValue:
            ${answeredOptionCount.intValue}"
        </ID>
        <ID>MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$//
            optionMarked?.optionItemEntity?.conditions?.filter {
            it?.checkCondition(response.selectedValue) != true }
        </ID>
        <ID>
            MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$formQuestionResponseEntity.value.find
            { it.optionId == updatedOptionList.find { it.optionItemEntity?.optionType ==
            QuestionType.Calculation.name &amp;&amp; it.showQuestion }?.optionId }?.selectedValue
        </ID>
        <ID>
            MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$formQuestionScreenUseCase.saveFormQuestionResponseUseCase.invoke(event.formQuestionResponseEntity)
        </ID>
        <ID>MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$if</ID>
        <ID>
            MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$it.optionItemEntity?.optionType
            != QuestionType.Form.name &amp;&amp; it.optionItemEntity?.optionType !=
            QuestionType.Calculation.name
        </ID>
        <ID>MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$optionList.find
            { it.optionItemEntity?.optionType == QuestionType.Calculation.name &amp;&amp;
            it.showQuestion }
        </ID>
        <ID>MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$tempList.find {
            optionItemEntityState -&gt; optionItemEntityState.optionId == optItem?.optionId }
        </ID>
        <ID>MaxLineLength:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$throw
            NullPointerException((event as
            QuestionTypeEvent.DeleteFormQuestionOptionResponseEvent).toString())
        </ID>
        <ID>MaxLineLength:RadioQuestionBoxComponent.kt$questionSummary = "Please check if the family
            is getting ration through the public distribution system (PDS) of the government or not?
            \n\nPlease check the granary/ where they store their grain and also check with neighbors
            also to understand the food security of the family"
        </ID>
        <ID>MaxLineLength:RepositoryModule.kt$RepositoryModule$/*@Singleton @Provides fun
            provideConfigRepository( apiService: ApiService, languageListDao: LanguageListDao,
            bpcScorePercentageDao: BpcScorePercentageDao, prefRepo: PrefRepo ): ConfigRepository {
            return ConfigRepository(apiService, languageListDao,bpcScorePercentageDao,prefRepo) }*/
        </ID>
        <ID>MaxLineLength:SaveSectionAnswerUseCase.kt$SaveSectionAnswerUseCase$fun</ID>
        <ID>MaxLineLength:SaveSectionAnswerUseCase.kt$SaveSectionAnswerUseCase$return
            repository.isInputTypeQuestionAlreadyAnswered(surveyId = surveyId, sectionId =
            sectionId, questionId = questionId, didiId = didiId, optionItemId = optionId)
        </ID>
        <ID>MaxLineLength:SaveSectionAnswerUseCase.kt$SaveSectionAnswerUseCase$suspend</ID>
        <ID>MaxLineLength:SearchScreen.kt$sectionId = if (item.itemParentId != -1) item.itemParentId
            else item.itemId
        </ID>
        <ID>MaxLineLength:SearchScreen.kt$style = if (tabIndex == selectedTabIndex.intValue)
            smallTextStyle else smallTextStyleWithNormalWeight
        </ID>
        <ID>MaxLineLength:SearchScreen.kt$text</ID>
        <ID>MaxLineLength:SearchScreen.kt$text = if (searchText.value.isNotBlank() &amp;&amp;
            searchItems.isEmpty()) "No Data Found" else searchText.value
        </ID>
        <ID>MaxLineLength:SectionAnswerEntityDao.kt$SectionAnswerEntityDao$@Query("Delete from
            $ANSWER_TABLE where didiId = :didiId and surveyId = :surveyId and sectionId = :sectionId
            and questionId = :questionId")
        </ID>
        <ID>MaxLineLength:SectionAnswerEntityDao.kt$SectionAnswerEntityDao$@Query("Select COUNT(*)
            FROM $ANSWER_TABLE where userId=:userId and didiId = :didiId AND questionId =
            :questionId AND sectionId = :sectionId AND surveyId = :surveyId")
        </ID>
        <ID>MaxLineLength:SectionAnswerEntityDao.kt$SectionAnswerEntityDao$@Query("Update
            $ANSWER_TABLE set optionItems = :optionItems, questionType=:questionType,
            questionSummary=:questionSummary where userId=:userId and didiId = :didiId AND
            questionId = :questionId AND sectionId = :sectionId AND surveyId = :surveyId")
        </ID>
        <ID>MaxLineLength:SectionEntityDao.kt$SectionEntityDao$@Query("Delete from $SECTION_TABLE
            where userId=:userId and sectionId = :sectionId and surveyId = :surveyId and languageId
            = :languageId")
        </ID>
        <ID>MaxLineLength:SectionEntityDao.kt$SectionEntityDao$@Query("Select * from $SECTION_TABLE
            where userId=:userId and sectionId = :sectionId and surveyId = :surveyId and languageId
            = :languageId")
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$/*if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.COMPLETED.name)) greenLight
            else if (sectionStateItem.sectionStatus.name.equals( SectionStatus.INPROGRESS.name ) )
            stepBoxActiveColor else white*/
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$/*if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.COMPLETED.name)) greenOnline
            else if (sectionStateItem.sectionStatus.name.equals( SectionStatus.INPROGRESS.name ) )
            textColorDark else textColorDark50*/
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$/*if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.COMPLETED.name)) greenOnline
            else if(sectionStateItem.sectionStatus.name.equals( SectionStatus.INPROGRESS.name))
            textColorDark else textColorDark50*/
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$// color = if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.INPROGRESS.name) or
            sectionStateItem.sectionStatus.name.equals(
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$// if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.COMPLETED.name))
            stepIconCompleted else stepIconEnableColor
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$// tint = if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.INPROGRESS.name) or
            sectionStateItem.sectionStatus.name.equals(
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$color = if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.COMPLETED.name)) greenLight
            else white
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$color = if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.COMPLETED.name)) greenOnline
            else greyBorder
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$color = if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.COMPLETED.name)) greenOnline
            else textColorDark
        </ID>
        <ID>MaxLineLength:SectionItemComponent.kt$sectionIconCompletedBg</ID>
        <ID>MaxLineLength:SectionItemComponent.kt$tint = if
            (sectionStateItem.sectionStatus.name.equals(SectionStatus.NOT_STARTED.name))
            textColorDark50 else blueDark
        </ID>
        <ID>MaxLineLength:SectionListScreen.kt$/*.coerceIn(0.0F, 1.0F)*/</ID>
        <ID>MaxLineLength:SectionListScreen.kt$buttonTitle = "Submit
            ${if (surveyId == 1) "Baseline" else "Hamlet"} for ${viewModel.didiName.value}"
        </ID>
        <ID>MaxLineLength:SectionListScreen.kt$if</ID>
        <ID>
            MaxLineLength:SectionListScreen.kt$navController.navigate("$VIDEO_PLAYER_SCREEN_ROUTE_NAME/https://nudgetrainingdata.blob.core.windows.net/recordings/Videos/M6ParticipatoryWealthRanking.mp4")
        </ID>
        <ID>MaxLineLength:SectionListScreen.kt$navigateToQuestionScreen(didiId,
            sectionsList[0].section.sectionId, surveyId = sectionsList[0].section.surveyId,
            navController)
        </ID>
        <ID>MaxLineLength:SectionListScreen.kt$navigateToSearchScreen(navController, surveyId,
            surveyeeId = didiId, fromScreen = ARG_FROM_SECTION_SCREEN)
        </ID>
        <ID>MaxLineLength:SectionListScreen.kt$text =
            "${sectionsList.filter { it.sectionStatus == SectionStatus.COMPLETED }.size}/${sectionsList.size}"
        </ID>
        <ID>MaxLineLength:SectionListScreen.kt$text = viewModel.didiDetails?.didiName ?:
            BLANK_STRING
        </ID>
        <ID>
            MaxLineLength:SectionListScreenViewModel.kt$SectionListScreenViewModel$/*sectionsList.value.forEach
            { section -&gt; _sectionItemStateList.add(SectionState(section, if (section.sectionId ==
            2) SectionStatus.INPROGRESS else SectionStatus.COMPLETED)) }*/
        </ID>
        <ID>
            MaxLineLength:SectionListScreenViewModel.kt$SectionListScreenViewModel$/*sectionsList.value.forEach
            { section -&gt; _sectionItemStateList.add(SectionState(section, if (section.sectionId ==
            2) SectionStatus.NOT_STARTED else SectionStatus.INPROGRESS)) }*/
        </ID>
        <ID>MaxLineLength:SectionListScreenViewModel.kt$SectionListScreenViewModel$val
            sampleVideoPath =
            "https://nudgetrainingdata.blob.core.windows.net/recordings/Videos/M6ParticipatoryWealthRanking.mp4"
        </ID>
        <ID>
            MaxLineLength:SettingBSRepositoryImpl.kt$SettingBSRepositoryImpl$nudgeBaselineDatabase.didiSectionProgressEntityDao().deleteAllSectionProgress(prefRepo.getUniqueUserIdentifier())
        </ID>
        <ID>MaxLineLength:SettingBSScreen.kt$versionText = "
            ${BuildConfig.FLAVOR.uppercase(Locale.getDefault())} v${BuildConfig.VERSION_NAME}
            (${BuildConfig.VERSION_CODE})"
        </ID>
        <ID>
            MaxLineLength:SettingBSViewModel.kt$SettingBSViewModel$"${getFirstName(settingBSUserCase.getUserDetailsUseCase.getUserName())}_${getUserMobileNumber()}_sarathi_${System.currentTimeMillis()}"
        </ID>
        <ID>MaxLineLength:SettingBSViewModel.kt$SettingBSViewModel$fileNameReference =
            "${getFirstName(settingBSUserCase.getUserDetailsUseCase.getUserName())}_${getUserMobileNumber()}_Sarathi_Image"
        </ID>
        <ID>MaxLineLength:SettingBSViewModel.kt$SettingBSViewModel$fileNameReference =
            "${getFirstName(settingBSUserCase.getUserDetailsUseCase.getUserName())}_${getUserMobileNumber()}_sarathi_"
        </ID>
        <ID>MaxLineLength:SharedPrefs.kt$SharedPrefs$return
            Gson().fromJson(prefs.getString(PREF_KEY_SELECTED_VILLAGE,
            Gson().toJson(defaultVillageEntity)), VillageEntity::class.java)
        </ID>
        <ID>MaxLineLength:SharedPrefs.kt$SharedPrefs$val defaultVillageEntity= VillageEntity(id = 0,
            languageId = 2, name = BLANK_STRING, federationName = BLANK_STRING, stateId = 0,
            steps_completed = listOf(), needsToPost = false, localVillageId = 0)
        </ID>
        <ID>MaxLineLength:SubQuestionComponent.kt$/* import androidx.compose.foundation.background
            import androidx.compose.foundation.gestures.Orientation import
            androidx.compose.foundation.gestures.scrollable import
            androidx.compose.foundation.layout.Arrangement import
            androidx.compose.foundation.layout.BoxWithConstraints import
            androidx.compose.foundation.layout.Column import
            androidx.compose.foundation.layout.heightIn import
            androidx.compose.foundation.layout.padding import
            androidx.compose.foundation.layout.wrapContentHeight import
            androidx.compose.foundation.lazy.LazyColumn import
            androidx.compose.foundation.lazy.LazyListState import
            androidx.compose.foundation.lazy.itemsIndexed import
            androidx.compose.foundation.lazy.rememberLazyListState import
            androidx.compose.runtime.Composable import androidx.compose.runtime.SideEffect import
            androidx.compose.runtime.rememberCoroutineScope import androidx.compose.ui.Modifier
            import androidx.compose.ui.unit.Dp import androidx.compose.ui.unit.dp import
            com.nrlm.baselinesurvey.database.entity.OptionItemEntity import
            com.nrlm.baselinesurvey.database.entity.QuestionEntity import
            com.nrlm.baselinesurvey.model.datamodel.OptionsItem import
            com.nrlm.baselinesurvey.model.datamodel.QuestionList import
            com.nrlm.baselinesurvey.ui.theme.dimen_16_dp import
            com.nrlm.baselinesurvey.ui.theme.dimen_18_dp import
            com.nrlm.baselinesurvey.ui.theme.white import kotlinx.coroutines.launch @Composable fun
            SubQuestionComponent( modifier: Modifier = Modifier, outerState: LazyListState =
            rememberLazyListState(), innerState: LazyListState = rememberLazyListState(),
            queLazyState: LazyListState = rememberLazyListState(), parentIndex: Int,
            maxCustomHeight: Dp, questionList: List&lt;QuestionList?&gt;? ) { val scope =
            rememberCoroutineScope() val outerState: LazyListState = rememberLazyListState() val
            innerState: LazyListState = rememberLazyListState() SideEffect { if
            (outerState.layoutInfo.visibleItemsInfo.size == 2 &amp;&amp;
            innerState.layoutInfo.totalItemsCount == 0) scope.launch { outerState.scrollToItem(
            outerState.layoutInfo.totalItemsCount ) } println("outer
            ${outerState.layoutInfo.visibleItemsInfo.map { it.index }}") println("inner
            ${innerState.layoutInfo.visibleItemsInfo.map { it.index }}") } BoxWithConstraints(
            modifier = modifier .scrollable( state = outerState, Orientation.Vertical, )
            .heightIn(min = 100.dp, maxCustomHeight) ) { Column(modifier =
            Modifier.background(white)) { Column( Modifier.padding(top = dimen_16_dp),
            verticalArrangement = Arrangement.spacedBy(dimen_18_dp) ) { LazyColumn( state =
            innerState, userScrollEnabled = false, modifier = Modifier.wrapContentHeight(), ) {
            itemsIndexed( items = questionList ?: emptyList() ) { index, question -&gt;
            QuestionType(questionIndex = index, question = getQuestion(question, 0, 1, 2),
            optionItemEntityList = getOptionList( question?.options, question, 0, 1, 2 ),
            parentIndex = parentIndex, maxCustomHeight = maxCustomHeight, onAnswerSelection = {
            questionIndex, optionItem -&gt; }, questionDetailExpanded = {},
            onMediaTypeDescriptionAction = { descriptionContentType, contentLink -&gt; }) } } } } }
            } private fun getQuestion( question: QuestionList?, sectionId: Int, surveyId: Int,
            languageId: Int ): QuestionEntity { return QuestionEntity( id = 0, questionId =
            question?.questionId, sectionId = sectionId, surveyId = surveyId, questionDisplay =
            question?.questionDisplay, questionSummary = question?.questionSummary, gotoQuestionId =
            question?.gotoQuestionId, order = question?.order, type = question?.type, languageId =
            languageId ) } private fun getOptionList( optionList: List&lt;OptionsItem?&gt;?,
            question: QuestionList?, sectionId: Int, surveyId: Int, languageId: Int ): List&lt;OptionItemEntity&gt;
            { val optionItemEntityList = mutableListOf&lt;OptionItemEntity&gt;() optionList?.forEach
            { optionsItem -&gt; val optionItemEntity = OptionItemEntity( id = 0, optionId =
            optionsItem?.optionId, questionId = question?.questionId, sectionId = sectionId,
            surveyId = surveyId, display = optionsItem?.display, weight = optionsItem?.weight,
            optionValue = optionsItem?.optionValue, summary = optionsItem?.summary, count =
            optionsItem?.count, optionImage = optionsItem?.optionImage, optionType =
            optionsItem?.optionType, conditional = optionsItem?.conditional ?: false, order =
            optionsItem?.order ?: 0, values = optionsItem?.values, languageId = languageId )
            optionItemEntityList.add(optionItemEntity) } return optionItemEntityList }*/
        </ID>
        <ID>MaxLineLength:SurveyeeCardComponent.kt$/*if (surveyeeState.surveyState !=
            SurveyState.NOT_STARTED) { Button( onClick = { buttonClicked(
            ButtonName.CONTINUE_BUTTON, surveyeeState.surveyeeDetails.didiId ?: 0 ) }, enabled =
            true, shape = RoundedCornerShape(roundedCornerRadiusDefault), colors =
            if(surveyeeState.surveyeeDetails.surveyStatus != SurveyState.NOT_AVAILABLE.ordinal)
            ButtonDefaults.buttonColors( containerColor = blueDark, contentColor = white ) else
            ButtonDefaults.buttonColors( containerColor = languageItemActiveBg, contentColor =
            blueDark ), modifier = Modifier.weight(1f) ) { Text( text = if
            (surveyeeState.surveyState == SurveyState.NOT_AVAILABLE || surveyeeState.surveyState ==
            SurveyState.NOT_STARTED) primaryButtonText else stringResource(id =
            R.string.continue_text), style = smallTextStyleMediumWeight ) } } else { Button( onClick
            = { buttonClicked( ButtonName.START_BUTTON, surveyeeState.surveyeeDetails.didiId ?: 0 )
            }, enabled = true, shape = RoundedCornerShape(roundedCornerRadiusDefault), colors =
            if(surveyeeState.surveyeeDetails.surveyStatus != SurveyState.NOT_AVAILABLE.ordinal)
            ButtonDefaults.buttonColors( containerColor = blueDark, contentColor = white ) else
            ButtonDefaults.buttonColors( containerColor = languageItemActiveBg, contentColor =
            blueDark ), modifier = Modifier.weight(1f) ) { Text(text = primaryButtonText, style =
            smallTextStyleMediumWeight) } }*/
        </ID>
        <ID>MaxLineLength:SurveyeeCardComponent.kt$id = if (surveyeeState.isCohortName)
            R.drawable.ic_hamlet_name_icon else R.drawable.home_icn
        </ID>
        <ID>MaxLineLength:SurveyeeCardComponent.kt$if</ID>
        <ID>MaxLineLength:SurveyeeCardComponent.kt$text</ID>
        <ID>MaxLineLength:SurveyeeCardComponent.kt$text = surveyeeState.surveyeeDetails.didiName
        </ID>
        <ID>MaxLineLength:SurveyeeListScreen.kt$if</ID>
        <ID>MaxLineLength:SurveyeeListScreenRepositoryImpl.kt$SurveyeeListScreenRepositoryImpl$if
            (activities.activityTaskSize == activityCompleteInc) SurveyState.COMPLETED.ordinal else
            SurveyState.INPROGRESS.ordinal
        </ID>
        <ID>
            MaxLineLength:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$filteredSurveyeeListState.value.filter
            { it.surveyState != SurveyState.COMPLETED &amp;&amp; it.surveyState !=
            SurveyState.NOT_AVAILABLE }
        </ID>
        <ID>MaxLineLength:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$val
            filteredTolaMapSurveyeeListState: State&lt;Map&lt;String, List&lt;SurveyeeCardState&gt;&gt;&gt;
            get() = _filteredTolaMapSurveyeeListState
        </ID>
        <ID>MaxLineLength:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$val
            thisWeekTolaMapSurveyeeListState: State&lt;Map&lt;String, List&lt;SurveyeeCardState&gt;&gt;&gt;
            get() = _thisWeekTolaMapSurveyeeListState
        </ID>
        <ID>MaxLineLength:ThisWeekSurveyeeListTab.kt$(</ID>
        <ID>MaxLineLength:ThisWeekSurveyeeListTab.kt$MoveSurveyeeUpdateBannerComponent(showBanner =
            showMoveSurveyeeBannerVisibilityPair.value.first, surveyeeEntity =
            showMoveSurveyeeBannerVisibilityPair.value.second)
        </ID>
        <ID>MaxLineLength:ThisWeekSurveyeeListTab.kt$showMoveSurveyeeBannerVisibilityPair.value =
            Pair(true, surveyeeCardState.surveyeeDetails)
        </ID>
        <ID>MaxLineLength:ThisWeekSurveyeeListTab.kt$text =
            "${surveyeeList.filter { it.surveyeeDetails.surveyStatus == SurveyState.COMPLETED.ordinal }.size}/${surveyeeList.size}"
        </ID>
        <ID>MaxLineLength:TimePickerComponent.kt$if
            (getTypePicker(typePicker)?.equals(QuestionType.HrsMinPicker.name) == true)
            DELIMITER_TIME else DELIMITER_YEAR
        </ID>
        <ID>MaxLineLength:TimePickerComponent.kt$return</ID>
        <ID>MaxLineLength:ToolbarWithMenuComponent.kt$Icon(imageVector = Icons.Default.ArrowBack,
            contentDescription = "Back Button", tint = Color.Black)
        </ID>
        <ID>MaxLineLength:Utils.kt$/*var option = optionsItemEntityList.find { it.optionId ==
            formQuestionResponseEntity.optionId } if (option==null) { optionsItemEntityList.forEach
            { optionItemEntity -&gt; optionItemEntity.conditions?.forEach { conditionsDto -&gt;
            conditionsDto?.resultList?.forEach { questionItem -&gt; option =
            questionItem.options?.find { it?.optionId == formQuestionResponseEntity.optionId
            }?.convertToOptionItemEntity(formQuestionResponseEntity.questionId,
            formQuestionResponseEntity.sectionId, formQuestionResponseEntity.surveyId,
            optionItemEntity.languageId!!) if (option != null) {
            householdMemberDetailsMap.put(option?.optionId ?: formQuestionResponseEntity.optionId,
            formQuestionResponseEntity.selectedValue) } } } } }*/
        </ID>
        <ID>MaxLineLength:Utils.kt$fun</ID>
        <ID>MaxLineLength:Utils.kt$optionDesc</ID>
        <ID>MaxLineLength:Utils.kt$optionsItemEntityList.find { it.optionId ==
            inputTypeQuestionAnswerEntity.optionId }?.let { optionsItemEntity -&gt;
            mOptionsItemList.add(optionsItemEntity) }
        </ID>
        <ID>MaxLineLength:Utils.kt$return this.replace("(", "")?.replace(")", "")?.split("
            ")?.filterNot { it.equals("*") || it.equals("-") || it.equals("+") || it.equals("-") }
        </ID>
        <ID>MaxLineLength:Utils.kt$selectedValueWithIds</ID>
        <ID>MaxLineLength:Utils.kt$tag</ID>
        <ID>MaxLineLength:Utils.kt$userInputValue.toInt() &gt;= condition.first().toInt() &amp;&amp;
            userInputValue.toInt() &lt;= condition.last().toInt()
        </ID>
        <ID>MaxLineLength:Utils.kt$val complexSearchState = ComplexSearchState(section.sectionId,
            itemType = ItemType.Section, sectionName = section.sectionName, questionTitle =
            BLANK_STRING, isSectionSearchOnly = true)
        </ID>
        <ID>MaxLineLength:VideoPlayer.kt$onClick = { if (isLandscape) exitFullscreen() else
            navController.popBackStack() }
        </ID>
        <ID>MayBeConst:AppConstants.kt$val BAD_GATEWAY_ERROR_MESSAGE = "We are facing bad gateway
            issue."
        </ID>
        <ID>MayBeConst:AppConstants.kt$val GENERIC_ERROR_MSG = "Oops! An error has occurred on our
            server. Please check internet connection and try to playback again!"
        </ID>
        <ID>MayBeConst:AppConstants.kt$val INTERNAL_SERVER_ERROR_MESSAGE = "We are facing internal
            server error."
        </ID>
        <ID>MayBeConst:AppConstants.kt$val TEMP_UNAVAILABLE_ERROR_MESSAGE = "Service are temporarily
            unavailable now"
        </ID>
        <ID>MayBeConst:AppConstants.kt$val UNAUTHORISED_MESSAGE = "401 Unauthorized"</ID>
        <ID>MayBeConst:AppConstants.kt$val UNREACHABLE_ERROR_MSG = "There seems to be a problem
            accessing details on this screen. Please try again."
        </ID>
        <ID>MayBeConst:Dimens.kt$val dimen_400_px = 400</ID>
        <ID>MayBeConst:Dimens.kt$val dimen_450_px = 450</ID>
        <ID>MayBeConst:Dimens.kt$val weight_100_percent = 1f</ID>
        <ID>MayBeConst:Dimens.kt$val weight_10_percent = 0.1f</ID>
        <ID>MayBeConst:Dimens.kt$val weight_20_percent = 0.2f</ID>
        <ID>MayBeConst:Dimens.kt$val weight_40_percent = 0.4f</ID>
        <ID>MayBeConst:Dimens.kt$val weight_50_percent = 0.5f</ID>
        <ID>MayBeConst:Dimens.kt$val weight_60_percent = 0.6f</ID>
        <ID>MayBeConst:Dimens.kt$val weight_80_percent = 0.8f</ID>
        <ID>ModifierMissing:BaseLineStartScreen.kt$BaseLineStartScreen</ID>
        <ID>ModifierMissing:BaseLineStartScreen.kt$TextDetails</ID>
        <ID>ModifierMissing:BottomNavigationBar.kt$AddItem</ID>
        <ID>ModifierMissing:BottomNavigationBar.kt$BottomNavigationBar</ID>
        <ID>ModifierMissing:CalculationResultComponent.kt$CalculationResultComponent</ID>
        <ID>ModifierMissing:CommonProfileScreen.kt$CommonProfileScreen</ID>
        <ID>ModifierMissing:CommonSettingScreen.kt$CommonSettingCard</ID>
        <ID>ModifierMissing:CommonSettingScreen.kt$CommonSettingScreen</ID>
        <ID>ModifierMissing:DialogComponent.kt$DialogComponent</ID>
        <ID>ModifierMissing:DialogComponent.kt$ShowCustomDialog</ID>
        <ID>ModifierMissing:EditTextWithTitleComponent.kt$EditTextWithTitleComponent</ID>
        <ID>
            ModifierMissing:ExpandableDescriptionContentComponent.kt$ExpandableDescriptionContentComponent
        </ID>
        <ID>ModifierMissing:ExportImportScreen.kt$ExportImportScreen</ID>
        <ID>ModifierMissing:FormTypeQuestionScreen.kt$FormTypeQuestionScreen</ID>
        <ID>ModifierMissing:HomeNavScreen.kt$HomeNavScreen</ID>
        <ID>ModifierMissing:HomeScreen.kt$HomeScreen</ID>
        <ID>ModifierMissing:ImageExpanderDialogComponent.kt$ImageExpanderDialogComponent</ID>
        <ID>ModifierMissing:IncrementDecrementView.kt$IncrementDecrementView</ID>
        <ID>ModifierMissing:MissionSummaryScreen.kt$MissionSummaryScreen</ID>
        <ID>ModifierMissing:OtpInputField.kt$OtpInputField</ID>
        <ID>ModifierMissing:OtpInputField.kt$OtpInputFieldForDialog</ID>
        <ID>ModifierMissing:QuestionScreenHandler.kt$QuestionScreenHandler</ID>
        <ID>ModifierMissing:QuestionType.kt$CreateLazyHorizontalGrid</ID>
        <ID>ModifierMissing:RadioOptionTypeComponent.kt$RadioOptionTypeComponent</ID>
        <ID>ModifierMissing:SettingBSScreen.kt$SettingBSScreen</ID>
        <ID>ModifierMissing:SummaryCardComponent.kt$SummaryCardComponent</ID>
        <ID>ModifierMissing:SwitchComponent.kt$SwitchComponent</ID>
        <ID>ModifierMissing:TextWithReadMoreComponent.kt$TextWithReadMore</ID>
        <ID>ModifierMissing:TimePickerComponent.kt$RangePickerComponent</ID>
        <ID>ModifierMissing:TypeDropDownComponent.kt$TypeDropDownComponent</ID>
        <ID>
            ModifierMissing:TypeMultiSelectedDropDownComponent.kt$TypeMultiSelectedDropDownComponent
        </ID>
        <ID>ModifierMissing:Utils.kt$ShowCustomDialog</ID>
        <ID>ModifierMissing:VideoPlayer.kt$FullscreenView</ID>
        <ID>ModifierMissing:YesNoButtonComponent.kt$YesNoButtonComponent</ID>
        <ID>ModifierReused:FormWithNoneTypeQuestionComponent.kt$BoxWithConstraints( modifier =
            modifier .scrollable( state = outerState, Orientation.Vertical, ) .heightIn(min =
            100.dp, maxCustomHeight) .onGloballyPositioned { with(density) { rootHeight.value =
            rootHeight.value + it.size.height.toDp() } } ) { Card( elevation =
            CardDefaults.cardElevation( defaultElevation = defaultCardElevation ), shape =
            RoundedCornerShape(roundedCornerRadiusDefault), modifier = Modifier .fillMaxWidth()
            .heightIn(min = minHeight, max = maxHeight) .background(white) .clickable { }
            .then(modifier) ) { Column(modifier = Modifier.background(white)) { Column(
            Modifier.padding(top = dimen_16_dp), verticalArrangement =
            Arrangement.spacedBy(dimen_18_dp) ) { LazyColumn( state = outerState, modifier =
            Modifier .heightIn(min = 110.dp, max = maxCustomHeight) ) { item { Row( modifier =
            Modifier .padding(bottom = 10.dp) .padding(horizontal = dimen_16_dp) ) { Text( text =
            "${questionIndex + 1}. ", style = defaultTextStyle, color = textColorDark ) HtmlText(
            text =
            "${showQuestionState.optionItemEntityState.find { it.optionItemEntity?.optionType == QuestionType.FormWithNone.name }?.optionItemEntity?.display}",
            style = defaultTextStyle, color = textColorDark, overflow = TextOverflow.Ellipsis,
            softWrap = true ) } } item { LazyVerticalGrid( userScrollEnabled = false, state =
            innerGridState, columns = GridCells.Fixed(2), modifier = Modifier .wrapContentWidth()
            .padding(horizontal = dimen_16_dp) .heightIn(min = 110.dp, max = maxCustomHeight) ) {
            itemsIndexed(optionList) { index, item -&gt; RadioButtonOptionComponent( index = index,
            selectedIndex = if (isNoneQuestionAnswered.value) { if (isNoneMarked.value) 1 else 0 }
            else -1, optionsItem = OptionItemEntity.getEmptyOptionItemEntity() .copy( display =
            item.value, sectionId = question?.sectionId ?: 0, surveyId = question?.surveyId ?: 0,
            questionId = question?.questionId ?: 0, optionType =
            showQuestionState.optionItemEntityState.find { it.optionItemEntity?.optionType ==
            QuestionType.FormWithNone.name }?.optionItemEntity?.optionType, languageId =
            question?.languageId ?: DEFAULT_LANGUAGE_ID, ), onOptionSelected = { if (isEditAllowed)
            { if (it.display?.equals(optionList.last().value) == true) { //when marked NO
            isNoneMarked.value = true isNoneQuestionAnswered.value = true } if
            (it.display?.equals(optionList.first().value) == true) { //when marked Yes
            isNoneMarked.value = false isNoneQuestionAnswered.value = true } onAnswerSelection(
            questionIndex, isNoneMarked.value, false ) } else { showCustomToast( context,
            context.getString(R.string.edit_disable_message) ) } } ) } } } item { Spacer( modifier =
            Modifier .fillMaxWidth() .height(dimen_10_dp) ) if (contests?.isNotEmpty() == true) {
            Divider( thickness = dimen_1_dp, color = lightGray2, modifier = Modifier.fillMaxWidth()
            ) ExpandableDescriptionContentComponent( questionDetailExpanded, questionIndex, contents
            = contests, subTitle = BLANK_STRING, imageClickListener = { imageTypeDescriptionContent
            -&gt; onMediaTypeDescriptionAction(
            DescriptionContentType.IMAGE_TYPE_DESCRIPTION_CONTENT, imageTypeDescriptionContent ) },
            videoLinkClicked = { videoTypeDescriptionContent -&gt; onMediaTypeDescriptionAction(
            DescriptionContentType.VIDEO_TYPE_DESCRIPTION_CONTENT, videoTypeDescriptionContent ) } )
            } } } } } } }
        </ID>
        <ID>ModifierReused:FormWithNoneTypeQuestionComponent.kt$BoxWithConstraints( modifier =
            modifier .scrollable( state = outerState, Orientation.Vertical, ) .heightIn(min =
            100.dp, maxCustomHeight) .onGloballyPositioned { with(density) { rootHeight.value =
            rootHeight.value + it.size.height.toDp() } } ) { Card( elevation =
            CardDefaults.cardElevation( defaultElevation = defaultCardElevation ), shape =
            RoundedCornerShape(roundedCornerRadiusDefault), modifier = Modifier .fillMaxWidth()
            .heightIn(min = minHeight, max = maxHeight) .background(white) .clickable { }
            .then(modifier) ) { Column(modifier = Modifier.background(white)) { Column(
            Modifier.padding(top = dimen_16_dp), verticalArrangement =
            Arrangement.spacedBy(dimen_18_dp) ) { LazyColumn( state = outerState, modifier =
            Modifier .heightIn(min = 110.dp, max = maxCustomHeight) ) { item { Row( modifier =
            Modifier .padding(bottom = 10.dp) .padding(horizontal = dimen_16_dp) ) { Text( text =
            "${questionIndex + 1}.1. ", style = defaultTextStyle, color = textColorDark ) HtmlText(
            text = "${question?.questionDisplay}", style = defaultTextStyle, color = textColorDark,
            overflow = TextOverflow.Ellipsis, softWrap = true ) } } item { Spacer( modifier =
            Modifier .fillMaxWidth() .height(dimen_8_dp) ) } item { Row( modifier = Modifier
            .fillMaxWidth() .padding(dimen_10_dp), horizontalArrangement = Arrangement.SpaceBetween
            ) { Spacer( modifier = Modifier .fillMaxWidth() .weight(weight_20_percent) )
            OutlinedCTAButtonComponent( tittle = question?.questionSummary, isActive =
            isEditAllowed, modifier = Modifier .fillMaxWidth() .weight(weight_60_percent) ) { if
            (isEditAllowed) { onAnswerSelection( questionIndex, false, true ) } else {
            showCustomToast( context, context.getString(R.string.edit_disable_message) ) } } Spacer(
            modifier = Modifier .fillMaxWidth() .weight(weight_20_percent) ) } } if (itemCount &gt;
            0) { if (!summaryValue.equals(BLANK_STRING) &amp;&amp; tagList.findTagForId(
            question?.tag ?: 0 ).equals("Livelihood Sources") ) { item { Text( text =
            buildAnnotatedString { withStyle( style = SpanStyle( fontFamily = NotoSans, fontWeight =
            FontWeight.SemiBold, fontSize = 14.sp ) ) {
            append(stringResource(R.string.total_annual_income_label)) } withStyle( style =
            SpanStyle( fontFamily = NotoSans, fontWeight = FontWeight.Bold, fontSize = 14.sp ) ) {
            append(summaryValue) } }, color = blueDark, style = TextStyle( fontFamily = NotoSans,
            fontWeight = FontWeight.SemiBold, fontSize = 14.sp ), textAlign = TextAlign.Center,
            modifier = Modifier.padding(dimen_16_dp) ) } } item { SummaryCardComponent( itemCount,
            question ) { onViewSummaryClicked(it) } } } item { Spacer( modifier = Modifier
            .fillMaxWidth() .padding(bottom = 10.dp) ) } } } } } }
        </ID>
        <ID>ModifierReused:FormWithNoneTypeQuestionComponent.kt$BoxWithConstraints( modifier =
            modifier .scrollable( state = outerState, Orientation.Vertical, ) .heightIn(min =
            rootHeight.value, maxCustomHeight) ) { Column {
            VerticalAnimatedVisibilityComponent(visible = showQuestionState.showQuestion) {
            BoxWithConstraints( modifier = modifier .scrollable( state = outerState,
            Orientation.Vertical, ) .heightIn(min = 100.dp, maxCustomHeight) .onGloballyPositioned {
            with(density) { rootHeight.value = rootHeight.value + it.size.height.toDp() } } ) {
            Card( elevation = CardDefaults.cardElevation( defaultElevation = defaultCardElevation ),
            shape = RoundedCornerShape(roundedCornerRadiusDefault), modifier = Modifier
            .fillMaxWidth() .heightIn(min = minHeight, max = maxHeight) .background(white)
            .clickable { } .then(modifier) ) { Column(modifier = Modifier.background(white)) {
            Column( Modifier.padding(top = dimen_16_dp), verticalArrangement =
            Arrangement.spacedBy(dimen_18_dp) ) { LazyColumn( state = outerState, modifier =
            Modifier .heightIn(min = 110.dp, max = maxCustomHeight) ) { item { Row( modifier =
            Modifier .padding(bottom = 10.dp) .padding(horizontal = dimen_16_dp) ) { Text( text =
            "${questionIndex + 1}. ", style = defaultTextStyle, color = textColorDark ) HtmlText(
            text =
            "${showQuestionState.optionItemEntityState.find { it.optionItemEntity?.optionType == QuestionType.FormWithNone.name }?.optionItemEntity?.display}",
            style = defaultTextStyle, color = textColorDark, overflow = TextOverflow.Ellipsis,
            softWrap = true ) } } item { LazyVerticalGrid( userScrollEnabled = false, state =
            innerGridState, columns = GridCells.Fixed(2), modifier = Modifier .wrapContentWidth()
            .padding(horizontal = dimen_16_dp) .heightIn(min = 110.dp, max = maxCustomHeight) ) {
            itemsIndexed(optionList) { index, item -&gt; RadioButtonOptionComponent( index = index,
            selectedIndex = if (isNoneQuestionAnswered.value) { if (isNoneMarked.value) 1 else 0 }
            else -1, optionsItem = OptionItemEntity.getEmptyOptionItemEntity() .copy( display =
            item.value, sectionId = question?.sectionId ?: 0, surveyId = question?.surveyId ?: 0,
            questionId = question?.questionId ?: 0, optionType =
            showQuestionState.optionItemEntityState.find { it.optionItemEntity?.optionType ==
            QuestionType.FormWithNone.name }?.optionItemEntity?.optionType, languageId =
            question?.languageId ?: DEFAULT_LANGUAGE_ID, ), onOptionSelected = { if (isEditAllowed)
            { if (it.display?.equals(optionList.last().value) == true) { //when marked NO
            isNoneMarked.value = true isNoneQuestionAnswered.value = true } if
            (it.display?.equals(optionList.first().value) == true) { //when marked Yes
            isNoneMarked.value = false isNoneQuestionAnswered.value = true } onAnswerSelection(
            questionIndex, isNoneMarked.value, false ) } else { showCustomToast( context,
            context.getString(R.string.edit_disable_message) ) } } ) } } } item { Spacer( modifier =
            Modifier .fillMaxWidth() .height(dimen_10_dp) ) if (contests?.isNotEmpty() == true) {
            Divider( thickness = dimen_1_dp, color = lightGray2, modifier = Modifier.fillMaxWidth()
            ) ExpandableDescriptionContentComponent( questionDetailExpanded, questionIndex, contents
            = contests, subTitle = BLANK_STRING, imageClickListener = { imageTypeDescriptionContent
            -&gt; onMediaTypeDescriptionAction(
            DescriptionContentType.IMAGE_TYPE_DESCRIPTION_CONTENT, imageTypeDescriptionContent ) },
            videoLinkClicked = { videoTypeDescriptionContent -&gt; onMediaTypeDescriptionAction(
            DescriptionContentType.VIDEO_TYPE_DESCRIPTION_CONTENT, videoTypeDescriptionContent ) } )
            } } } } } } } } VerticalAnimatedVisibilityComponent( !isNoneMarked.value &amp;&amp;
            isNoneQuestionAnswered.value ) { Column { Spacer( modifier = Modifier .fillMaxWidth()
            .height(dimen_8_dp) ) BoxWithConstraints( modifier = modifier .scrollable( state =
            outerState, Orientation.Vertical, ) .heightIn(min = 100.dp, maxCustomHeight)
            .onGloballyPositioned { with(density) { rootHeight.value = rootHeight.value +
            it.size.height.toDp() } } ) { Card( elevation = CardDefaults.cardElevation(
            defaultElevation = defaultCardElevation ), shape =
            RoundedCornerShape(roundedCornerRadiusDefault), modifier = Modifier .fillMaxWidth()
            .heightIn(min = minHeight, max = maxHeight) .background(white) .clickable { }
            .then(modifier) ) { Column(modifier = Modifier.background(white)) { Column(
            Modifier.padding(top = dimen_16_dp), verticalArrangement =
            Arrangement.spacedBy(dimen_18_dp) ) { LazyColumn( state = outerState, modifier =
            Modifier .heightIn(min = 110.dp, max = maxCustomHeight) ) { item { Row( modifier =
            Modifier .padding(bottom = 10.dp) .padding(horizontal = dimen_16_dp) ) { Text( text =
            "${questionIndex + 1}.1. ", style = defaultTextStyle, color = textColorDark ) HtmlText(
            text = "${question?.questionDisplay}", style = defaultTextStyle, color = textColorDark,
            overflow = TextOverflow.Ellipsis, softWrap = true ) } } item { Spacer( modifier =
            Modifier .fillMaxWidth() .height(dimen_8_dp) ) } item { Row( modifier = Modifier
            .fillMaxWidth() .padding(dimen_10_dp), horizontalArrangement = Arrangement.SpaceBetween
            ) { Spacer( modifier = Modifier .fillMaxWidth() .weight(weight_20_percent) )
            OutlinedCTAButtonComponent( tittle = question?.questionSummary, isActive =
            isEditAllowed, modifier = Modifier .fillMaxWidth() .weight(weight_60_percent) ) { if
            (isEditAllowed) { onAnswerSelection( questionIndex, false, true ) } else {
            showCustomToast( context, context.getString(R.string.edit_disable_message) ) } } Spacer(
            modifier = Modifier .fillMaxWidth() .weight(weight_20_percent) ) } } if (itemCount &gt;
            0) { if (!summaryValue.equals(BLANK_STRING) &amp;&amp; tagList.findTagForId(
            question?.tag ?: 0 ).equals("Livelihood Sources") ) { item { Text( text =
            buildAnnotatedString { withStyle( style = SpanStyle( fontFamily = NotoSans, fontWeight =
            FontWeight.SemiBold, fontSize = 14.sp ) ) {
            append(stringResource(R.string.total_annual_income_label)) } withStyle( style =
            SpanStyle( fontFamily = NotoSans, fontWeight = FontWeight.Bold, fontSize = 14.sp ) ) {
            append(summaryValue) } }, color = blueDark, style = TextStyle( fontFamily = NotoSans,
            fontWeight = FontWeight.SemiBold, fontSize = 14.sp ), textAlign = TextAlign.Center,
            modifier = Modifier.padding(dimen_16_dp) ) } } item { SummaryCardComponent( itemCount,
            question ) { onViewSummaryClicked(it) } } } item { Spacer( modifier = Modifier
            .fillMaxWidth() .padding(bottom = 10.dp) ) } } } } } } } } } }
        </ID>
        <ID>ModifierWithoutDefault:DialogComponent.kt$modifier</ID>
        <ID>ModifierWithoutDefault:DropDownWithTitleComponent.kt$modifier</ID>
        <ID>ModifierWithoutDefault:Media.kt$modifier</ID>
        <ID>ModifierWithoutDefault:NavHomeGraph.kt$modifier</ID>
        <ID>ModifierWithoutDefault:ToolbarComponent.kt$modifier</ID>
        <ID>ModifierWithoutDefault:ToolbarWithMenuComponent.kt$modifier</ID>
        <ID>MutableParams:AllSurveyeeListTab.kt$isSelectionEnabled</ID>
        <ID>MutableParams:CustomBannerComponents.kt$showBanner</ID>
        <ID>MutableParams:OtpInputField.kt$autoReadOtp</ID>
        <ID>MutableParams:QuestionType.kt$questionList</ID>
        <ID>NestedBlockDepth:BaseLineQnToCSV.kt$fun List&lt;SaveAnswerEventForFormQuestionDto&gt;.toCsv(
            sectionList: List&lt;SectionEntity&gt;, didiDetailList: List&lt;SurveyeeEntity&gt;,
            optionItemDao: OptionItemDao, questionEntityDao: QuestionEntityDao,
            uniqueUserIdentifier: String ): List&lt;BaseLineQnATableCSV&gt;
        </ID>
        <ID>NestedBlockDepth:BaselineLogger.kt$LogWriter$fun cleanup(checkForSize: Boolean)</ID>
        <ID>NestedBlockDepth:ControllerState.kt$ControllerState$fun seekTo(positionMs: Long)</ID>
        <ID>
            NestedBlockDepth:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$override
            suspend fun getSectionStatus()
        </ID>
        <ID>
            NestedBlockDepth:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$private
            fun saveQuestionAndOptionsToDb( question: QuestionList?, section: Sections,
            surveyResponseModel: SurveyResponseModel, languageId: Int, isSubQuestionList: Boolean =
            false, parentId: Int = 0 )
        </ID>
        <ID>
            NestedBlockDepth:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$private
            fun saveSurveyAnswerToDb(questionAnswerResponseModels: List&lt;QuestionAnswerResponseModel&gt;?)
        </ID>
        <ID>NestedBlockDepth:DeviceInfoUtils.kt$DeviceInfoUtils$fun getConnectionType(context:
            Context): String
        </ID>
        <ID>NestedBlockDepth:DeviceInfoUtils.kt$DeviceInfoUtils$fun getIPAddress(useIPv4: Boolean):
            String
        </ID>
        <ID>NestedBlockDepth:DeviceInfoUtils.kt$DeviceInfoUtils$fun hasNetwork(context: Context):
            Boolean
        </ID>
        <ID>NestedBlockDepth:DeviceInfoUtils.kt$DeviceInfoUtils$private fun
            getMACAddress(interfaceName: String?): String
        </ID>
        <ID>NestedBlockDepth:EventWriterHelperImpl.kt$EventWriterHelperImpl$override suspend fun
            recheckMATStatus()
        </ID>
        <ID>NestedBlockDepth:EventWriterHelperImpl.kt$EventWriterHelperImpl$private suspend fun
            regenerateFromResponseEvent(forExcel: Boolean = false): List&lt;Events&gt;
        </ID>
        <ID>NestedBlockDepth:EventWriterHelperImpl.kt$EventWriterHelperImpl$suspend fun
            getOptionsInDefaultLanguage( surveyId: Int, sectionId: Int, questionId: Int ): List&lt;OptionItemEntityState&gt;
        </ID>
        <ID>NestedBlockDepth:FetchCastesFromNetworkUseCase.kt$FetchCastesFromNetworkUseCase$suspend
            operator fun invoke(loadAllCastes: Boolean)
        </ID>
        <ID>
            NestedBlockDepth:FetchContentDataFromNetworkUseCase.kt$FetchContentDataFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>
            NestedBlockDepth:FetchMissionDataFromNetworkUseCase.kt$FetchMissionDataFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>
            NestedBlockDepth:FetchSurveyeeListFromNetworkUseCase.kt$FetchSurveyeeListFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>NestedBlockDepth:FormCardMatching.kt$FormCardMatching.Companion$fun
            checkCardCondition(condition: String?, matchEqual: Boolean = false): Boolean
        </ID>
        <ID>
            NestedBlockDepth:FormResponseSummaryScreenViewModel.kt$FormResponseSummaryScreenViewModel$fun
            getOptionItemListWithConditionals(): List&lt;OptionItemEntity&gt;
        </ID>
        <ID>NestedBlockDepth:GetSummaryFileRepositoryImpl.kt$GetSummaryFileRepositoryImpl$override
            fun writeFileForTheSummaryData( uniqueUserIdentifier: String, mobileNo: String,
            fileNameWithoutExtension: String, fileNameWithExtension: String, content: List&lt;SummaryFileDto&gt;,
            insertBlankRowForEmptyEntry: Boolean ): Pair&lt;String, Uri?&gt;?
        </ID>
        <ID>NestedBlockDepth:LocationUtil.kt$LocationUtil$fun getLocation(context: Activity):
            LocationCoordinates?
        </ID>
        <ID>NestedBlockDepth:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$override
            suspend fun getSections( sectionId: Int, surveyId: Int, languageId: Int ):
            SectionListItem
        </ID>
        <ID>NestedBlockDepth:QuestionScreenViewModel.kt$QuestionScreenViewModel$fun
            getOptionItemListWithConditionals(questionId: Int): List&lt;OptionItemEntity&gt;
        </ID>
        <ID>NestedBlockDepth:QuestionScreenViewModel.kt$QuestionScreenViewModel$fun
            updateOptionStateForCondition( conditionResult: Boolean, conditionsDto: ConditionsDto?,
            optionItemEntity: OptionItemEntity )
        </ID>
        <ID>NestedBlockDepth:QuestionScreenViewModel.kt$QuestionScreenViewModel$override fun &lt;T&gt;
            onEvent(event: T)
        </ID>
        <ID>NestedBlockDepth:QuestionScreenViewModel.kt$QuestionScreenViewModel$override fun
            updateQuestionStateForCondition(conditionResult: Boolean, conditionsDto: ConditionsDto?)
        </ID>
        <ID>NestedBlockDepth:QuestionScreenViewModel.kt$QuestionScreenViewModel$private fun
            updateQuestionEntityStateForConditionalQuestions(questionEntityStateList: List&lt;QuestionEntityState&gt;)
        </ID>
        <ID>NestedBlockDepth:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$override fun
            &lt;T&gt; onEvent(event: T)
        </ID>
        <ID>NestedBlockDepth:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$override fun
            updateQuestionStateForCondition( conditionResult: Boolean, conditionsDto: ConditionsDto?
            )
        </ID>
        <ID>NestedBlockDepth:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$private fun
            getOptionItemEntityState( surveyId: Int, didiId: Int, sectionId: Int, questionId: Int )
        </ID>
        <ID>NestedBlockDepth:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$private fun
            updateAnsweredConditionalQuestion()
        </ID>
        <ID>NestedBlockDepth:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$private
            suspend fun getOptionsInDefaultLanguage( surveyId: Int, sectionId: Int, questionId: Int
            )
        </ID>
        <ID>NestedBlockDepth:SearchScreenViewModel.kt$SearchScreenViewModel$private fun
            onSearchTextChange(queryTerm: String, tabFilter: SearchTab)
        </ID>
        <ID>
            NestedBlockDepth:SectionListScreenRepositoryImpl.kt$SectionListScreenRepositoryImpl$override
            fun getSectionListForSurvey(surveyId: Int, languageId: Int): List&lt;SectionListItem&gt;
        </ID>
        <ID>
            NestedBlockDepth:SectionListScreenRepositoryImpl.kt$SectionListScreenRepositoryImpl$override
            fun getSectionsListForDidi( didiId: Int, surveyId: Int, languageId: Int ): List&lt;SectionListItem&gt;
        </ID>
        <ID>
            NestedBlockDepth:SurveyeeListScreenRepositoryImpl.kt$SurveyeeListScreenRepositoryImpl$override
            suspend fun getSurveyeeListFromNetwork(): Boolean
        </ID>
        <ID>NestedBlockDepth:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$override fun
            performSearchQuery( queryTerm: String, isFilterApplied: Boolean, fromScreen: String )
        </ID>
        <ID>NestedBlockDepth:Utils.kt$fun openShareSheet(fileUriList: ArrayList&lt;Uri&gt;?, title:
            String, type: String)
        </ID>
        <ID>PackageNaming:AlertDialogComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:AllSurveyeeListTab.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.presentation
        </ID>
        <ID>PackageNaming:ApiStatusEvent.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_events
        </ID>
        <ID>PackageNaming:AppImageViewComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:AppLogoWithTextViewComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:BaseLineStartScreen.kt$package
            com.nrlm.baselinesurvey.ui.start_screen.presentation
        </ID>
        <ID>PackageNaming:BaseLineStartViewModel.kt$package
            com.nrlm.baselinesurvey.ui.start_screen.viewmodel
        </ID>
        <ID>PackageNaming:ButtonUtil.kt$package com.nrlm.baselinesurvey.ui.common_components</ID>
        <ID>PackageNaming:CTAButtonComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:CalculationResultComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:CasteListRepository.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.commo_repository
        </ID>
        <ID>PackageNaming:CasteListRespositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.commo_repository
        </ID>
        <ID>PackageNaming:CircularImageView.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ClearLocalDBExportUseCase.kt$package
            com.nrlm.baselinesurvey.ui.backup.domain.use_case
        </ID>
        <ID>PackageNaming:ClearLocalDBUseCase.kt$package
            com.nrlm.baselinesurvey.ui.setting.domain.use_case
        </ID>
        <ID>PackageNaming:CommonProfileScreen.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_profile
        </ID>
        <ID>PackageNaming:CommonSettingScreen.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_setting
        </ID>
        <ID>PackageNaming:ComplexSearchComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:CustomAnimatedVisibilityComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:CustomBannerComponents.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:CustomOutlineTextField.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:CustomSnackBarViewState.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:CustomSnackbarViewComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:DataLoadingScreenComponent.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.presentation
        </ID>
        <ID>PackageNaming:DataLoadingScreenRepository.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.repository
        </ID>
        <ID>PackageNaming:DataLoadingScreenRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.repository
        </ID>
        <ID>PackageNaming:DataLoadingScreenViewModel.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.viewmodel
        </ID>
        <ID>PackageNaming:DeleteFormQuestionOptionResponseUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.use_case
        </ID>
        <ID>PackageNaming:DeleteFormQuestionResponseUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.use_case
        </ID>
        <ID>PackageNaming:DescriptionContentComponent.kt$package
            com.nrlm.baselinesurvey.ui.description_component.presentation
        </ID>
        <ID>PackageNaming:DialogComponent.kt$package com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:DialogEvents.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_events
        </ID>
        <ID>PackageNaming:DropDownWithTitleComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:EditTextWithTitleComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:EmptySpacerForList.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:EventWriterEvents.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_events
        </ID>
        <ID>PackageNaming:EventWriterRepository.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.commo_repository
        </ID>
        <ID>PackageNaming:EventsWriterRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.commo_repository
        </ID>
        <ID>PackageNaming:EventsWriterUserCase.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.common_use_case
        </ID>
        <ID>PackageNaming:ExpandableDescriptionContentComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ExportImportUseCase.kt$package
            com.nrlm.baselinesurvey.ui.backup.domain.use_case
        </ID>
        <ID>PackageNaming:FetchCastesFromNetworkUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FetchContentDataFromNetworkUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FetchDataEvent.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_events
        </ID>
        <ID>PackageNaming:FetchDataUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FetchLanguageFromNetworkConfigUseCase.kt$package
            com.nrlm.baselinesurvey.ui.splash.domain.use_case
        </ID>
        <ID>PackageNaming:FetchMissionDataFromNetworkUseCase.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FetchSectionStatusFromNetworkUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FetchSurveyAnswerFromNetworkUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FetchSurveyFromNetworkUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FetchSurveyeeListFromNetworkUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FetchUserDetailFromNetworkUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FinalStepCompletionScreen.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:FormQuestionResponseRepository.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.domain.repository
        </ID>
        <ID>PackageNaming:FormQuestionResponseRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.domain.repository
        </ID>
        <ID>PackageNaming:FormQuestionScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FormQuestionSummaryScreen.kt$package
            com.nrlm.baselinesurvey.ui.form_response_summary_screen.presentation
        </ID>
        <ID>PackageNaming:FormResponseCard.kt$package com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:FormResponseSummaryScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.form_response_summary_screen.domain.use_case
        </ID>
        <ID>PackageNaming:FormResponseSummaryScreenViewModel.kt$package
            com.nrlm.baselinesurvey.ui.form_response_summary_screen.viewmodel
        </ID>
        <ID>PackageNaming:FormTypeOption.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.domain.entity
        </ID>
        <ID>PackageNaming:FormTypeQuestionComponent.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation.questionComponent
        </ID>
        <ID>PackageNaming:FormTypeQuestionScreen.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.presentation
        </ID>
        <ID>PackageNaming:FormWithNoneTypeQuestionComponent.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation.questionComponent
        </ID>
        <ID>PackageNaming:GenerateOtpUseCase.kt$package com.nrlm.baselinesurvey.ui.auth.use_case
        </ID>
        <ID>PackageNaming:GetActivityStateFromDBUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetCasteListUseCase.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.common_use_case
        </ID>
        <ID>PackageNaming:GetExportOptionListUseCase.kt$package
            com.nrlm.baselinesurvey.ui.backup.domain.use_case
        </ID>
        <ID>PackageNaming:GetFormQuestionResponseUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetFromPageUseCase.kt$package
            com.nrlm.baselinesurvey.ui.language.domain.use_case
        </ID>
        <ID>PackageNaming:GetIdentityNumberUseCase.kt$package
            com.nrlm.baselinesurvey.ui.profile.domain.use_case
        </ID>
        <ID>PackageNaming:GetLanguageListFromDbUseCase.kt$package
            com.nrlm.baselinesurvey.ui.language.domain.use_case
        </ID>
        <ID>PackageNaming:GetLanguageScreenOpenFromUserCase.kt$package
            com.nrlm.baselinesurvey.ui.language.domain.use_case
        </ID>
        <ID>PackageNaming:GetMissionActivitiesFromDBUseCase.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.domain.usecase
        </ID>
        <ID>PackageNaming:GetMissionListFromDbUseCase.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetMobileNumberUseCase.kt$package
            com.nrlm.baselinesurvey.ui.auth.use_case
        </ID>
        <ID>PackageNaming:GetPendingTaskCountLiveUseCase.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.domain.usecase
        </ID>
        <ID>PackageNaming:GetProfileMobileNumberUseCase.kt$package
            com.nrlm.baselinesurvey.ui.profile.domain.use_case
        </ID>
        <ID>PackageNaming:GetSectionAnswersUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetSectionListForSurveyUseCase.kt$package
            com.nrlm.baselinesurvey.ui.search.use_case
        </ID>
        <ID>PackageNaming:GetSectionListUseCase.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetSectionProgressForDidiUseCase.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetSectionUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetSectionsListUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetSelectedVillageUseCase.kt$package
            com.nrlm.baselinesurvey.ui.language.domain.use_case
        </ID>
        <ID>PackageNaming:GetSummaryFileUseCase.kt$package
            com.nrlm.baselinesurvey.ui.setting.domain.use_case
        </ID>
        <ID>PackageNaming:GetSurveyeeDetailsUserCase.kt$package
            com.nrlm.baselinesurvey.ui.start_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetSurveyeeListUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetSurvyeDetails.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetTaskDetailsFromDbUseCase.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.domain.use_case
        </ID>
        <ID>PackageNaming:GetUserDetailsExportUseCase.kt$package
            com.nrlm.baselinesurvey.ui.backup.domain.use_case
        </ID>
        <ID>PackageNaming:GetUserDetailsUseCase.kt$package
            com.nrlm.baselinesurvey.ui.setting.domain.use_case
        </ID>
        <ID>PackageNaming:GetUserEmailUseCase.kt$package
            com.nrlm.baselinesurvey.ui.profile.domain.use_case
        </ID>
        <ID>PackageNaming:GetUserNameUseCase.kt$package
            com.nrlm.baselinesurvey.ui.profile.domain.use_case
        </ID>
        <ID>PackageNaming:GetVillageDetailUseCase.kt$package
            com.nrlm.baselinesurvey.ui.language.domain.use_case
        </ID>
        <ID>PackageNaming:GridTypeComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ImageExpanderDialogComponent.kt$package
            com.nrlm.baselinesurvey.ui.description_component.presentation
        </ID>
        <ID>PackageNaming:IncrementDecrementView.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation.questionComponent
        </ID>
        <ID>PackageNaming:IsLoggedInUseCase.kt$package
            com.nrlm.baselinesurvey.activity.domain.use_case
        </ID>
        <ID>PackageNaming:ItemType.kt$package com.nrlm.baselinesurvey.ui.Constants</ID>
        <ID>PackageNaming:LanguageScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.language.domain.use_case
        </ID>
        <ID>PackageNaming:LinkTextButtonWithIcon.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ListTypeComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:LoaderComponent.kt$package com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:LoaderComponentWithText.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:LoggedInUseCase.kt$package
            com.nrlm.baselinesurvey.ui.splash.domain.use_case
        </ID>
        <ID>PackageNaming:LoginScreenUseCase.kt$package com.nrlm.baselinesurvey.ui.auth.use_case
        </ID>
        <ID>PackageNaming:LogoutUseCase.kt$package
            com.nrlm.baselinesurvey.ui.setting.domain.use_case
        </ID>
        <ID>PackageNaming:MainActivityUseCase.kt$package
            com.nrlm.baselinesurvey.activity.domain.use_case
        </ID>
        <ID>PackageNaming:MiscQuestionBoxComponent.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation.questionComponent
        </ID>
        <ID>PackageNaming:MissionScreenRepository.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.domain.repository
        </ID>
        <ID>PackageNaming:MissionScreenRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.domain.repository
        </ID>
        <ID>PackageNaming:MissionScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.domain.use_case
        </ID>
        <ID>PackageNaming:MissionScreen_1.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.presentation
        </ID>
        <ID>PackageNaming:MissionSummaryScreen.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.presentation
        </ID>
        <ID>PackageNaming:MissionSummaryScreenRepository.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.domain.repository
        </ID>
        <ID>PackageNaming:MissionSummaryScreenRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.domain.repository
        </ID>
        <ID>PackageNaming:MissionSummaryScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.domain.usecase
        </ID>
        <ID>PackageNaming:MissionSummaryViewModel.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.viewModel
        </ID>
        <ID>PackageNaming:MissionViewModel.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.viewmodel
        </ID>
        <ID>PackageNaming:MissonRowScreen.kt$package
            com.nrlm.baselinesurvey.ui.mission_screen.presentation
        </ID>
        <ID>PackageNaming:ModelBottomSheetDescriptionContentComponent.kt$package
            com.nrlm.baselinesurvey.ui.description_component.presentation
        </ID>
        <ID>PackageNaming:MoveSurveyeeToThisWeekUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:MultiSelectDropdown.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:NestedLazyList.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation.questionComponent
        </ID>
        <ID>PackageNaming:NestedLazyListForFormQuestions.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.presentation.component
        </ID>
        <ID>PackageNaming:NetworkBannerComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:OptionItemEntityState.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.presentation.component
        </ID>
        <ID>PackageNaming:OtpInputField.kt$package com.nrlm.baselinesurvey.ui.common_components</ID>
        <ID>PackageNaming:OtpVerificationUseCase.kt$package
            com.nrlm.baselinesurvey.ui.auth.use_case
        </ID>
        <ID>PackageNaming:OtpView.kt$package com.nrlm.baselinesurvey.ui.common_components</ID>
        <ID>PackageNaming:OutlineButtonWithIconComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:PrimarySecandaryButtonBoxPreFilled.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ProfileBSUseCase.kt$package
            com.nrlm.baselinesurvey.ui.profile.domain.use_case
        </ID>
        <ID>PackageNaming:QuestionEntityState.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation
        </ID>
        <ID>PackageNaming:QuestionScreen.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation
        </ID>
        <ID>PackageNaming:QuestionScreenEvents.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation
        </ID>
        <ID>PackageNaming:QuestionScreenHandler.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation
        </ID>
        <ID>PackageNaming:QuestionScreenRepository.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.repository
        </ID>
        <ID>PackageNaming:QuestionScreenRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.repository
        </ID>
        <ID>PackageNaming:QuestionScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.use_case
        </ID>
        <ID>PackageNaming:QuestionScreenViewModel.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.viewmodel
        </ID>
        <ID>PackageNaming:QuestionType.kt$package com.nrlm.baselinesurvey.ui.Constants</ID>
        <ID>PackageNaming:QuestionType.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation.questionComponent
        </ID>
        <ID>PackageNaming:QuestionTypeEvent.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.presentation
        </ID>
        <ID>PackageNaming:QuestionTypeScreenViewModel.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.viewmodel
        </ID>
        <ID>PackageNaming:RadioButtonOptionComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:RadioOptionTypeComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:RadioQuestionBoxComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ResendOtpUseCase.kt$package com.nrlm.baselinesurvey.ui.auth.use_case</ID>
        <ID>PackageNaming:SaveAccessTokenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.auth.use_case
        </ID>
        <ID>PackageNaming:SaveFormQuestionResponseUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.domain.use_case
        </ID>
        <ID>PackageNaming:SaveLanguageConfigUseCase.kt$package
            com.nrlm.baselinesurvey.ui.splash.domain.use_case
        </ID>
        <ID>PackageNaming:SaveLanguageOpenFromUseCase.kt$package
            com.nrlm.baselinesurvey.ui.splash.domain.use_case
        </ID>
        <ID>PackageNaming:SaveLanguageScreenOpenFromUseCase.kt$package
            com.nrlm.baselinesurvey.ui.setting.domain.use_case
        </ID>
        <ID>PackageNaming:SaveMobileNumberUseCase.kt$package
            com.nrlm.baselinesurvey.ui.auth.use_case
        </ID>
        <ID>PackageNaming:SaveQuestionImageUseCase.kt$package
            com.nrlm.baselinesurvey.ui.splash.domain.use_case
        </ID>
        <ID>PackageNaming:SaveSectionAnswerUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.use_case
        </ID>
        <ID>PackageNaming:SaveSelectedLanguageUseCase.kt$package
            com.nrlm.baselinesurvey.ui.language.domain.use_case
        </ID>
        <ID>PackageNaming:SaveSelectedVillageUseCase.kt$package
            com.nrlm.baselinesurvey.ui.language.domain.use_case
        </ID>
        <ID>PackageNaming:SaveSurveyeeImagePathUseCase.kt$package
            com.nrlm.baselinesurvey.ui.start_screen.domain.use_case
        </ID>
        <ID>PackageNaming:SearchEvent.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_events
        </ID>
        <ID>PackageNaming:SearchScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.search.use_case
        </ID>
        <ID>PackageNaming:SearchTab.kt$package com.nrlm.baselinesurvey.ui.common_components</ID>
        <ID>PackageNaming:SearchUseCase.kt$package com.nrlm.baselinesurvey.ui.search.use_case</ID>
        <ID>PackageNaming:SearchWithFilterComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:SectionItemComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:SectionListScreen.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.presentation
        </ID>
        <ID>PackageNaming:SectionListScreenRepository.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.domain.repository
        </ID>
        <ID>PackageNaming:SectionListScreenRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.domain.repository
        </ID>
        <ID>PackageNaming:SectionListScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.domain.use_case
        </ID>
        <ID>PackageNaming:SectionListScreenViewModel.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.viewmode
        </ID>
        <ID>PackageNaming:SectionScreenEvent.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.presentation
        </ID>
        <ID>PackageNaming:SettingBSUserCase.kt$package
            com.nrlm.baselinesurvey.ui.setting.domain.use_case
        </ID>
        <ID>PackageNaming:SplashScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.splash.domain.use_case
        </ID>
        <ID>PackageNaming:StartScreenRepository.kt$package
            com.nrlm.baselinesurvey.ui.start_screen.domain.repository
        </ID>
        <ID>PackageNaming:StartScreenRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.start_screen.domain.repository
        </ID>
        <ID>PackageNaming:StartSurveyScreenEvents.kt$package
            com.nrlm.baselinesurvey.ui.start_screen.presentation
        </ID>
        <ID>PackageNaming:StartSurveyScreenUserCase.kt$package
            com.nrlm.baselinesurvey.ui.start_screen.domain.use_case
        </ID>
        <ID>PackageNaming:StepCompletionScreen.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:StepsBox.kt$package com.nrlm.baselinesurvey.ui.common_components</ID>
        <ID>PackageNaming:SubQuestionComponent.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.presentation.questionComponent
        </ID>
        <ID>PackageNaming:SummaryCardComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:SurveyStateEvents.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_events
        </ID>
        <ID>PackageNaming:SurveyStateRepository.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.commo_repository
        </ID>
        <ID>PackageNaming:SurveyStateRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.commo_repository
        </ID>
        <ID>PackageNaming:SurveyeeCardComponent.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.presentation
        </ID>
        <ID>PackageNaming:SurveyeeCardWithTolaFilterComponent.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.presentation
        </ID>
        <ID>PackageNaming:SurveyeeListEvents.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.presentation
        </ID>
        <ID>PackageNaming:SurveyeeListScreen.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.presentation
        </ID>
        <ID>PackageNaming:SurveyeeListScreenActions.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.presentation
        </ID>
        <ID>PackageNaming:SurveyeeListScreenRepository.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.repository
        </ID>
        <ID>PackageNaming:SurveyeeListScreenRepositoryImpl.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.repository
        </ID>
        <ID>PackageNaming:SurveyeeScreenUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:SurveyeeScreenViewModel.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.viewmodel
        </ID>
        <ID>PackageNaming:SwitchComponent.kt$package com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:TextWithReadMoreComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ThisWeekSurveyeeListTab.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.presentation
        </ID>
        <ID>PackageNaming:TimePickerComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ToolbarComponent.kt$package com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:ToolbarWithMenuComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:TypeDropDownComponent.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.presentation.component
        </ID>
        <ID>PackageNaming:TypeMultiSelectedDropDownComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:UpdateActivityStatusUseCase.kt$package
            com.nrlm.baselinesurvey.ui.surveyee_screen.domain.use_case
        </ID>
        <ID>PackageNaming:UpdateFormQuestionResponseUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_type_screen.domain.use_case
        </ID>
        <ID>PackageNaming:UpdateMisisonState.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.domain.usecase
        </ID>
        <ID>PackageNaming:UpdateMissionStatusUseCase.kt$package
            com.nrlm.baselinesurvey.ui.mission_summary_screen.domain.usecase
        </ID>
        <ID>PackageNaming:UpdateSectionProgressUseCase.kt$package
            com.nrlm.baselinesurvey.ui.question_screen.domain.use_case
        </ID>
        <ID>PackageNaming:UpdateSubjectStatusUseCase.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.domain.use_case
        </ID>
        <ID>PackageNaming:UpdateSurveyStateUserCase.kt$package
            com.nrlm.baselinesurvey.ui.common_components.common_domain.common_use_case
        </ID>
        <ID>PackageNaming:UpdateTaskStatusUseCase.kt$package
            com.nrlm.baselinesurvey.ui.section_screen.domain.use_case
        </ID>
        <ID>PackageNaming:ValidateOtpUseCase.kt$package com.nrlm.baselinesurvey.ui.auth.use_case
        </ID>
        <ID>PackageNaming:VideoPlayer.kt$package
            com.nrlm.baselinesurvey.ui.video_player.presentation
        </ID>
        <ID>PackageNaming:YesNoButtonComponent.kt$package
            com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PackageNaming:keyboardAsState.kt$package com.nrlm.baselinesurvey.ui.common_components
        </ID>
        <ID>PrintStackTrace:ExportImportRepositoryImpl.kt$ExportImportRepositoryImpl$ex</ID>
        <ID>RememberMissing:BaseLineStartScreen.kt$derivedStateOf {
            (baseLineStartViewModel.photoUri.value != Uri.EMPTY) &amp;&amp;
            (baseLineStartViewModel.isVoterCard.value != -1) &amp;&amp;
            (baseLineStartViewModel.phoneNumber.value.length == 10) &amp;&amp;
            ((baseLineStartViewModel.isAdharCard.value != -1)) }
        </ID>
        <ID>RememberMissing:CalculationResultComponent.kt$mutableStateOf(defaultValue)</ID>
        <ID>RememberMissing:OtpView.kt$derivedStateOf { otpValue.length == 6 }</ID>
        <ID>RememberMissing:QuestionScreenHandler.kt$mutableStateOf(sectionId)</ID>
        <ID>RethrowCaughtException:ErrorInterceptor.kt$ErrorInterceptor$throw exception</ID>
        <ID>ReturnCount:BaseViewModel.kt$BaseViewModel$private fun parseException(e: Throwable):
            ErrorModel
        </ID>
        <ID>ReturnCount:BaselineLogger.kt$LogWriter$suspend fun buildLogFile(appContext:
            Context,onFailed:()-&gt;Unit): File?
        </ID>
        <ID>ReturnCount:CalculatorUtils.kt$CalculatorUtils$private fun applyOperator(operatorX:
            Char, a: Float, b: Float): Float
        </ID>
        <ID>ReturnCount:DeviceInfoUtils.kt$DeviceInfoUtils$fun getIPAddress(useIPv4: Boolean):
            String
        </ID>
        <ID>ReturnCount:DeviceInfoUtils.kt$DeviceInfoUtils$private fun getMACAddress(interfaceName:
            String?): String
        </ID>
        <ID>ReturnCount:EventsWriterRepositoryImpl.kt$EventsWriterRepositoryImpl$override suspend
            fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ):
            Events?
        </ID>
        <ID>
            ReturnCount:FetchContentDataFromNetworkUseCase.kt$FetchContentDataFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>
            ReturnCount:FetchMissionDataFromNetworkUseCase.kt$FetchMissionDataFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>ReturnCount:FetchSurveyFromNetworkUseCase.kt$FetchSurveyFromNetworkUseCase$suspend
            operator fun invoke(surveyRequestBodyModel: SurveyRequestBodyModel): Boolean
        </ID>
        <ID>
            ReturnCount:FetchSurveyeeListFromNetworkUseCase.kt$FetchSurveyeeListFromNetworkUseCase$suspend
            operator fun invoke(): Boolean
        </ID>
        <ID>ReturnCount:FormCardMatching.kt$FormCardMatching.Companion$fun
            checkCardCondition(condition: String?, matchEqual: Boolean = false): Boolean
        </ID>
        <ID>ReturnCount:FormCardMatching.kt$FormCardMatching.Companion$fun
            getStringToCompare(display: String?, matchingKey: FormCardMatching, matchEqual: Boolean
            = false): String
        </ID>
        <ID>ReturnCount:LocationUtil.kt$LocationUtil$fun getLocation(context: Activity):
            LocationCoordinates?
        </ID>
        <ID>ReturnCount:SectionItemComponent.kt$fun getIcon(index: String): Int</ID>
        <ID>
            ReturnCount:SurveyeeListScreenRepositoryImpl.kt$SurveyeeListScreenRepositoryImpl$override
            suspend fun getSurveyeeListFromNetwork(): Boolean
        </ID>
        <ID>ReturnCount:TimePickerComponent.kt$@Composable fun getFirstTitle(typePicker: String):
            String
        </ID>
        <ID>ReturnCount:TimePickerComponent.kt$@Composable fun getSecondTitle(typePicker: String):
            String
        </ID>
        <ID>ReturnCount:TimePickerComponent.kt$fun getDelimiter(typePicker: String): String</ID>
        <ID>ReturnCount:TimePickerComponent.kt$fun getPickerValue(typePicker: String, firstValue:
            String, secondValue: String): String
        </ID>
        <ID>ReturnCount:TimePickerComponent.kt$fun getSecondDefaultValue(typePicker: String):
            String
        </ID>
        <ID>ReturnCount:TimePickerComponent.kt$fun getSources(typePicker: String): List&lt;ValuesDto&gt;</ID>
        <ID>ReturnCount:TimePickerComponent.kt$fun getTypePicker(questionType: String): String?</ID>
        <ID>ReturnCount:Utils.kt$fun
            ConditionsDto.calculateResultForFormula(formQuestionResponseEntity: List&lt;FormQuestionResponseEntity&gt;):
            String
        </ID>
        <ID>ReturnCount:Utils.kt$fun
            ConditionsDto.checkConditionForMultiSelectDropDown(userInputValue: List&lt;String&gt;):
            Boolean
        </ID>
        <ID>ReturnCount:Utils.kt$fun List&lt;InputTypeQuestionAnswerEntity&gt;.convertInputTypeQuestionToEventOptionItemDto(
            questionId: Int, questionType: QuestionType, optionsItemEntity: List&lt;OptionItemEntityState&gt;
            ): List&lt;SaveAnswerEventOptionItemDto&gt;
        </ID>
        <ID>ReturnCount:Utils.kt$fun formatHrsYearEventData(selectedValue: String): String</ID>
        <ID>SerialVersionUIDInSerializableClass:Tuple4.kt$Tuple4&lt;out A, out B, out C, out D&gt; :
            Serializable
        </ID>
        <ID>SwallowedException:BaselineLogger.kt$LogWriter$ex: Exception</ID>
        <ID>SwallowedException:CalculatorUtils.kt$CalculatorUtils$ex:Exception</ID>
        <ID>SwallowedException:DeviceInfoUtils.kt$DeviceInfoUtils$ex: Exception</ID>
        <ID>SwallowedException:Utils.kt$ex: Exception</ID>
        <ID>SwallowedException:Utils.kt$ex:Exception</ID>
        <ID>ThrowingExceptionsWithoutMessageOrCause:Media.kt$IllegalStateException()</ID>
        <ID>TooGenericExceptionCaught:BaselineApplication.kt$BaselineApplication.Companion$ex:
            Throwable
        </ID>
        <ID>TooGenericExceptionCaught:BaselineCore.kt$BaselineCore$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:BaselineLogger.kt$LogWriter$e: Exception</ID>
        <ID>TooGenericExceptionCaught:BaselineLogger.kt$LogWriter$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:BaselineLogger.kt$LogWriter$fault: Exception</ID>
        <ID>TooGenericExceptionCaught:BaselineLogger.kt$LogWriter$fault: Throwable</ID>
        <ID>TooGenericExceptionCaught:CalculatorUtils.kt$CalculatorUtils$ex:Exception</ID>
        <ID>
            TooGenericExceptionCaught:ClearLocalDBExportUseCase.kt$ClearLocalDBExportUseCase$exception:Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:ClearLocalDBUseCase.kt$ClearLocalDBUseCase$exception:Exception
        </ID>
        <ID>TooGenericExceptionCaught:CurlLoggingInterceptor.kt$CurlLoggingInterceptor$e:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$ecxpetion:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$exception:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:DataLoadingScreenViewModel.kt$DataLoadingScreenViewModel$ex:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:DeviceInfoUtils.kt$DeviceInfoUtils$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:ErrorInterceptor.kt$ErrorInterceptor$exception: Exception</ID>
        <ID>
            TooGenericExceptionCaught:EventsWriterRepositoryImpl.kt$EventsWriterRepositoryImpl$exception:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:ExportImportRepositoryImpl.kt$ExportImportRepositoryImpl$ex:Exception
        </ID>
        <ID>TooGenericExceptionCaught:ExportImportViewModel.kt$ExportImportViewModel$e: Exception
        </ID>
        <ID>TooGenericExceptionCaught:ExportImportViewModel.kt$ExportImportViewModel$e:Exception
        </ID>
        <ID>TooGenericExceptionCaught:ExportImportViewModel.kt$ExportImportViewModel$ex:Exception
        </ID>
        <ID>TooGenericExceptionCaught:ExportImportViewModel.kt$ExportImportViewModel$exception:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:FetchCastesFromNetworkUseCase.kt$FetchCastesFromNetworkUseCase$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:FetchContentDataFromNetworkUseCase.kt$FetchContentDataFromNetworkUseCase$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:FetchMissionDataFromNetworkUseCase.kt$FetchMissionDataFromNetworkUseCase$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:FetchSectionStatusFromNetworkUseCase.kt$FetchSectionStatusFromNetworkUseCase$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:FetchSurveyAnswerFromNetworkUseCase.kt$FetchSurveyAnswerFromNetworkUseCase$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:FetchSurveyFromNetworkUseCase.kt$FetchSurveyFromNetworkUseCase$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:FetchSurveyeeListFromNetworkUseCase.kt$FetchSurveyeeListFromNetworkUseCase$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:FetchUserDetailFromNetworkUseCase.kt$FetchUserDetailFromNetworkUseCase$ex:
            Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:GetSummaryFileRepositoryImpl.kt$GetSummaryFileRepositoryImpl$ex:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:GridTypeComponent.kt$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:LanguageScreenComponent.kt$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:LocationUtil.kt$LocationUtil$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:LogoutUseCase.kt$LogoutUseCase$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:NestedLazyList.kt$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:NetworkModule.kt$NetworkModule$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:NudgeBaselineDatabase.kt$NudgeBaselineDatabase.Companion$t:
            Throwable
        </ID>
        <ID>TooGenericExceptionCaught:OtpVerificationViewModel.kt$OtpVerificationViewModel$ex:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:QuestionScreen.kt$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:QuestionScreenViewModel.kt$QuestionScreenViewModel$ex:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$ex:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:SectionListScreenViewModel.kt$SectionListScreenViewModel$ex:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:SettingBSViewModel.kt$SettingBSViewModel$exception:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:SplashScreenViewModel.kt$SplashScreenViewModel$ex: Exception
        </ID>
        <ID>
            TooGenericExceptionCaught:SurveyeeListScreenRepositoryImpl.kt$SurveyeeListScreenRepositoryImpl$ex:
            Exception
        </ID>
        <ID>TooGenericExceptionCaught:Utils.kt$ex: Exception</ID>
        <ID>TooGenericExceptionCaught:Utils.kt$ex:Exception</ID>
        <ID>TooGenericExceptionThrown:NetworkModule.kt$NetworkModule$throw RuntimeException(ex)</ID>
        <ID>TooManyFunctions:ActivityTaskDao.kt$ActivityTaskDao</ID>
        <ID>TooManyFunctions:ApiService.kt$ApiService</ID>
        <ID>TooManyFunctions:BaseLineStartViewModel.kt$BaseLineStartViewModel : BaseViewModel</ID>
        <ID>TooManyFunctions:BaseViewModel.kt$BaseViewModel : ViewModel</ID>
        <ID>TooManyFunctions:BaselineCore.kt$BaselineCore</ID>
        <ID>TooManyFunctions:BaselineModule.kt$BaselineModule</ID>
        <ID>TooManyFunctions:DataLoadingScreenRepository.kt$DataLoadingScreenRepository</ID>
        <ID>TooManyFunctions:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl :
            DataLoadingScreenRepository
        </ID>
        <ID>TooManyFunctions:DataLoadingScreenViewModel.kt$DataLoadingScreenViewModel :
            BaseViewModel
        </ID>
        <ID>TooManyFunctions:DatabaseModule.kt$DatabaseModule</ID>
        <ID>TooManyFunctions:EventWriterHelper.kt$EventWriterHelper</ID>
        <ID>TooManyFunctions:EventWriterHelperImpl.kt$EventWriterHelperImpl : EventWriterHelper</ID>
        <ID>TooManyFunctions:ExportImportViewModel.kt$ExportImportViewModel : BaseViewModel</ID>
        <ID>TooManyFunctions:FormQuestionResponseDao.kt$FormQuestionResponseDao</ID>
        <ID>TooManyFunctions:FormQuestionResponseRepository.kt$FormQuestionResponseRepository</ID>
        <ID>
            TooManyFunctions:FormQuestionResponseRepositoryImpl.kt$FormQuestionResponseRepositoryImpl
            : FormQuestionResponseRepository
        </ID>
        <ID>TooManyFunctions:MissionActivityDao.kt$MissionActivityDao</ID>
        <ID>TooManyFunctions:MissionEntityDao.kt$MissionEntityDao</ID>
        <ID>
            TooManyFunctions:NavHomeGraph.kt$com.nrlm.baselinesurvey.navigation.home.NavHomeGraph.kt
        </ID>
        <ID>TooManyFunctions:NudgeBaselineDatabase.kt$NudgeBaselineDatabase : RoomDatabase</ID>
        <ID>TooManyFunctions:OptionItemDao.kt$OptionItemDao</ID>
        <ID>TooManyFunctions:PlayerState.kt$PlayerStateImpl$&lt;no name provided&gt; : Listener</ID>
        <ID>TooManyFunctions:PrefRepo.kt$PrefRepo</ID>
        <ID>TooManyFunctions:QuestionEntityDao.kt$QuestionEntityDao</ID>
        <ID>TooManyFunctions:QuestionScreenRepository.kt$QuestionScreenRepository</ID>
        <ID>TooManyFunctions:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl :
            QuestionScreenRepository
        </ID>
        <ID>TooManyFunctions:QuestionScreenViewModel.kt$QuestionScreenViewModel : BaseViewModel</ID>
        <ID>TooManyFunctions:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel :
            BaseViewModel
        </ID>
        <ID>TooManyFunctions:SharedPrefs.kt$SharedPrefs : PrefRepo</ID>
        <ID>TooManyFunctions:SplashScreenRepository.kt$SplashScreenRepository</ID>
        <ID>TooManyFunctions:SplashScreenRepositoryImpl.kt$SplashScreenRepositoryImpl :
            SplashScreenRepositoryBaseRepository
        </ID>
        <ID>TooManyFunctions:SurveyeeEntityDao.kt$SurveyeeEntityDao</ID>
        <ID>
            TooManyFunctions:TimePickerComponent.kt$com.nrlm.baselinesurvey.ui.common_components.TimePickerComponent.kt
        </ID>
        <ID>TooManyFunctions:Utils.kt$com.nrlm.baselinesurvey.utils.Utils.kt</ID>
        <ID>TooManyFunctions:VillageListDao.kt$VillageListDao</ID>
        <ID>UnusedParameter:AllSurveyeeListTab.kt$activityDate: String</ID>
        <ID>UnusedParameter:AndroidDownloader.kt$AndroidDownloader$context: Context</ID>
        <ID>UnusedParameter:BaselineCore.kt$BaselineCore$name: String</ID>
        <ID>UnusedParameter:BaselineModule.kt$BaselineModule$apiService: ApiService</ID>
        <ID>UnusedParameter:BaselineModule.kt$BaselineModule$eventWriterHelper:
            EventWriterHelperImpl
        </ID>
        <ID>UnusedParameter:BaselineModule.kt$BaselineModule$nudgeBaselineDatabase:
            NudgeBaselineDatabase
        </ID>
        <ID>UnusedParameter:ButtonUtil.kt$textColor: Color = Color.White</ID>
        <ID>UnusedParameter:CTAButtonComponent.kt$textColor: Color = Color.White</ID>
        <ID>UnusedParameter:CommonSettingScreen.kt$expanded: Boolean</ID>
        <ID>UnusedParameter:ComplexSearchComponent.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:CustomSnackbarViewComponent.kt$containerColor: Color</ID>
        <ID>UnusedParameter:CustomSnackbarViewComponent.kt$contentColor: Color</ID>
        <ID>UnusedParameter:CustomSnackbarViewComponent.kt$icon: Int</ID>
        <ID>UnusedParameter:DataLoadingScreenComponent.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:DropDownWithTitleComponent.kt$dropDownBackground: Color = white</ID>
        <ID>UnusedParameter:DropDownWithTitleComponent.kt$dropDownBorder: Color = borderGrey</ID>
        <ID>UnusedParameter:EventWriterHelperImpl.kt$EventWriterHelperImpl$questionId: Int</ID>
        <ID>UnusedParameter:EventWriterHelperImpl.kt$EventWriterHelperImpl$sectionId: Int</ID>
        <ID>UnusedParameter:EventWriterHelperImpl.kt$EventWriterHelperImpl$surveyId: Int</ID>
        <ID>UnusedParameter:FinalStepCompletionScreen.kt$navController: NavController</ID>
        <ID>UnusedParameter:FormQuestionSummaryScreen.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:GridTypeComponent.kt$index: Int</ID>
        <ID>UnusedParameter:HomeScreen.kt$navController: NavController</ID>
        <ID>UnusedParameter:LanguageItemComponent.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:ListTypeComponent.kt$index: Int</ID>
        <ID>UnusedParameter:MissionSummaryScreen.kt$missionDate: String</ID>
        <ID>UnusedParameter:MissonRowScreen.kt$missionDueDate: String = BLANK_STRING</ID>
        <ID>UnusedParameter:MissonRowScreen.kt$onViewStatusClick: () -&gt; Unit</ID>
        <ID>UnusedParameter:MultiSelectDropdown.kt$dropDownBackground: Color = white</ID>
        <ID>UnusedParameter:MultiSelectDropdown.kt$dropDownBorder: Color = borderGrey</ID>
        <ID>UnusedParameter:NavHomeGraph.kt$prefRepo: PrefRepo</ID>
        <ID>UnusedParameter:NestedLazyListForFormQuestions.kt$onSaveFormTypeOption:
            (questionTypeEvent: QuestionTypeEvent) -&gt; Unit
        </ID>
        <ID>UnusedParameter:NetworkModule.kt$NetworkModule$context: Context</ID>
        <ID>UnusedParameter:OtpInputField.kt$isShowWarning: Boolean</ID>
        <ID>UnusedParameter:OtpInputField.kt$modifier: Modifier=Modifier</ID>
        <ID>UnusedParameter:QuestionScreen.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:QuestionType.kt$onAnswerSelection: (questionIndex: Int, optionItem:
            OptionItemEntity) -&gt; Unit
        </ID>
        <ID>UnusedParameter:QuestionType.kt$onMediaTypeDescriptionAction: (descriptionContentType:
            DescriptionContentType, contentLink: String) -&gt; Unit
        </ID>
        <ID>UnusedParameter:QuestionType.kt$optionDetailVisibilityState: Boolean</ID>
        <ID>UnusedParameter:QuestionType.kt$questionDetailExpanded: (index: Int) -&gt; Unit</ID>
        <ID>UnusedParameter:QuestionType.kt$questionIndex: Int</ID>
        <ID>UnusedParameter:QuestionType.kt$questionList: MutableList&lt;QuestionList?&gt;</ID>
        <ID>UnusedParameter:RadioQuestionBoxComponent.kt$modifier: Modifier = Modifier</ID>
        <ID>
            UnusedParameter:SaveFormQuestionResponseUseCase.kt$SaveFormQuestionResponseUseCase$didiId:
            Int
        </ID>
        <ID>
            UnusedParameter:SaveFormQuestionResponseUseCase.kt$SaveFormQuestionResponseUseCase$optionItem:
            OptionItemEntityState?
        </ID>
        <ID>UnusedParameter:SearchScreen.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:SectionItemComponent.kt$index: Int</ID>
        <ID>UnusedParameter:SectionItemComponent.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:SectionListScreen.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:StepCompletionScreen.kt$navController: NavController</ID>
        <ID>UnusedParameter:StepsBox.kt$backgroundColor:Color?= white</ID>
        <ID>UnusedParameter:SurveyeeCardComponent.kt$moveDidiToThisWeek: (surveyeeCardState:
            SurveyeeCardState, moveToThisWeek: Boolean) -&gt; Unit
        </ID>
        <ID>UnusedParameter:SurveyeeCardWithTolaFilterComponent.kt$modifier: Modifier = Modifier
        </ID>
        <ID>UnusedParameter:SurveyeeListScreen.kt$activityName: String = BLANK_STRING</ID>
        <ID>UnusedParameter:SurveyeeListScreen.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedParameter:SurveyeeScreenViewModel.kt$SurveyeeScreenViewModel$key: String</ID>
        <ID>UnusedParameter:TextWithReadMoreComponent.kt$color: Color = textColorDark</ID>
        <ID>UnusedParameter:Theme.kt$dynamicColor: Boolean = true</ID>
        <ID>UnusedParameter:TimePickerComponent.kt$isContent: Boolean = false</ID>
        <ID>UnusedParameter:TimePickerComponent.kt$onInfoButtonClicked: () -&gt; Unit</ID>
        <ID>UnusedParameter:TypeMultiSelectedDropDownComponent.kt$hintText: String = "Select"</ID>
        <ID>UnusedParameter:Utils.kt$eventItem: T</ID>
        <ID>UnusedParameter:Utils.kt$forExcel: Boolean = false</ID>
        <ID>UnusedParameter:Utils.kt$optionsItemEntityList: List&lt;OptionItemEntity&gt;</ID>
        <ID>UnusedParameter:VillageSelectionScreen.kt$modifier: Modifier = Modifier</ID>
        <ID>UnusedPrivateMember:FormTypeQuestionScreen.kt$@Preview(showBackground = true)
            @Composable private fun FormTypeQuestionScreenPreview()
        </ID>
        <ID>UnusedPrivateMember:LocationUtil.kt$LocationUtil$private fun
            getLocationSettingModeFromInt(mode: Int): String
        </ID>
        <ID>UnusedPrivateMember:NetworkModule.kt$NetworkModule$private fun getOkHttpBuilder():
            OkHttpClient.Builder
        </ID>
        <ID>UnusedPrivateProperty:AppConstants.kt$private val ExtendedFabIconPadding = 12.dp</ID>
        <ID>UnusedPrivateProperty:AppConstants.kt$private val ExtendedFabTextPadding = 20.dp</ID>
        <ID>UnusedPrivateProperty:AppConstants.kt$private val FabSize = 56.dp</ID>
        <ID>UnusedPrivateProperty:CurlLoggingInterceptor.kt$CurlLoggingInterceptor$val bodySize = if
            (contentLength != -1L) "$contentLength-byte" else "unknown-length"
        </ID>
        <ID>UnusedPrivateProperty:DataLoadingScreenComponent.kt$val context = LocalContext.current
        </ID>
        <ID>
            UnusedPrivateProperty:DataLoadingScreenRepositoryImpl.kt$DataLoadingScreenRepositoryImpl$val
            savedSurveyAnswersRequest: List&lt;Int&gt; = emptyList()
        </ID>
        <ID>UnusedPrivateProperty:DropDownWithTitleComponent.kt$val showLoader = remember {
            mutableStateOf(false) }
        </ID>
        <ID>UnusedPrivateProperty:EventWriterHelperImpl.kt$EventWriterHelperImpl$private val
            eventDependencyDao: EventDependencyDao
        </ID>
        <ID>UnusedPrivateProperty:EventWriterHelperImpl.kt$EventWriterHelperImpl$private val
            eventsDao: EventsDao
        </ID>
        <ID>UnusedPrivateProperty:EventWriterHelperImpl.kt$EventWriterHelperImpl$private val
            surveyeeEntityDao: SurveyeeEntityDao
        </ID>
        <ID>UnusedPrivateProperty:ExportImportViewModel.kt$ExportImportViewModel$private val
            userUniqueKey= mutableStateOf(BLANK_STRING)
        </ID>
        <ID>UnusedPrivateProperty:FinalStepCompletionScreen.kt$val animationOver = remember {
            mutableStateOf(false) }
        </ID>
        <ID>UnusedPrivateProperty:FormResponseCard.kt$val dividerHeight = remember {
            mutableStateOf(0.dp) }
        </ID>
        <ID>UnusedPrivateProperty:GetExportOptionListUseCase.kt$GetExportOptionListUseCase$private
            val repository: ExportImportRepository
        </ID>
        <ID>UnusedPrivateProperty:GetFromPageUseCase.kt$GetFromPageUseCase$private val repository:
            LanguageScreenRepository
        </ID>
        <ID>UnusedPrivateProperty:GridTypeComponent.kt$val innerFirstVisibleItemIndex by remember {
            derivedStateOf { innerState.firstVisibleItemIndex } }
        </ID>
        <ID>UnusedPrivateProperty:ListTypeComponent.kt$val innerFirstVisibleItemIndex by remember {
            derivedStateOf { innerState.firstVisibleItemIndex } }
        </ID>
        <ID>UnusedPrivateProperty:LoginScreenViewModel.kt$LoginScreenViewModel$private val TAG =
            LoginScreenViewModel::class.java.simpleName
        </ID>
        <ID>
            UnusedPrivateProperty:MissionSummaryScreenRepositoryImpl.kt$MissionSummaryScreenRepositoryImpl$private
            val surveyeeEntityDao: SurveyeeEntityDao
        </ID>
        <ID>UnusedPrivateProperty:NestedLazyList.kt$val householdMemberDtoList = remember {
            mutableStateOf(mutableListOf&lt;FormResponseObjectDto&gt;()) }
        </ID>
        <ID>UnusedPrivateProperty:NestedLazyList.kt$val innerQueState: LazyListState =
            rememberLazyListState()
        </ID>
        <ID>UnusedPrivateProperty:NestedLazyList.kt$val mOption = optionItem.copy( selectedValue =
            selectedValue, selectedValueId = selectedId )
        </ID>
        <ID>UnusedPrivateProperty:NestedLazyList.kt$val needToUpdateList = remember {
            mutableStateOf(NEED_TO_UPDATE_LIST_DEFAULT_VALUE) }
        </ID>
        <ID>UnusedPrivateProperty:NestedLazyListForFormQuestions.kt$val answeredQuestionCount =
            remember { mutableIntStateOf(questionTypeScreenViewModel.formTypeOption?.options?.size
            ?: 0) }
        </ID>
        <ID>UnusedPrivateProperty:NestedLazyListForFormQuestions.kt$val answeredQuestionIndices =
            remember { mutableStateOf(mutableListOf&lt;Int&gt;()) }
        </ID>
        <ID>UnusedPrivateProperty:NestedLazyListForFormQuestions.kt$val editTextValued = remember {
            mutableStateOf(mutableMapOf&lt;Int, String&gt;()) }
        </ID>
        <ID>UnusedPrivateProperty:NetworkModule.kt$NetworkModule$val cache =
            Cache(application.cacheDir, 10 * 1024 * 1024) // 10 MB
        </ID>
        <ID>
            UnusedPrivateProperty:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$private
            val apiService: ApiService
        </ID>
        <ID>
            UnusedPrivateProperty:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$private
            val formQuestionResponseDao: FormQuestionResponseDao
        </ID>
        <ID>UnusedPrivateProperty:QuestionScreenRepositoryImpl.kt$QuestionScreenRepositoryImpl$val
            villageIdForSurveyee = surveyeeEntityDao.getVillageIdForDidi(didiId)
        </ID>
        <ID>UnusedPrivateProperty:QuestionScreenViewModel.kt$QuestionScreenViewModel$val
            existingGridTypeAnswers =
            questionScreenUseCase.getSectionAnswersUseCase.getSectionAnswerForDidi(sectionId =
            sectionId, didiId = didiId).findQuestionForQuestionId(questionId)
        </ID>
        <ID>UnusedPrivateProperty:QuestionType.kt$val selectedOptionsItem = remember { mutableListOf&lt;OptionItemEntity&gt;()
            }
        </ID>
        <ID>UnusedPrivateProperty:RadioQuestionBoxComponent.kt$val innerFirstVisibleItemIndex by
            remember { derivedStateOf { innerState.firstVisibleItemIndex } }
        </ID>
        <ID>UnusedPrivateProperty:RadioQuestionBoxComponent.kt$val optionDetailVisibilityState =
            remember { mutableStateOf(false) }
        </ID>
        <ID>UnusedPrivateProperty:RadioQuestionBoxComponent.kt$val optionItemEntity =
            listOf(option1, option2)
        </ID>
        <ID>UnusedPrivateProperty:RadioQuestionBoxComponent.kt$val queLazyState: LazyListState =
            rememberLazyListState()
        </ID>
        <ID>UnusedPrivateProperty:RadioQuestionBoxComponent.kt$val questionList = remember {
            mutableStateOf(mutableListOf&lt;QuestionList?&gt;()) }
        </ID>
        <ID>UnusedPrivateProperty:RadioQuestionBoxComponent.kt$var optionItem: OptionItemEntity</ID>
        <ID>
            UnusedPrivateProperty:SaveQuestionImageUseCase.kt$SaveQuestionImageUseCase$splashScreenRepository:
            SplashScreenRepository
        </ID>
        <ID>UnusedPrivateProperty:SearchScreen.kt$val context = LocalContext.current</ID>
        <ID>UnusedPrivateProperty:SectionListScreen.kt$val configuration =
            LocalConfiguration.current
        </ID>
        <ID>
            UnusedPrivateProperty:SectionListScreenRepositoryImpl.kt$SectionListScreenRepositoryImpl$private
            val apiService: ApiService
        </ID>
        <ID>UnusedPrivateProperty:SectionListScreenViewModel.kt$SectionListScreenViewModel$var
            isFlag = true
        </ID>
        <ID>UnusedPrivateProperty:SplashScreenComponent.kt$val context = LocalContext.current</ID>
        <ID>UnusedPrivateProperty:SurveyeeListScreen.kt$val tabs = listOf(THIS_WEEK_TAB, ALL_TAB)
        </ID>
        <ID>UnusedPrivateProperty:SurveyeeListScreen.kt$var selectedTabIndex = remember {
            mutableIntStateOf(1) }
        </ID>
        <ID>
            UnusedPrivateProperty:SurveyeeListScreenRepositoryImpl.kt$SurveyeeListScreenRepositoryImpl$private
            val taskDao: ActivityTaskDao
        </ID>
        <ID>
            UnusedPrivateProperty:SurveyeeListScreenRepositoryImpl.kt$SurveyeeListScreenRepositoryImpl$val
            tasks = activityTaskDao.getActivityTaskFromIds(getBaseLineUserId(),
            activities.activityId)
        </ID>
        <ID>UnusedPrivateProperty:Theme.kt$private val DarkColorScheme = darkColorScheme( primary =
            Purple80, secondary = PurpleGrey80, tertiary = Pink80 )
        </ID>
        <ID>UseCheckOrError:Media.kt$throw IllegalStateException()</ID>
        <ID>VariableNaming:AndroidDownloader.kt$AndroidDownloader$val _downloadStatus =
            MutableStateFlow&lt;Map&lt;Int, DownloadStatus&gt;&gt;(mapOf())
        </ID>
        <ID>VariableNaming:ConnectionMonitor.kt$ConnectionMonitor$val TAG = "ConnectionMonitor"</ID>
        <ID>VariableNaming:DataLoadingScreenViewModel.kt$DataLoadingScreenViewModel$private var
            SURVEY_API_CALL = 0
        </ID>
        <ID>VariableNaming:DataLoadingScreenViewModel.kt$DataLoadingScreenViewModel$private var
            TOTAL_API_CALL = 0
        </ID>
        <ID>VariableNaming:ExportImportViewModel.kt$ExportImportViewModel$val _optionList =
            mutableStateOf&lt;List&lt;SettingOptionModel&gt;&gt;(emptyList())
        </ID>
        <ID>VariableNaming:GetSummaryFileRepositoryImpl.kt$GetSummaryFileRepositoryImpl$private val
            TAG = GetSummaryFileRepositoryImpl::class.java.simpleName
        </ID>
        <ID>VariableNaming:LoginScreenViewModel.kt$LoginScreenViewModel$private val TAG =
            LoginScreenViewModel::class.java.simpleName
        </ID>
        <ID>VariableNaming:OtpVerificationViewModel.kt$OtpVerificationViewModel$private val TAG =
            OtpVerificationViewModel::class.java.simpleName
        </ID>
        <ID>VariableNaming:QuestionTypeScreenViewModel.kt$QuestionTypeScreenViewModel$private val
            TAG = QuestionTypeScreenViewModel::class.java.simpleName
        </ID>
        <ID>VariableNaming:SettingBSViewModel.kt$SettingBSViewModel$val _optionList = mutableStateOf&lt;List&lt;SettingOptionModel&gt;&gt;(emptyList())</ID>
        <ID>WildcardImport:ControllerState.kt$import androidx.compose.runtime.*</ID>
        <ID>WildcardImport:CurlLoggingInterceptor.kt$import okhttp3.*</ID>
        <ID>WildcardImport:ExampleUnitTest.kt$import org.junit.Assert.*</ID>
        <ID>WildcardImport:HtmlText.kt$import android.text.style.*</ID>
        <ID>WildcardImport:HtmlText.kt$import androidx.compose.ui.text.*</ID>
        <ID>WildcardImport:Media.kt$import androidx.compose.runtime.*</ID>
        <ID>WildcardImport:MediaState.kt$import androidx.compose.runtime.*</ID>
        <ID>WildcardImport:MetricAffectingSpan.kt$import android.text.style.*</ID>
        <ID>WildcardImport:OtpInputField.kt$import androidx.compose.foundation.layout.*</ID>
        <ID>WildcardImport:OtpInputField.kt$import androidx.compose.runtime.*</ID>
        <ID>WildcardImport:OtpView.kt$import androidx.compose.foundation.layout.*</ID>
        <ID>WildcardImport:OtpView.kt$import androidx.compose.runtime.*</ID>
        <ID>WildcardImport:Player.kt$import androidx.compose.runtime.*</ID>
        <ID>WildcardImport:PlayerState.kt$import androidx.media3.common.*</ID>
        <ID>WildcardImport:ResizeMode.kt$import androidx.compose.foundation.layout.*</ID>
        <ID>WildcardImport:SimpleController.kt$import androidx.compose.foundation.layout.*</ID>
        <ID>WildcardImport:SimpleController.kt$import androidx.compose.runtime.*</ID>
        <ID>WildcardImport:TimeBar.kt$import androidx.compose.foundation.layout.*</ID>
        <ID>WildcardImport:TimeBar.kt$import androidx.compose.runtime.*</ID>
        <ID>WildcardImport:keyboardAsState.kt$import androidx.compose.runtime.*</ID>
    </CurrentIssues>
</SmellBaseline>

<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:AddTola.kt$!it.contains(IGNORED_REGEX) &amp;&amp; !it.contains(DOUBLE_QUOTE_REGEX) &amp;&amp; !it.contains(LEFT_BRACKET_QUOTE_REGEX) &amp;&amp; !it.contains(RIGHT_BRACKET_QUOTE_REGEX) &amp;&amp; !containsEmoji(it)</ID>
    <ID>ComplexCondition:AddTola.kt$(location!!.lat != null &amp;&amp; location!!.long != null) &amp;&amp; (location?.lat != 0.0 &amp;&amp; location?.long != 0.0)</ID>
    <ID>ComplexCondition:CheckDBStatus.kt$CheckDBStatus$didiDao.fetchAllDidiNeedToPost(true,"", 0).isEmpty() &amp;&amp; didiDao.fetchPendingDidi(true,"").isEmpty() &amp;&amp; didiDao.fetchAllDidiNeedToDelete(DidiStatus.DIID_DELETED.ordinal, true, "", 0).isEmpty() &amp;&amp; didiDao.fetchAllPendingDidiNeedToDelete(DidiStatus.DIID_DELETED.ordinal, "") .isEmpty() &amp;&amp; didiDao.fetchAllDidiNeedToUpdate(true, "").isEmpty() &amp;&amp; didiDao.fetchAllPendingDidiNeedToUpdate(true, "").isEmpty()</ID>
    <ID>ComplexCondition:CheckDBStatus.kt$CheckDBStatus$tolaDao.fetchTolaNeedToPost(true, "", 0).isEmpty() &amp;&amp; tolaDao.fetchPendingTola(true, "").isEmpty() &amp;&amp; tolaDao.fetchAllTolaNeedToDelete(TolaStatus.TOLA_DELETED.ordinal).isEmpty() &amp;&amp; tolaDao.fetchAllPendingTolaNeedToDelete(TolaStatus.TOLA_DELETED.ordinal, "") .isEmpty() &amp;&amp; tolaDao.fetchAllTolaNeedToUpdate(true, "", 0).isEmpty() &amp;&amp; tolaDao.fetchAllPendingTolaNeedToUpdate(true, "").isEmpty()</ID>
    <ID>ComplexCondition:ComposableUtils.kt$didi.patSurveyStatus == PatSurveyStatus.INPROGRESS.ordinal || didi.patSurveyStatus == PatSurveyStatus.NOT_STARTED.ordinal || didi.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal || didi.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal</ID>
    <ID>ComplexCondition:EditDidiWealthRankingRequest.kt$EditDidiWealthRankingRequest.Companion$(didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.section2Status == PatSurveyStatus.NOT_STARTED.ordinal) || (didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.patExclusionStatus != ExclusionType.NO_EXCLUSION.ordinal)</ID>
    <ID>ComplexCondition:EditTextWithTitle.kt$!it.contains(IGNORED_REGEX) &amp;&amp; !it.contains(DOUBLE_QUOTE_REGEX) &amp;&amp; !it.contains(LEFT_BRACKET_QUOTE_REGEX) &amp;&amp; !it.contains(RIGHT_BRACKET_QUOTE_REGEX) &amp;&amp; !containsEmoji(it)</ID>
    <ID>ComplexCondition:MediaState.kt$this == Size.Unspecified || width.isNaN() || height.isNaN() || height == 0f</ID>
    <ID>ComplexCondition:NudgeLogger.kt$LogWriter$isInitializing.compareAndSet(false, true) &amp;&amp; !isQuitting &amp;&amp; (syslogThread == null || !syslogThread!!.isAlive)</ID>
    <ID>ComplexCondition:PatDidiSummaryScreen.kt$patDidiSummaryViewModel.shouldShowPhoto.value &amp;&amp; !patDidiSummaryViewModel.shouldShowCamera.value &amp;&amp; shgFlag.value != SHGFlag.NOT_MARKED.value &amp;&amp; ableBodiedFlag.value != AbleBodiedFlag.NOT_MARKED.value</ID>
    <ID>ComplexCondition:ResponseHandler.kt$ResponseHandler$throwable is UnknownHostException || throwable is ConnectException || throwable is SocketTimeoutException || throwable is SSLException</ID>
    <ID>ComplexCondition:SettingScreen.kt$!isBPCDataNeedToBeSynced.value || syncBPCStatus.value == 3 || !isInternetConnected || batteryLevel &lt; 30</ID>
    <ID>ComplexCondition:SettingScreen.kt$(isInternetConnected &amp;&amp; (batteryLevel &gt;= 30) &amp;&amp; !settingViewModel.showLoader.value) &amp;&amp; (isBPCDataNeedToBeSynced.value)</ID>
    <ID>ComplexCondition:SettingScreen.kt$(stepOneStatus.value == 3 || stepOneStatus.value == 2) &amp;&amp; (stepTwoStatus.value == 3 || stepTwoStatus.value == 2) &amp;&amp; (stepThreeStatus.value == 3 || stepThreeStatus.value == 2) &amp;&amp; (stepFourStatus.value == 3 || stepFourStatus.value == 2) &amp;&amp; (stepFiveStatus.value == 3 || stepFiveStatus.value == 2)</ID>
    <ID>ComplexCondition:SettingScreen.kt$isDataNeedToBeSynced.value == 0 || isDataNeedToBeSynced.value == 2 || !isInternetConnected || batteryLevel &lt; 30</ID>
    <ID>ComplexCondition:SettingScreen.kt$isInternetConnected &amp;&amp; (batteryLevel &gt;= 30) &amp;&amp; !settingViewModel.showLoader.value &amp;&amp; isDataNeedToBeSynced.value == 1</ID>
    <ID>ComplexCondition:SettingScreen.kt$stepOneStatus.value == 0 || stepTwoStatus.value == 0 || stepThreeStatus.value == 0 || stepFourStatus.value == 0 || stepFiveStatus.value == 0</ID>
    <ID>ComplexCondition:SettingViewModel.kt$SettingViewModel$fetchAllDidiNeedToPostList.isEmpty() &amp;&amp; fetchPendingDidiList.isEmpty() &amp;&amp; fetchAllDidiNeedToDeleteList.isEmpty() &amp;&amp; fetchAllPendingDidiNeedToDeleteList.isEmpty() &amp;&amp; fetchAllDidiNeedToUpdateList.isEmpty() &amp;&amp; fetchAllPendingDidiNeedToUpdateList.isEmpty() &amp;&amp; isStepStatusSync(2)</ID>
    <ID>ComplexCondition:SettingViewModel.kt$SettingViewModel$fetchPATSurveyDidiList.isEmpty() &amp;&amp; fetchPendingPatStatusDidi.isEmpty() &amp;&amp; fetchAllDidiNeedsToPostImage.isEmpty() &amp;&amp; isStepStatusSync(4)</ID>
    <ID>ComplexCondition:SettingViewModel.kt$SettingViewModel$getAllNeedToPostVoDidis.isEmpty() &amp;&amp; fetchPendingVOStatusStatusDidi.isEmpty() &amp;&amp; isStepStatusSync(5) &amp;&amp; !isFormNeedToBeUpload()</ID>
    <ID>ComplexCondition:SettingViewModel.kt$SettingViewModel$isBPCDidiSynced()/*prefRepo.getPref(PREF_BPC_DIDI_LIST_SYNCED_FOR_VILLAGE_ + prefRepo.getSelectedVillage().id, false)*/ //change this to check for all villages. &amp;&amp; answerDao.fetchPATSurveyDidiList().isEmpty() &amp;&amp; didiDao.fetchPendingPatStatusDidi(true, "").isEmpty() &amp;&amp; didiDao.getAllNeedToPostBPCProcessDidi(true).isEmpty() &amp;&amp; didiDao.getAllPendingNeedToPostBPCProcessDidi(true, "").isEmpty() &amp;&amp; isStepStatusSync(6) &amp;&amp; isBPCScoreSaved()</ID>
    <ID>ComplexCondition:SettingViewModel.kt$SettingViewModel$tolaDao.fetchTolaNeedToPost(true, "", 0).isEmpty() &amp;&amp; tolaDao.fetchPendingTola(true, "").isEmpty() &amp;&amp; tolaDao.fetchAllTolaNeedToDelete(TolaStatus.TOLA_DELETED.ordinal).isEmpty() &amp;&amp; tolaDao.fetchAllPendingTolaNeedToDelete(TolaStatus.TOLA_DELETED.ordinal, "") .isEmpty() &amp;&amp; tolaDao.fetchAllTolaNeedToUpdate(true, "", 0).isEmpty() &amp;&amp; tolaDao.fetchAllPendingTolaNeedToUpdate(true, "").isEmpty() &amp;&amp; isStepStatusSync(1)</ID>
    <ID>ComplexCondition:SocialMappingDidiListScreen.kt$didi.patSurveyStatus == PatSurveyStatus.INPROGRESS.ordinal || didi.patSurveyStatus == PatSurveyStatus.NOT_STARTED.ordinal || didi.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal || didi.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal</ID>
    <ID>ComplexCondition:SurveySummaryViewModel.kt$SurveySummaryViewModel$(didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.section2Status == PatSurveyStatus.NOT_STARTED.ordinal) || (didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.patExclusionStatus != ExclusionType.NO_EXCLUSION.ordinal)</ID>
    <ID>ComplexCondition:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$(didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.section2Status == PatSurveyStatus.NOT_STARTED.ordinal) || (didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.patExclusionStatus != ExclusionType.NO_EXCLUSION.ordinal)</ID>
    <ID>ComplexCondition:SyncHelper.kt$SyncHelper$(didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.section2Status == PatSurveyStatus.NOT_STARTED.ordinal) || (didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.patExclusionStatus != ExclusionType.NO_EXCLUSION.ordinal)</ID>
    <ID>ComplexCondition:VillageSelectionRepository.kt$VillageSelectionRepository$(didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.section2Status == PatSurveyStatus.NOT_STARTED.ordinal) || (didi.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; didi.patExclusionStatus != ExclusionType.NO_EXCLUSION.ordinal)</ID>
    <ID>ComposableNaming:BugLogggingMechanismScreen.kt$bugLoggingMechPreview</ID>
    <ID>ComposableNaming:ComposableUtils.kt$showCustomDialog</ID>
    <ID>ComposableNaming:ComposableUtils.kt$showCustomDialogPreview</ID>
    <ID>ComposableNaming:ComposableUtils.kt$showDidiImageDialog</ID>
    <ID>ComposableNaming:CustomFloatButton.kt$CustomElevation</ID>
    <ID>ComposableNaming:CustomFloatButton.kt$prevFloatButtonPreview</ID>
    <ID>ComposableNaming:FormPictureScreen.kt$formAAndBLinksPreview</ID>
    <ID>ComposableNaming:FormPictureScreen.kt$formLinkView</ID>
    <ID>ComposableNaming:SettingScreen.kt$showBPCSyncDialog</ID>
    <ID>ComposableNaming:SettingScreen.kt$showSyncDialog</ID>
    <ID>ComposableParamOrder:AddDidiScreen.kt$AddDidiScreen</ID>
    <ID>ComposableParamOrder:AddTola.kt$AddTolaBox</ID>
    <ID>ComposableParamOrder:AddTola.kt$TolaBox</ID>
    <ID>ComposableParamOrder:AppImageView.kt$AppImageView</ID>
    <ID>ComposableParamOrder:BpcAddMoreDidiScreen.kt$BpcAddMoreDidiScreen</ID>
    <ID>ComposableParamOrder:BpcDidiListScreen.kt$BpcDidiListScreen</ID>
    <ID>ComposableParamOrder:BpcPrgressScreen.kt$BpcProgressScreen</ID>
    <ID>ComposableParamOrder:BpcPrgressScreen.kt$StepsBoxForBpc</ID>
    <ID>ComposableParamOrder:BpcVillageSelectionScreen.kt$BpcVillageAndVoBoxForBottomSheet</ID>
    <ID>ComposableParamOrder:BpcVillageSelectionScreen.kt$BpcVillageSelectionScreen</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$AcceptRejectButtonBox</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$AcceptRejectButtonBoxPreFilled</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$BlueButton</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$BlueButtonWithDrawableIcon</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$BlueButtonWithIcon</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$BlueButtonWithIconWithFixedWidth</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$BlueButtonWithIconWithFixedWidthWithoutIcon</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$BlueButtonWithRightArrow</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$BottomButtonBox</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$ButtonArrowNegative</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$ButtonNegative</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$ButtonNegativeForPAT</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$ButtonOutlineWithTopIcon</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$ButtonPositive</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$ButtonPositiveForPAT</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$ButtonPositiveForVo</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$DoubleButtonBox</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$IncrementDecrementView</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$OutlineButtonCustom</ID>
    <ID>ComposableParamOrder:ButtonsUtil.kt$OutlineButtonWithIcon</ID>
    <ID>ComposableParamOrder:CameraView.kt$CameraView</ID>
    <ID>ComposableParamOrder:CameraView.kt$CameraViewForForm</ID>
    <ID>ComposableParamOrder:CircularProgressView.kt$CircularProgressBarWithIcon</ID>
    <ID>ComposableParamOrder:ComposableUtils.kt$DidiItemCardForPat</ID>
    <ID>ComposableParamOrder:ComposableUtils.kt$ShowDidisFromTola</ID>
    <ID>ComposableParamOrder:ComposableUtils.kt$showCustomDialog</ID>
    <ID>ComposableParamOrder:ComposeableUtils.kt$DidiItemCardForPatSummary</ID>
    <ID>ComposableParamOrder:ComposeableUtils.kt$SummaryBox</ID>
    <ID>ComposableParamOrder:CustomFloatButton.kt$CustomFloatingButton</ID>
    <ID>ComposableParamOrder:CustomSnackBarView.kt$SnackBarCustom</ID>
    <ID>ComposableParamOrder:CustomSnackBarView.kt$SnackBarError</ID>
    <ID>ComposableParamOrder:CustomSnackBarView.kt$SnackBarSuccess</ID>
    <ID>ComposableParamOrder:DidiScreen.kt$DidiScreen</ID>
    <ID>ComposableParamOrder:DropDownWithTitle.kt$DropDownWithTitle</ID>
    <ID>ComposableParamOrder:EditTextWithTitle.kt$EditTextWithTitle</ID>
    <ID>ComposableParamOrder:FinalStepCompletion.kt$FinalStepCompletionScreen</ID>
    <ID>ComposableParamOrder:FormPictureScreen.kt$ExpandableFormPictureCard</ID>
    <ID>ComposableParamOrder:FormPictureScreen.kt$FormPictureCard</ID>
    <ID>ComposableParamOrder:FormPictureScreen.kt$FormPictureScreen</ID>
    <ID>ComposableParamOrder:FormPictureScreen.kt$PageItem</ID>
    <ID>ComposableParamOrder:HomeNavScreen.kt$HomeNavScreen</ID>
    <ID>ComposableParamOrder:HomeUserScreen.kt$HomeUserScreen</ID>
    <ID>ComposableParamOrder:ImageViewer.kt$FormImageViewerScreen</ID>
    <ID>ComposableParamOrder:IncrementDecrementButton.kt$DefaultMiddleComposable</ID>
    <ID>ComposableParamOrder:LanguageSelectorScreen.kt$LanguageScreen</ID>
    <ID>ComposableParamOrder:ListTypeQuestion.kt$ListTypeQuestion</ID>
    <ID>ComposableParamOrder:ListTypeQuestion.kt$OptionCard</ID>
    <ID>ComposableParamOrder:NumericFieldTypeQuestion.kt$NumericFieldTypeQuestion</ID>
    <ID>ComposableParamOrder:NumericFieldTypeQuestion.kt$NumericOptionCard</ID>
    <ID>ComposableParamOrder:OtpVerificationScreen.kt$OtpVerificationScreen</ID>
    <ID>ComposableParamOrder:ParticipatoryWealthRankingSurvey.kt$PATSurveyBox</ID>
    <ID>ComposableParamOrder:ParticipatoryWealthRankingSurvey.kt$ParticipatoryWealthRankingSurvey</ID>
    <ID>ComposableParamOrder:ParticipatoryWealthRankingSurvey.kt$ShowDialog</ID>
    <ID>ComposableParamOrder:ParticipatoryWealthRankingSurvey.kt$WealthRankingBox</ID>
    <ID>ComposableParamOrder:PatDidiSummaryScreen.kt$PatDidiSummaryScreen</ID>
    <ID>ComposableParamOrder:PatSuccessScreen.kt$PatSuccessScreen</ID>
    <ID>ComposableParamOrder:PatSurvaySectionOneSummary.kt$PatSummeryScreenDidiDetailBoxForSectionOne</ID>
    <ID>ComposableParamOrder:PatSurvaySectionOneSummary.kt$PatSurvaySectionSummaryScreen</ID>
    <ID>ComposableParamOrder:PatSurvaySectionOneSummary.kt$SectionOneSummeryItem</ID>
    <ID>ComposableParamOrder:PatSurvaySectionTwoSummary.kt$PatSummeryScreenDidiDetailBox</ID>
    <ID>ComposableParamOrder:PatSurvaySectionTwoSummary.kt$SectionTwoSummeryItem</ID>
    <ID>ComposableParamOrder:Pat_image_preview_screen.kt$PatImagePreviewScreen</ID>
    <ID>ComposableParamOrder:PdfViewer.kt$PdfViewer</ID>
    <ID>ComposableParamOrder:ProfileScreen.kt$ProfileScreen</ID>
    <ID>ComposableParamOrder:ProgressScreen.kt$ProgressScreen</ID>
    <ID>ComposableParamOrder:ProgressScreen.kt$ShowOptDialog</ID>
    <ID>ComposableParamOrder:ProgressScreen.kt$StepsBox</ID>
    <ID>ComposableParamOrder:ProgressScreen.kt$UserDataView</ID>
    <ID>ComposableParamOrder:ProgressScreen.kt$VillageSelectorDropDown</ID>
    <ID>ComposableParamOrder:RadioButtonTypeQuestion.kt$RadioButtonOptionCard</ID>
    <ID>ComposableParamOrder:RadioButtonTypeQuestion.kt$RadioButtonTypeQuestion</ID>
    <ID>ComposableParamOrder:ReLoginScreen.kt$ShowOptDialogForVillageScreen</ID>
    <ID>ComposableParamOrder:ScoreComparisionScreen.kt$ExpandableSummaryBox</ID>
    <ID>ComposableParamOrder:ScoreComparisionScreen.kt$ScoreComparisionScreen</ID>
    <ID>ComposableParamOrder:ScoreComparisionScreen.kt$ScoreComparisonDidiCard</ID>
    <ID>ComposableParamOrder:ScoreComparisionScreen.kt$ScoreItem</ID>
    <ID>ComposableParamOrder:ScoreComparisionScreen.kt$ScoreItemExclusion</ID>
    <ID>ComposableParamOrder:SearchWithFilterView.kt$SearchWithFilterView</ID>
    <ID>ComposableParamOrder:SettingScreen.kt$ExpandedSettingsList</ID>
    <ID>ComposableParamOrder:SettingScreen.kt$SettingCard</ID>
    <ID>ComposableParamOrder:SplashScreen.kt$SplashScreen</ID>
    <ID>ComposableParamOrder:StepCompetionScreen.kt$StepCompletionScreen</ID>
    <ID>ComposableParamOrder:SurveySummary.kt$SurveySummary</ID>
    <ID>ComposableParamOrder:TransetWalkScreen.kt$TransectWalkScreen</ID>
    <ID>ComposableParamOrder:Utils.kt$BulletList</ID>
    <ID>ComposableParamOrder:VideoDetailPlayerScreen.kt$MediaContent</ID>
    <ID>ComposableParamOrder:VideoListScreen.kt$VideoListScreen</ID>
    <ID>ComposableParamOrder:VillageScreen.kt$VillageScreen</ID>
    <ID>ComposableParamOrder:VillageSelectionScreen.kt$VillageAndVoBoxForBottomSheet</ID>
    <ID>ComposableParamOrder:VillageSelectionScreen.kt$VillageSelectionScreen</ID>
    <ID>ComposableParamOrder:VoEndorsementScreen.kt$VoEndorsementScreen</ID>
    <ID>ComposableParamOrder:VoEndorsementStepScreen.kt$VoEndorsementStepScreen</ID>
    <ID>ComposableParamOrder:YesNoQuestion.kt$YesNoQuestion</ID>
    <ID>ConstructorParameterNaming:BpcBeneficiaryApiResponse.kt$BpcBeneficiaryApiResponse$@SerializedName("not_selected") @Expose val not_selected: List&lt;DidiDetailList&gt;</ID>
    <ID>ConstructorParameterNaming:ConfigResponseModel.kt$ConfigResponseModel$@SerializedName("questionImageUrlList") @Expose val image_profile_link:List&lt;String&gt;</ID>
    <ID>ConstructorParameterNaming:DidiEntity.kt$DidiEntity$@SerializedName("wealth_ranking") @Expose @ColumnInfo(name = "wealth_ranking") var wealth_ranking: String = WealthRank.NOT_RANKED.rank</ID>
    <ID>ConstructorParameterNaming:DidiTableCSV.kt$DidiTableCSV$@CsvBindByName(column = "wealth_ranking") var wealth_ranking: String = WealthRank.NOT_RANKED.rank</ID>
    <ID>ConstructorParameterNaming:PoorDidiEntity.kt$PoorDidiEntity$@SerializedName("wealth_ranking") @Expose @ColumnInfo(name = "wealth_ranking") var wealth_ranking: String = WealthRank.NOT_RANKED.rank</ID>
    <ID>ConstructorParameterNaming:VillagesEntity.kt$VillageEntity$@SerializedName("steps_completed") @Expose @TypeConverters(IntConverter::class) @ColumnInfo(name = "steps_completed") var steps_completed: List&lt;Int&gt;?</ID>
    <ID>CyclomaticComplexMethod:AddDidiViewModel.kt$AddDidiViewModel$fun setSocialMappingINProgress( stepId: Int, villageId: Int, isOnline: Boolean, networkCallbackListener: NetworkCallbackListener )</ID>
    <ID>CyclomaticComplexMethod:AddTola.kt$@Composable fun TolaBox( modifier: Modifier = Modifier, tolaName: String = "khabd", tolaLocation: LocationCoordinates?, isLocationAvailable: Boolean = false, isTransectWalkCompleted: Boolean = false, deleteButtonClicked: () -&gt; Unit, listState: LazyListState, coroutineScope : CoroutineScope, index : Int, saveButtonClicked: (newName: String, newLocation: LocationCoordinates?) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:ApiServicesHelper.kt$ApiServicesHelper$fun getApiSubPath (api: ApiType): String</ID>
    <ID>CyclomaticComplexMethod:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$fun fetchBpcDataForVillage( forceRefresh: Boolean = false, village: VillageEntity, networkCallbackListener: NetworkCallbackListener )</ID>
    <ID>CyclomaticComplexMethod:BaseRepository.kt$BaseRepository$open fun onCatchError(e:Exception, api: ApiType)</ID>
    <ID>CyclomaticComplexMethod:BaseViewModel.kt$BaseViewModel$open fun onCatchError(e:Exception)</ID>
    <ID>CyclomaticComplexMethod:BaseViewModel.kt$BaseViewModel$open fun onCatchError(e:Exception, api: ApiType)</ID>
    <ID>CyclomaticComplexMethod:BpcPrgressScreen.kt$@Composable fun StepsBoxForBpc( modifier: Modifier = Modifier, boxTitle: String, stepNo: Int, index: Int, iconId: Int, viewModel: BpcProgressScreenViewModel, stepListData: SnapshotStateList&lt;StepListEntity&gt;, isCompleted: Boolean = false, shouldBeActive: Boolean = false, onclick: (Int) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:BpcPrgressScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun BpcProgressScreen( modifier: Modifier = Modifier, bpcProgreesScreenViewModel: BpcProgressScreenViewModel, navController: NavHostController, onNavigateToStep:(Int, Int) -&gt;Unit, onNavigateToSetting:()-&gt;Unit, onBackClick:()-&gt;Unit )</ID>
    <ID>CyclomaticComplexMethod:BpcVillageSelectionScreen.kt$@Composable fun BpcVillageAndVoBoxForBottomSheet( modifier: Modifier = Modifier, context: Context, villageEntity: VillageEntity, index: Int, selectedIndex: Int, onVillageSeleted: (Int) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:BpcVillageSelectionScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun BpcVillageSelectionScreen( modifier: Modifier = Modifier, navController: NavController, viewModel: BpcVillageScreenViewModel = hiltViewModel(), onNavigateToSetting:()-&gt;Unit )</ID>
    <ID>CyclomaticComplexMethod:ButtonsUtil.kt$@OptIn(ExperimentalGlideComposeApi::class) @Composable fun IncrementDecrementView(modifier: Modifier, optionText:String, currentValue: Int=0, optionImageUrl:String, questionFlag:String, optionList: List&lt;OptionsItem&gt;, optionValue:Int?=0, onDecrementClick: (Int)-&gt;Unit, onIncrementClick: (Int)-&gt;Unit, onValueChange: (String) -&gt; Unit, onLimitFailed: (String) -&gt; Unit)</ID>
    <ID>CyclomaticComplexMethod:ComposableUtils.kt$@Composable fun DidiItemCardForPat( navController: NavHostController, prefRepo: PrefRepo, didi: DidiEntity, expanded: Boolean, modifier: Modifier, answerDao: AnswerDao, isFromNotAvailableCard:Boolean?=false, isVoEndorsementComplete: Boolean?=false, questionListDao: QuestionListDao, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onNotAvailableClick: (DidiEntity) -&gt; Unit, onItemClick: (DidiEntity) -&gt; Unit, onCircularImageClick: (DidiEntity) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:DigitalFormAScreen.kt$@Composable fun DigitalFormAScreen( navController: NavController, viewModel: DigitalFormViewModel, modifier: Modifier = Modifier, fromScreen: String = "" )</ID>
    <ID>CyclomaticComplexMethod:DigitalFormBScreen.kt$@Composable fun DigitalFormBScreen( navController: NavController, viewModel: DigitalFormViewModel, modifier: Modifier = Modifier, fromScreen: String = "" )</ID>
    <ID>CyclomaticComplexMethod:DigitalFormCScreen.kt$@Composable fun DigitalFormCScreen( navController: NavController, viewModel: DigitalFormViewModel, modifier: Modifier = Modifier, fromScreen: String = "" )</ID>
    <ID>CyclomaticComplexMethod:FormPictureScreen.kt$@OptIn(ExperimentalMaterialApi::class, ExperimentalPermissionsApi::class) @Composable fun FormPictureScreen( modifier: Modifier = Modifier, navController: NavHostController, formPictureScreenViewModel: FormPictureScreenViewModel, stepId: Int )</ID>
    <ID>CyclomaticComplexMethod:Media.kt$@androidx.annotation.OptIn(androidx.media3.common.util.UnstableApi::class) @Composable fun Media( state: MediaState, modifier: Modifier = Modifier, surfaceType: SurfaceType = SurfaceType.SurfaceView, resizeMode: ResizeMode = ResizeMode.Fit, shutterColor: Color = Color.Black, keepContentOnPlayerReset: Boolean = false, useArtwork: Boolean = true, defaultArtworkPainter: Painter? = null, subtitles: @Composable ((CueGroup) -&gt; Unit)? = null, // TODO showBuffering: ShowBuffering = ShowBuffering.Never, buffering: @Composable (() -&gt; Unit)? = null, errorMessage: @Composable ((PlaybackException) -&gt; Unit)? = null, overlay: @Composable (() -&gt; Unit)? = null, controllerHideOnTouch: Boolean = true, controllerAutoShow: Boolean = true, controller: @Composable ((MediaState) -&gt; Unit)? = null )</ID>
    <ID>CyclomaticComplexMethod:NudgeLogger.kt$LogWriter$private suspend fun getSyslogFile( output: File, after: String = "", logFileNames: ArrayList&lt;String&gt;? = null ): Boolean</ID>
    <ID>CyclomaticComplexMethod:NumericFieldTypeQuestion.kt$@OptIn(ExperimentalFoundationApi::class) @SuppressLint("CoroutineCreationDuringComposition") @Composable fun NumericFieldTypeQuestion( modifier: Modifier, questionNumber: Int, question: String, questionId: Int, didiId: Int, questionFlag: String, optionList: List&lt;OptionsItem&gt;, pagerState: PagerState? = null, isEditPAT: Boolean = false, totalValueTitle: String, viewModel: QuestionScreenViewModel? = null, showNextButton: Boolean = false, onSubmitClick: (Int) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:ParticipatoryWealthRankingSurvey.kt$@Composable fun ParticipatoryWealthRankingSurvey( modifier: Modifier = Modifier, navController: NavController, viewModel: WealthRankingSurveyViewModel, stepId: Int, isStepComplete: Boolean )</ID>
    <ID>CyclomaticComplexMethod:PatDidiSummaryScreen.kt$@OptIn(ExperimentalPermissionsApi::class) @SuppressLint("StateFlowValueCalledInComposition") @Composable fun PatDidiSummaryScreen( navController: NavHostController, modifier: Modifier, isOnline: Boolean = true, patDidiSummaryViewModel: PatDidiSummaryViewModel, didiId: Int, onNavigation: () -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:PatSurvaySectionOneSummary.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun PatSurvaySectionSummaryScreen( navController: NavHostController, modifier: Modifier, isOnline: Boolean = true, patSectionSummaryViewModel: PatSectionSummaryViewModel, didiId: Int )</ID>
    <ID>CyclomaticComplexMethod:PatSurveyCompleteSummary.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun PatSurveyCompleteSummary( navController: NavHostController, modifier: Modifier, patSectionSummaryViewModel: PatSectionSummaryViewModel, didiId: Int, fromScreen: String )</ID>
    <ID>CyclomaticComplexMethod:PdfUtils.kt$PdfUtils$suspend fun getFormAPdf( context: Context, villageEntity: VillageEntity, didiDetailList: List&lt;DidiEntity&gt;, casteList: List&lt;CasteEntity&gt;, completionDate: String ): Boolean</ID>
    <ID>CyclomaticComplexMethod:PdfUtils.kt$PdfUtils$suspend fun getFormAPdfForBpc( context: Context, villageEntity: VillageEntity, didiDetailList: List&lt;PoorDidiEntity&gt;, casteList: List&lt;CasteEntity&gt;, completionDate: String ): Boolean</ID>
    <ID>CyclomaticComplexMethod:ProgressScreen.kt$@Composable fun StepsBox( modifier: Modifier = Modifier, boxTitle: String, subTitle: String, stepNo: Int, index: Int, iconId: Int, viewModel: ProgressScreenViewModel?=null, isCompleted: Boolean = false, shouldBeActive: Boolean = false, onclick: (Int) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:ProgressScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun ProgressScreen( modifier: Modifier = Modifier, viewModel: ProgressScreenViewModel, stepsNavHostController: NavHostController, onNavigateToStep:(Int, Int, Int, Boolean) -&gt;Unit, onNavigateToSetting:()-&gt;Unit, onBackClick:()-&gt;Unit )</ID>
    <ID>CyclomaticComplexMethod:QuestionScreen.kt$@SuppressLint("SuspiciousIndentation", "StateFlowValueCalledInComposition", "CoroutineCreationDuringComposition" ) @OptIn(ExperimentalFoundationApi::class, ExperimentalGlideComposeApi::class) @Composable fun QuestionScreen( navController: NavHostController, modifier: Modifier, viewModel: QuestionScreenViewModel, didiId: Int, sectionType:String, questionIndex:Int )</ID>
    <ID>CyclomaticComplexMethod:RetryHelper.kt$RetryHelper$fun retryApi(apiType: ApiType)</ID>
    <ID>CyclomaticComplexMethod:SettingScreen.kt$@Composable fun SettingScreen( viewModel: SettingViewModel, navController: NavController, modifier: Modifier = Modifier )</ID>
    <ID>CyclomaticComplexMethod:SettingScreen.kt$@Composable fun showBPCSyncDialog( setShowDialog: (Boolean) -&gt; Unit, settingViewModel: SettingViewModel, showBPCSyncDialog: MutableState&lt;Boolean&gt;, syncBPCStatus: MutableState&lt;Int&gt;, isBPCDataNeedToBeSynced: MutableState&lt;Boolean&gt;, extraNetworkCheck: Boolean )</ID>
    <ID>CyclomaticComplexMethod:SettingScreen.kt$@Composable fun showSyncDialog( setShowDialog: (Boolean) -&gt; Unit, settingViewModel: SettingViewModel, showSyncDialogStatus: MutableState&lt;Boolean&gt;, isDataNeedToBeSynced: MutableState&lt;Int&gt;, extraNetworkCheck: Boolean )</ID>
    <ID>CyclomaticComplexMethod:SingleQuestionScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @OptIn(ExperimentalFoundationApi::class, ExperimentalGlideComposeApi::class) @Composable fun SingleQuestionScreen(navController: NavHostController, modifier: Modifier, viewModel: QuestionScreenViewModel, didiId: Int, sectionType:String, questionIndex:Int )</ID>
    <ID>CyclomaticComplexMethod:SocialMappingDidiListScreen.kt$@Composable fun DidiItemCard( navController:NavHostController, didiViewModel: AddDidiViewModel, didi: DidiEntity, expanded: Boolean, modifier: Modifier, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (DidiEntity) -&gt; Unit, onDeleteClicked: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:SocialMappingDidiListScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun SocialMappingDidiListScreen( navController: NavHostController, modifier: Modifier, didiViewModel: AddDidiViewModel, villageId: Int, stepId: Int )</ID>
    <ID>CyclomaticComplexMethod:SurveySummary.kt$@SuppressLint("StringFormatMatches", "StateFlowValueCalledInComposition") @Composable fun SurveySummary( modifier: Modifier = Modifier, navController: NavHostController, fromScreen: String, surveySummaryViewModel: SurveySummaryViewModel, stepId: Int, isStepComplete: Boolean )</ID>
    <ID>CyclomaticComplexMethod:SurveySummaryViewModel.kt$SurveySummaryViewModel$@SuppressLint("SuspiciousIndentation") fun savePATSummeryToServer(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>CyclomaticComplexMethod:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$@SuppressLint("SuspiciousIndentation") fun savePATSummeryToServer(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>CyclomaticComplexMethod:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$fun updateBpcPatStatusToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>CyclomaticComplexMethod:SyncHelper.kt$SyncHelper$@SuppressLint("SuspiciousIndentation") fun savePATSummeryToServer(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>CyclomaticComplexMethod:TransetWalkScreen.kt$@Composable fun TransectWalkScreen( modifier: Modifier = Modifier, navController: NavController, viewModel: TransectWalkViewModel, villageId: Int, stepId: Int )</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun fetchUserAndVillageDetails(forceRefresh: Boolean = false, apiSuccess: (success: UserAndVillageDetailsModel) -&gt; Unit)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun refreshBpcData(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun refreshCrpData(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun refreshStepListData( taskCompleted: (success: Boolean) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchDidiForBpc(villageId: Int, prefRepo: PrefRepo)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchDidiForCrp(prefRepo: PrefRepo, villageId: Int)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchQuestions(prefRepo: PrefRepo)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun savePATSummeryToServer(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun savePATSummeryToServerForBpc(networkCallbackListener: NetworkCallbackListener, prefRepo: PrefRepo)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private suspend fun updateBpcPatStatusToNetwork(networkCallbackListener: NetworkCallbackListener, prefRepo: PrefRepo)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionScreen.kt$@Composable fun VillageAndVoBoxForBottomSheet( modifier: Modifier = Modifier, context: Context, tolaName: String = "", voName: String = "", index: Int, isUserBPC:Boolean, isVoEndorsementComplete:Boolean =false, selectedIndex: Int, statusId:Int=0, stepId:Int=0, onVillageSeleted: (Int) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun VillageSelectionScreen( modifier: Modifier = Modifier, navController: NavController, viewModel: VillageSelectionViewModel, onNavigateToSetting:()-&gt;Unit )</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionViewModel.kt$VillageSelectionViewModel$private fun fetchDataForBpc(context: Context)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionViewModel.kt$VillageSelectionViewModel$private fun fetchQuestions()</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionViewModel.kt$VillageSelectionViewModel$private fun fetchUserDetails(apiSuccess: (success: Boolean) -&gt; Unit)</ID>
    <ID>CyclomaticComplexMethod:VillageSelectionViewModel.kt$VillageSelectionViewModel$private fun fetchVillageList(context: Context)</ID>
    <ID>CyclomaticComplexMethod:VoEndorsementSummaryScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @OptIn(ExperimentalFoundationApi::class) @Composable fun VoEndorsementSummaryScreen( navController: NavController, viewModel: VoEndorsementSummaryViewModel, didiId: Int, didiStatus:Int )</ID>
    <ID>EmptyCatchBlock:DeviceInfoUtils.kt$DeviceInfoUtils${ }</ID>
    <ID>EmptyCatchBlock:NudgeLogger.kt$LogWriter${ }</ID>
    <ID>EmptyClassBlock:BaseResponseModel.kt$BaseResponseModel${ }</ID>
    <ID>EmptyClassBlock:Exportable.kt$Exportable${ }</ID>
    <ID>EmptyClassBlock:NetworkInfo.kt$NetworkInfo${ }</ID>
    <ID>EmptyClassBlock:TrainingVideoEntity.kt$TrainingVideoEntity${ }</ID>
    <ID>EmptyDefaultConstructor:PdfUtils.kt$PdfUtils.PageNumberModifier$()</ID>
    <ID>EmptyFunctionBlock:AddDidiScreen.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:AddDidiViewModel.kt$AddDidiViewModel.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:BpcDidiListViewModel.kt$BpcDidiListViewModel${ }</ID>
    <ID>EmptyFunctionBlock:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel${ }</ID>
    <ID>EmptyFunctionBlock:ConfigViewModelTest.kt$ConfigViewModelTest${ }</ID>
    <ID>EmptyFunctionBlock:LanguageViewModelTest.kt$LanguageViewModelTest${ }</ID>
    <ID>EmptyFunctionBlock:LoginViewModelTest.kt$LoginViewModelTest${ }</ID>
    <ID>EmptyFunctionBlock:MainActivity.kt$MainActivity${ }</ID>
    <ID>EmptyFunctionBlock:OtpVerificationViewModelTest.kt$OtpVerificationViewModelTest${ }</ID>
    <ID>EmptyFunctionBlock:ParticipatoryWealthRankingSurvey.kt$&lt;no name provided&gt;.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:PatDidiSummaryScreen.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:PatDidiSummaryScreen.kt$&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel${ }</ID>
    <ID>EmptyFunctionBlock:PatSuccessScreenViewModel.kt$PatSuccessScreenViewModel${ }</ID>
    <ID>EmptyFunctionBlock:Player.kt$PlayerManager${ }</ID>
    <ID>EmptyFunctionBlock:RetryHelper.kt$RetryHelper${ }</ID>
    <ID>EmptyFunctionBlock:SettingViewModel.kt$SettingViewModel.&lt;no name provided&gt;.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:SocialMappingDidiListScreen.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:SocialMappingDidiListScreen.kt$&lt;no name provided&gt;.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:SurveySummary.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:SurveySummary.kt$&lt;no name provided&gt;.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:TransetWalkScreen.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:TransetWalkScreen.kt$&lt;no name provided&gt;.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:VideoListViewModel.kt$VideoListViewModel${ }</ID>
    <ID>EmptyFunctionBlock:WealthRankingScreen.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyWhileBlock:SettingViewModel.kt$SettingViewModel${ }</ID>
    <ID>ExplicitItLambdaParameter:BpcPrgressScreen.kt${ it -&gt; if (bpcProgreesScreenViewModel.showLoader.value) { Box( modifier = Modifier .fillMaxWidth() .height(48.dp) .padding(top = it.calculateTopPadding() + 30.dp) ) { CircularProgressIndicator( color = blueDark, modifier = Modifier .size(28.dp) .align(Alignment.Center) ) } } else { var isStepCompleted = if (!stepListData.isNullOrEmpty()) { bpcProgreesScreenViewModel.isStepComplete( stepListData.sortedBy { it.orderNumber }.last().id, bpcProgreesScreenViewModel.repository.prefRepo.getSelectedVillage().id )?.observeAsState()?.value ?: 0 } else { 1 } Column(modifier = Modifier.pullRefresh(pullRefreshState)) { LazyColumn( Modifier .background(Color.White) .padding( start = 16.dp, end = 16.dp, top = it.calculateTopPadding() ), ) { item { UserDataView( modifier = Modifier, name = bpcProgreesScreenViewModel.repository.prefRepo.getPref( PREF_KEY_NAME, BLANK_STRING ) ?: "", identity = bpcProgreesScreenViewModel.repository.prefRepo.getPref( PREF_KEY_IDENTITY_NUMBER, BLANK_STRING ) ?: "", isBackButtonShow = true, isBPCUser = true ){ onBackClick() } } item { Row(verticalAlignment = Alignment.CenterVertically) { VillageSelectorDropDown( modifier = Modifier.weight(1f), selectedText = bpcProgreesScreenViewModel.selectedText.value, showCarrotIcon = false ) { /*scope.launch { if (!scaffoldState.isVisible) { scaffoldState.show() } else { scaffoldState.hide() } }*/ } IconButton( onClick = { if (isOnline.value) bpcProgreesScreenViewModel.refreshDataForCurrentVillage() else showCustomToast(context, context.getString(R.string.network_not_available_message)) } ) { Icon( imageVector = Icons.Default.Refresh, contentDescription = "Refresh Data button", tint = blueDark ) } } } item { Spacer(modifier = Modifier.height(10.dp)) } item { Box( modifier = Modifier .fillMaxWidth() .background(white, shape = RoundedCornerShape(6.dp)) .border( width = 1.dp, shape = RoundedCornerShape(6.dp), color = borderGrey ) ) { Column(modifier = Modifier) { Text( text = bpcProgreesScreenViewModel.repository.prefRepo.getSelectedVillage().federationName/*stringResource(R.string.crp_group_name_text)*/, textAlign = TextAlign.Start, style = mediumTextStyle, color = textColorDark, modifier = Modifier.padding(horizontal = 16.dp, vertical = 10.dp) ) Divider( thickness = 1.dp, color = borderGrey ) Column(modifier = Modifier.padding(horizontal = 16.dp)) { val numberColumnWeight = 0.15f val labelColumnWeight = 0.9f Row(Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) { TableCell( text = (bpcSummaryData.value.cohortCount ?: 0).toString(), style = TextStyle( color = textColorDark, fontSize = 18.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ), alignment = TextAlign.End, weight = numberColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) Spacer(modifier = Modifier.width(10.dp)) TableCell( text = if ((bpcSummaryData.value.cohortCount ?: 0) &gt; 1) stringResource(R.string.summary_tolas_added_text_plural) else stringResource(R.string.summary_tolas_added_text_singular), style = TextStyle( color = textColorDark, fontSize = 15.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ), alignment = TextAlign.Start, weight = labelColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) } Row(Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) { TableCell( text = (bpcSummaryData.value.mobilisedCount ?: 0).toString(), style = TextStyle( color = textColorDark, fontSize = 18.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ), alignment = TextAlign.End, weight = numberColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) Spacer(modifier = Modifier.width(10.dp)) TableCell( text = if ((bpcSummaryData.value.mobilisedCount ?: 0) &gt; 1) stringResource(R.string.summary_didis_mobilised_text_plural) else stringResource(R.string.summary_didis_mobilised_text_singular), style = TextStyle( color = textColorDark, fontSize = 15.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ), alignment = TextAlign.Start, weight = labelColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) } Row(Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) { TableCell( text = (bpcSummaryData.value.poorDidiCount ?: 0).toString(), style = TextStyle( color = textColorDark, fontSize = 18.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ), alignment = TextAlign.End, weight = numberColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) Spacer(modifier = Modifier.width(10.dp)) TableCell( text = if ((bpcSummaryData.value.poorDidiCount ?: 0) &gt; 1) stringResource(R.string.summary_wealth_ranking_text_plural) else stringResource(R.string.summary_wealth_ranking_text_singular), style = TextStyle( color = textColorDark, fontSize = 15.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ), alignment = TextAlign.Start, weight = labelColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) } Row(Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) { TableCell( text = (bpcSummaryData.value.sentVoEndorsementCount ?: 0).toString(), style = TextStyle( color = textColorDark, fontSize = 18.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ), alignment = TextAlign.End, weight = numberColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) Spacer(modifier = Modifier.width(10.dp)) TableCell( text = if ((bpcSummaryData.value.sentVoEndorsementCount ?: 0) &gt; 1) stringResource(R.string.summary_vo_endoresement_text_plural) else stringResource(R.string.summary_vo_endoresement_text_singular), style = TextStyle( color = textColorDark, fontSize = 15.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ), alignment = TextAlign.Start, weight = labelColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) } Row(Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) { TableCell( text = (bpcSummaryData.value.voEndorsedCount ?: 0).toString(), style = TextStyle( color = textColorDark, fontSize = 18.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ), alignment = TextAlign.End, weight = numberColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) Spacer(modifier = Modifier.width(10.dp)) TableCell( text = if ((bpcSummaryData.value.voEndorsedCount ?: 0) &gt; 1) stringResource(R.string.didis_endorsed_by_vo_plural) else stringResource( R.string.didi_endorsed_by_vo_singular), style = TextStyle( color = textColorDark, fontSize = 15.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ), alignment = TextAlign.Start, weight = labelColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) } Row( Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically ) { TableCell( text = bpcProgreesScreenViewModel.bpcCompletedDidiCount.value.toString() ?: "0", style = TextStyle( color = textColorDark, fontSize = 18.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ), alignment = TextAlign.End, weight = numberColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) Spacer(modifier = Modifier.width(10.dp)) TableCell( text = stringResource(R.string.didi_verified_by_bpc), style = TextStyle( color = textColorDark, fontSize = 15.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ), alignment = TextAlign.Start, weight = labelColumnWeight, modifier = Modifier .padding(vertical = 8.dp) ) } Row( Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically ) { TableCell( text = (bpcProgreesScreenViewModel.passPercentage.collectAsState().value).toString() + "%", style = TextStyle( color = textColorDark, fontSize = 18.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ), alignment = TextAlign.End, weight = 0.2f, modifier = Modifier .padding(vertical = 8.dp) ) Spacer(modifier = Modifier.width(10.dp)) TableCell( text = stringResource(R.string.match_percentage_box_text) .replace("{PERCENTAGE}%", "", true), style = TextStyle( color = textColorDark, fontSize = 15.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ), alignment = TextAlign.Start, weight = 0.8f, modifier = Modifier .padding(vertical = 8.dp) ) } Text( text = stringResource(R.string.current_status_text), style = buttonTextStyle, color = textColorDark ) Spacer(modifier = Modifier.height(8.dp)) Column(horizontalAlignment = Alignment.CenterHorizontally) { Box(modifier = Modifier) { Divider( modifier = Modifier .height(1.dp) .align(Alignment.Center) .padding(horizontal = 16.dp) .background( greyBorder, shape = DottedShape(step = 4.dp) ) ) Row( modifier = Modifier .align(Alignment.Center) .fillMaxWidth(), verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.SpaceEvenly ) { Box( modifier = Modifier .clip(CircleShape) .border( width = 1.dp, color = greenOnline, shape = CircleShape ) .background( greenOnline, shape = CircleShape ) .padding(6.dp) .size(24.dp) .aspectRatio(1f), contentAlignment = Alignment.Center ) { Text( text = "1", color = white, textAlign = TextAlign.Center, modifier = Modifier .align(Alignment.Center) .absolutePadding(bottom = 3.dp), style = smallerTextStyleNormalWeight, ) } Box( modifier = Modifier .clip(CircleShape) .border( width = 1.dp, color = greenOnline, shape = CircleShape ) .background( greenOnline, shape = CircleShape ) .padding(6.dp) .size(24.dp) .aspectRatio(1f), contentAlignment = Alignment.Center ) { Text( text = "2", color = white, textAlign = TextAlign.Center, modifier = Modifier .align(Alignment.Center) .absolutePadding(bottom = 3.dp), style = smallerTextStyleNormalWeight, ) } Box( modifier = Modifier .clip(CircleShape) .border( width = 1.dp, color = greenOnline, shape = CircleShape ) .background( greenOnline, shape = CircleShape ) .padding(6.dp) .size(24.dp) .aspectRatio(1f), contentAlignment = Alignment.Center ) { Text( text = "3", color = white, textAlign = TextAlign.Center, modifier = Modifier .align(Alignment.Center) .absolutePadding(bottom = 3.dp), style = smallerTextStyleNormalWeight, ) } Box( modifier = Modifier .clip(CircleShape) .border( width = 1.dp, color = greenOnline, shape = CircleShape ) .background( greenOnline, shape = CircleShape ) .padding(6.dp) .size(24.dp) .aspectRatio(1f), contentAlignment = Alignment.Center ) { Text( text = "4", color = white, textAlign = TextAlign.Center, modifier = Modifier .align(Alignment.Center) .absolutePadding(bottom = 3.dp), style = smallerTextStyleNormalWeight, ) } Box( modifier = Modifier .clip(CircleShape) .border( width = 1.dp, color = greenOnline, shape = CircleShape ) .background( greenOnline, shape = CircleShape ) .padding(6.dp) .size(24.dp) .aspectRatio(1f), contentAlignment = Alignment.Center ) { Text( text = "5", color = white, textAlign = TextAlign.Center, modifier = Modifier .align(Alignment.Center) .absolutePadding(bottom = 3.dp), style = smallerTextStyleNormalWeight, ) } Box( modifier = Modifier .clip(CircleShape) .border( width = 1.dp, color = if (isStepCompleted == StepStatus.COMPLETED.ordinal) greenOnline else stepBoxActiveColor, shape = CircleShape ) .background( if (isStepCompleted == StepStatus.COMPLETED.ordinal) greenOnline else stepBoxActiveColor, shape = CircleShape ) .padding(6.dp) .size(24.dp) .aspectRatio(1f), contentAlignment = Alignment.Center ) { Text( text = "6", color = if (isStepCompleted == StepStatus.COMPLETED.ordinal) white else textColorDark, textAlign = TextAlign.Center, modifier = Modifier .align(Alignment.Center) .absolutePadding(bottom = 3.dp), style = smallerTextStyleNormalWeight, ) } } } if (isStepCompleted != StepStatus.COMPLETED.ordinal) { Spacer(modifier = Modifier.height(10.dp)) Text( text = stringResource(id = R.string.vo_endorsement_completed), fontSize = 12.sp, fontFamily = NotoSans, fontWeight = FontWeight.Medium, color = textColorDark, textAlign = TextAlign.Center, modifier = Modifier.padding(start = (3 * 48).dp) ) } } Spacer(modifier = Modifier.height(16.dp)) } } } } if (isStepCompleted == StepStatus.COMPLETED.ordinal) { bpcProgreesScreenViewModel.getBpcCompletedDidiCount() } bpcProgreesScreenViewModel.isBpcVerificationComplete.value[bpcProgreesScreenViewModel.repository.prefRepo.getSelectedVillage().id] = isStepCompleted == StepStatus.COMPLETED.ordinal item { StepsBoxForBpc( boxTitle = stringResource(id = R.string.step_bpc_verification), stepNo = 6, index = 1, iconId = 6, viewModel = bpcProgreesScreenViewModel, stepListData = stepListData, shouldBeActive = isStepCompleted == StepStatus.INPROGRESS.ordinal || isStepCompleted == StepStatus.COMPLETED.ordinal, isCompleted = isStepCompleted == StepStatus.COMPLETED.ordinal, onclick = { if ((context as MainActivity).isOnline.value ?: false) { bpcProgreesScreenViewModel.callWorkFlowApiToGetWorkFlowId() } // bpcProgreesScreenViewModel.prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + bpcProgreesScreenViewModel.prefRepo.getSelectedVillage().id, false) if (isStepCompleted == StepStatus.INPROGRESS.ordinal || isStepCompleted == StepStatus.COMPLETED.ordinal) { if (!stepListData.isNullOrEmpty()) { val stepId = stepListData.sortedBy { it.orderNumber }.last().id onNavigateToStep( bpcProgreesScreenViewModel.repository.prefRepo.getSelectedVillage().id, stepId, ) bpcProgreesScreenViewModel.repository.prefRepo.saveFromPage(ARG_FROM_PAT_SURVEY) } else { showCustomToast(context, context.getString(R.string.something_went_wrong)) } } } ) } item { Spacer(modifier = Modifier.height(200.dp)) } } } } }</ID>
    <ID>ExplicitItLambdaParameter:ConfigViewModel.kt$ConfigViewModel${ it -&gt; it.languageList.forEach { language -&gt; NudgeLogger.d("ConfigViewModel", "$language") } NudgeLogger.d( "ConfigViewModel", "fetchLanguageDetails -&gt; languageListDao.insertAll(it.languageList) before" ) configRepository.insertAllLanguages(it) NudgeLogger.d( "ConfigViewModel", "fetchLanguageDetails -&gt; languageListDao.insertAll(it.languageList) after" ) delay(SPLASH_SCREEN_DURATION) withContext(Dispatchers.Main) { callBack(it.image_profile_link) } }</ID>
    <ID>ExplicitItLambdaParameter:ExportHelper.kt$ExportHelper${ it -&gt; if (it.isSuccessful) { NudgeLogger.d( TAG, "exportDidiTableToCsv addOnCompleteListener answerTableDumpUploadTask success" ) } else { NudgeLogger.d( TAG, "exportDidiTableToCsv addOnCompleteListener failure" ) } }</ID>
    <ID>ExplicitItLambdaParameter:ExportHelper.kt$ExportHelper${ it -&gt; if (it.task.isSuccessful) { NudgeLogger.d( TAG, "exportDidiTableToCsv addOnCompleteListener success response =&gt; path: ${didiTableDumpRef.downloadUrl.result.path}, " + "\n name = ${didiTableDumpRef.downloadUrl.result.lastPathSegment}" ) } else { NudgeLogger.d( TAG, "exportDidiTableToCsv addOnCompleteListener failure" ) } }</ID>
    <ID>ExplicitItLambdaParameter:FormPictureScreenViewModel.kt$FormPictureScreenViewModel${ index, it -&gt; if (it.value.isNotEmpty()) { val pageKey = getFormPathKey(File(it.value).nameWithoutExtension) val compressedFormC = compressImage(it.value, context, getFileNameFromURL(it.value)) val requestFormC = RequestBody.create( "multipart/form-data".toMediaTypeOrNull(), File(compressedFormC) ) val formCFilePart = MultipartBody.Part.createFormData( "formC", File(compressedFormC).name, requestFormC ) // prefRepo.savePref(pageKey,File(compressedFormC).absolutePath) formList.add(formCFilePart) val payload = DocumentUploadRequest( villageId = repository.prefRepo.getSelectedVillage().id.toString(), userType = if (repository.prefRepo.isUserBPC()) USER_BPC else USER_CRP, filePath = it.value, formName = "formC" ).json() val event = repository.createImageUploadEvent( payload = payload, mobileNumber = repository.prefRepo.getMobileNumber(), userID = repository.prefRepo.getUserId(), eventName = EventName.FORM_C_TOPIC, payloadlocalId = "" ) repository.uri = File(compressedFormC).toUri() repository.writeImageEventIntoLogFile(event, listOf()) } }</ID>
    <ID>ExplicitItLambdaParameter:FormPictureScreenViewModel.kt$FormPictureScreenViewModel${ index, it -&gt; if (it.value.isNotEmpty()) { val pageKey = getFormPathKey(File(it.value).nameWithoutExtension) val compressedFormD = compressImage(it.value, context, getFileNameFromURL(it.value)) val requestFormD = RequestBody.create( "multipart/form-data".toMediaTypeOrNull(), File(compressedFormD) ) val formDFilePart = MultipartBody.Part.createFormData( "formD", File(compressedFormD).name, requestFormD ) // prefRepo.savePref(pageKey,File(compressedFormD).absolutePath) formList.add(formDFilePart) val payload = DocumentUploadRequest( villageId = repository.prefRepo.getSelectedVillage().id.toString(), userType = if (repository.prefRepo.isUserBPC()) USER_BPC else USER_CRP, filePath = it.value, formName = "formD" ).json() repository.uri = File(compressedFormD).toUri() val event = repository.createImageUploadEvent( payload = payload, mobileNumber = repository.prefRepo.getMobileNumber(), userID = repository.prefRepo.getUserId(), eventName = EventName.FORM_D_TOPIC, payloadlocalId = "" ) repository.writeImageEventIntoLogFile(event, listOf()) /*val eventFormatter: IEventFormatter = EventWriterFactory().createEventWriter( NudgeCore.getAppContext(), EventFormatterName.JSON_FORMAT_EVENT ) eventFormatter.saveAndFormatEvent( event = eventV1, listOf( EventWriterName.FILE_EVENT_WRITER, EventWriterName.IMAGE_EVENT_WRITER, EventWriterName.DB_EVENT_WRITER, EventWriterName.LOG_EVENT_WRITER ), File(it.value).toUri() )*/ } }</ID>
    <ID>ExplicitItLambdaParameter:ProgressScreen.kt${ it -&gt; if (viewModel.showLoader.value) { Box( modifier = Modifier .fillMaxWidth() .height(48.dp) .padding(top = it.calculateTopPadding() + 30.dp) ) { CircularProgressIndicator( color = blueDark, modifier = Modifier .size(28.dp) .align(Alignment.Center) ) } } else { Column(modifier = Modifier) { if (/*viewModel.tokenExpired.value*/false) { ShowOptDialog( modifier = Modifier, context = LocalContext.current, viewModel = viewModel, snackState = snackState, setShowDialog = { viewModel.tokenExpired.value = false }, positiveButtonClicked = { RetryHelper.updateOtp(viewModel.baseOtpNumber) { success, message -&gt; if (success){ viewModel.tokenExpired.value = false } else { snackState.addMessage(message = message, isSuccess = false, isCustomIcon = false) } } } ) } LazyColumn( Modifier .background(Color.White) .padding( start = 16.dp, end = 16.dp, top = it.calculateTopPadding(), bottom = 50.dp ), ) { item { UserDataView( modifier = Modifier, name = viewModel.getPref( PREF_KEY_NAME, BLANK_STRING ) ?: "", identity = viewModel.getPref( PREF_KEY_IDENTITY_NUMBER, BLANK_STRING ) ?: "", isBackButtonShow = true, isBPCUser = false, onBackClick = { onBackClick() } ) } item { VillageSelectorDropDown(selectedText = viewModel.selectedText.value) { scope.launch { if (!scaffoldState.isVisible) { scaffoldState.show() } else { scaffoldState.hide() } } } } item { Spacer(modifier = Modifier.height(8.dp)) } itemsIndexed(items = steps.sortedBy { it.orderNumber }) { index, step -&gt; if ((viewModel.getPref(PREF_PROGRAM_NAME, "") ?: "").equals("CRP Program", true) &amp;&amp; index &lt; 5 ) { val villageId=villages[viewModel.villageSelected.value].id var isStepCompleted = viewModel.isStepComplete(steps[index].id,villageId).observeAsState().value ?: 0 if (index == 4){ viewModel.isVoEndorsementComplete.value[villageId] = isStepCompleted == StepStatus.COMPLETED.ordinal } if(steps[index].orderNumber==1 &amp;&amp; isStepCompleted==0){ isStepCompleted=StepStatus.INPROGRESS.ordinal } if (isStepCompleted == StepStatus.COMPLETED.ordinal) { viewModel.updateSelectedStep(steps[index].stepId) } val subText = when(step.orderNumber) { 1 -&gt; tolaCount.value.let { if (it &gt; 1) stringResource(id = R.string.transect_walk_sub_text_plural, it) else stringResource(id = R.string.transect_walk_sub_text_singular, it) } 2 -&gt; didiCount.value.let { if (it &gt; 1) stringResource(id = R.string.social_mapping_sub_text_plural, it) else stringResource(id = R.string.social_mapping_sub_text_singular, it) } 3 -&gt; poorDidiCount.value.let { if (it &gt; 1) stringResource(id = R.string.wealth_ranking_sub_text_plural, it) else stringResource(id = R.string.wealth_ranking_sub_text_singular, it) } 4 -&gt; ultraPoorDidiCount.value.let { if (it &gt; 1) stringResource(id = R.string.pat_sub_text_plural, it) else stringResource(id = R.string.pat_sub_text_singular, it) } 5 -&gt; endorsedDidiCount.value.let { if (it &gt; 1) stringResource(id = R.string.vo_endorsement_sub_text_plural, it) else stringResource(id = R.string.vo_endorsement_sub_text_singular, it) } else -&gt; "" } StepsBox( boxTitle = findStepNameForSelectedLanguage(context,step.id), subTitle = subText, stepNo = step.orderNumber, index = index, iconId = step.orderNumber, viewModel = viewModel, shouldBeActive = isStepCompleted == StepStatus.INPROGRESS.ordinal || isStepCompleted == StepStatus.COMPLETED.ordinal, isCompleted = isStepCompleted == StepStatus.COMPLETED.ordinal ) { index -&gt; viewModel.stepSelected.value = index mainActivity?.isFilterApplied?.value=false val step=viewModel.stepList.value[index] viewModel.saveFromPage(ARG_FROM_PROGRESS) if (mainActivity?.isOnline?.value == true) { viewModel.callWorkFlowAPI(villageId,step.id,step.programId) } if (step.isComplete != StepStatus.COMPLETED.ordinal) { viewModel.updateWorkflowStatusInEvent( stepStatus = StepStatus.INPROGRESS, stepId = step.id, villageId = villageId ) } when (index) { 0 -&gt; { // onNavigateToTransWalk(villageId,stepId,index) } 1 -&gt; { // onNavigateToTransWalk(villageId,stepId,index) } 2 -&gt; {} 3 -&gt; { if (isStepCompleted == StepStatus.INPROGRESS.ordinal || isStepCompleted == StepStatus.COMPLETED.ordinal) viewModel.saveFromPage(ARG_FROM_PAT_SURVEY) } 4 -&gt; {} 5 -&gt; {} } if (isStepCompleted == StepStatus.INPROGRESS.ordinal || isStepCompleted == StepStatus.COMPLETED.ordinal) onNavigateToStep(villageId,step.id,index,(viewModel.stepList.value[index].isComplete == StepStatus.COMPLETED.ordinal)) } } } item { Spacer(modifier = Modifier.height(16.dp)) } } Spacer(modifier = Modifier .height(100.dp) .fillMaxWidth()) } CustomSnackBarShow(state = snackState, position = CustomSnackBarViewPosition.Bottom) } }</ID>
    <ID>ExplicitItLambdaParameter:SyncHelper.kt$SyncHelper${ index, it -&gt; if (it.value.isNotEmpty()) { // val pageKey = getFormPathKey(File(it.value).nameWithoutExtension) val compressedFormC = compressImage(it.value, context, getFileNameFromURL(it.value)) val requestFormC = RequestBody.create( "multipart/form-data".toMediaTypeOrNull(), File(compressedFormC) ) val formCFilePart = MultipartBody.Part.createFormData( "formC", File(compressedFormC).name, requestFormC ) // prefRepo.savePref(pageKey,File(compressedFormC).absolutePath) formList.add(formCFilePart) } }</ID>
    <ID>ExplicitItLambdaParameter:SyncHelper.kt$SyncHelper${ index, it -&gt; if (it.value.isNotEmpty()) { // val pageKey = getFormPathKey(File(it.value).nameWithoutExtension) val compressedFormD = compressImage(it.value, context, getFileNameFromURL(it.value)) val requestFormD = RequestBody.create( "multipart/form-data".toMediaTypeOrNull(), File(compressedFormD) ) val formDFilePart = MultipartBody.Part.createFormData( "formD", File(compressedFormD).name, requestFormD ) // prefRepo.savePref(pageKey,File(compressedFormD).absolutePath) formList.add(formDFilePart) } }</ID>
    <ID>ExplicitItLambdaParameter:TransectWalkViewModel.kt$TransectWalkViewModel${ it -&gt; it.forEach { newStep -&gt; if (newStep.orderNumber &gt; stepList[stepList.map { it.orderNumber } .indexOf(1)].orderNumber &amp;&amp; newStep.orderNumber &lt; BPC_VERIFICATION_STEP_ORDER) { if (newStep.workFlowId &gt; 0) { apiRequest.add( EditWorkFlowRequest( newStep.workFlowId, StepStatus.INPROGRESS.name, villageId = villageId, programsProcessId = newStep.id ) ) } } } if (apiRequest.isNotEmpty()) { NudgeLogger.d( "TransectWalkViewModel", "markTransectWalkIncomplete -&gt; apiRequest: $apiRequest" ) val response = transectWalkRepository.editWorkFlow(apiRequest) NudgeLogger.d( "TransectWalkViewModel", "markTransectWalkIncomplete -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}" ) if (response.status.equals(SUCCESS)) { response.data?.let { response -&gt; response.forEach { it -&gt; transectWalkRepository.updateWorkflowId( stepId = it.programsProcessId, workflowId = it.id, villageId = villageId, status = it.status ) transectWalkRepository.updateNeedToPost( it.programsProcessId, villageId, false ) } NudgeLogger.d( "TransectWalkViewModel", "markTransectWalkIncomplete -&gt; onSuccess" ) networkCallbackListener.onSuccess() } } else { NudgeLogger.d( "TransectWalkViewModel", "markTransectWalkIncomplete -&gt; onFailed" ) networkCallbackListener.onFailed() } if (!response.lastSyncTime.isNullOrEmpty()) { transectWalkRepository.updateLastSyncTime(response.lastSyncTime) } } }</ID>
    <ID>ExplicitItLambdaParameter:TransectWalkViewModel.kt$TransectWalkViewModel${ it -&gt; transectWalkRepository.updateWorkflowId( stepId = it.programsProcessId, workflowId = it.id, villageId = villageId, status = it.status ) transectWalkRepository.updateNeedToPost( it.programsProcessId, villageId, false ) }</ID>
    <ID>ExplicitItLambdaParameter:VillageSelectionRepository.kt$VillageSelectionRepository${ index, it -&gt; if (it.value.isNotEmpty()) { // val pageKey = getFormPathKey(File(it.value).nameWithoutExtension) val compressedFormC = compressImage(it.value, context, getFileNameFromURL(it.value)) val requestFormC = RequestBody.create( "multipart/form-data".toMediaTypeOrNull(), File(compressedFormC) ) val formCFilePart = MultipartBody.Part.createFormData( "formC", File(compressedFormC).name, requestFormC ) // prefRepo.savePref(pageKey,File(compressedFormC).absolutePath) formList.add(formCFilePart) } }</ID>
    <ID>ExplicitItLambdaParameter:VillageSelectionRepository.kt$VillageSelectionRepository${ index, it -&gt; if (it.value.isNotEmpty()) { // val pageKey = getFormPathKey(File(it.value).nameWithoutExtension) val compressedFormD = compressImage(it.value, context, getFileNameFromURL(it.value)) val requestFormD = RequestBody.create( "multipart/form-data".toMediaTypeOrNull(), File(compressedFormD) ) val formDFilePart = MultipartBody.Part.createFormData( "formD", File(compressedFormD).name, requestFormD ) // prefRepo.savePref(pageKey,File(compressedFormD).absolutePath) formList.add(formDFilePart) } }</ID>
    <ID>ExplicitItLambdaParameter:VillageSelectionRepository.kt$VillageSelectionRepository${ it -&gt; if (it.stepList.isNotEmpty()) { it.stepList.forEach { steps -&gt; steps.villageId = village.id /*steps.isComplete = findCompleteValue(steps.status).ordinal*/ if (steps.id == 40) { prefRepo.savePref( PREF_TRANSECT_WALK_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 41) { prefRepo.savePref( PREF_SOCIAL_MAPPING_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 46) { prefRepo.savePref( PREF_WEALTH_RANKING_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 43) { prefRepo.savePref( PREF_PAT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 44) { prefRepo.savePref( PREF_VO_ENDORSEMENT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 45) { prefRepo.savePref( PREF_BPC_PAT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } } val localStepListForVillage = stepsListDao.getAllStepsForVillage(village.id) NudgeLogger.d( "VillageSelectionRepository", "refreshBpcData getStepsList " + "stepsListDao.insertAll(it.stepList) before" ) val updatedStepList = mutableListOf&lt;StepListEntity&gt;() localStepListForVillage.forEach { step -&gt; updatedStepList.add(step.getUpdatedStep(it.stepList[it.stepList.map { it.id } .indexOf(step.id)])) } if (localStepListForVillage.size != it.stepList.size) { if (localStepListForVillage.size &lt; it.stepList.size) { val tempStepList = mutableListOf&lt;StepListEntity&gt;() tempStepList.addAll(it.stepList) tempStepList.sortedBy { it.orderNumber } localStepListForVillage.forEach { localStep -&gt; if (it.stepList.map { remoteStep -&gt; remoteStep.id } .contains(localStep.id)) { tempStepList.remove(it.stepList.sortedBy { it.orderNumber }[it.stepList.map { it.id } .indexOf(localStep.id)]) } } updatedStepList.addAll(tempStepList) } else { val tempStepList = mutableListOf&lt;StepListEntity&gt;() tempStepList.addAll(localStepListForVillage) tempStepList.sortedBy { it.orderNumber } it.stepList.forEach { remoteStep -&gt; if (localStepListForVillage.map { localStep -&gt; remoteStep.id } .contains(remoteStep.id)) { tempStepList.remove(localStepListForVillage.sortedBy { it.orderNumber }[localStepListForVillage.map { it.id } .indexOf(remoteStep.id)]) } } updatedStepList.addAll(tempStepList) } } if (updatedStepList.isNotEmpty()) { stepsListDao.deleteAllStepsForVillage(village.id) delay(100) stepsListDao.insertAll(updatedStepList) } NudgeLogger.d( "VillageSelectionRepository", "refreshBpcData getStepsList " + "stepsListDao.insertAll(it.stepList) after" ) } prefRepo.savePref( PREF_PROGRAM_NAME, it.programName ) }</ID>
    <ID>ExplicitItLambdaParameter:VillageSelectionRepository.kt$VillageSelectionRepository${ it -&gt; if (it.stepList.isNotEmpty()) { it.stepList.forEach { steps -&gt; steps.villageId = village.id /*steps.isComplete = findCompleteValue(steps.status).ordinal*/ if(steps.id == 40){ prefRepo.savePref( PREF_TRANSECT_WALK_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 41){ prefRepo.savePref( PREF_SOCIAL_MAPPING_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 46){ prefRepo.savePref( PREF_WEALTH_RANKING_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 43){ prefRepo.savePref( PREF_PAT_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 44){ prefRepo.savePref( PREF_VO_ENDORSEMENT_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if (steps.id == 45) { prefRepo.savePref( PREF_BPC_PAT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } } val localStepListForVillage = stepsListDao.getAllStepsForVillage(village.id) NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "stepsListDao.insertAll(it.stepList) before") val updatedStepList = mutableListOf&lt;StepListEntity&gt;() localStepListForVillage.forEach { step -&gt; updatedStepList.add(step.getUpdatedStep(it.stepList[it.stepList.map { it.id }.indexOf(step.id)])) } if (localStepListForVillage.size != it.stepList.size) { if (localStepListForVillage.size &lt; it.stepList.size) { val tempStepList = mutableListOf&lt;StepListEntity&gt;() tempStepList.addAll(it.stepList) tempStepList.sortedBy { it.orderNumber } localStepListForVillage.forEach { localStep -&gt; if (it.stepList.map { remoteStep -&gt; remoteStep.id }.contains(localStep.id)) { tempStepList.remove(it.stepList.sortedBy { it.orderNumber }[it.stepList.map { it.id }.indexOf(localStep.id)]) } } updatedStepList.addAll(tempStepList) } else { val tempStepList = mutableListOf&lt;StepListEntity&gt;() tempStepList.addAll(localStepListForVillage) tempStepList.sortedBy { it.orderNumber } it.stepList.forEach { remoteStep -&gt; if (localStepListForVillage.map { localStep -&gt; remoteStep.id }.contains(remoteStep.id)) { tempStepList.remove(localStepListForVillage.sortedBy { it.orderNumber }[localStepListForVillage.map { it.id }.indexOf(remoteStep.id)]) } } updatedStepList.addAll(tempStepList) } } if (updatedStepList.isNotEmpty()) { stepsListDao.deleteAllStepsForVillage(village.id) delay(100) stepsListDao.insertAll(updatedStepList) } NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "stepsListDao.insertAll(it.stepList) after") } prefRepo.savePref( PREF_PROGRAM_NAME, it.programName ) }</ID>
    <ID>FunctionNaming:NetworkResult.kt$NetworkResult.Companion$fun &lt;T&gt; Error(message: String, data: T? = null): NetworkResult&lt;T&gt;</ID>
    <ID>FunctionNaming:NetworkResult.kt$NetworkResult.Companion$fun &lt;T&gt; Loading(data: T? = null): NetworkResult&lt;T&gt;</ID>
    <ID>FunctionNaming:NetworkResult.kt$NetworkResult.Companion$fun &lt;T&gt; Success(data: T): NetworkResult&lt;T&gt;</ID>
    <ID>FunctionNaming:VillageSelectionRepository.kt$VillageSelectionRepository$private suspend fun FetchTolaForBpc(villageId: Int)</ID>
    <ID>FunctionParameterNaming:AnswerDao.kt$AnswerDao$Answers: List&lt;SectionAnswerEntity&gt;</ID>
    <ID>FunctionParameterNaming:HtmlText.kt$URLSpanStyle: SpanStyle</ID>
    <ID>FunctionParameterNaming:HtmlText.kt$URLSpanStyle: SpanStyle = SpanStyle( color = linkTextColor(), textDecoration = TextDecoration.Underline )</ID>
    <ID>ImplicitDefaultLocale:ComposeableUtils.kt$String.format("%02d", count)</ID>
    <ID>ImplicitDefaultLocale:DeviceInfoUtils.kt$DeviceInfoUtils$String.format("%02X:", aMac)</ID>
    <ID>ImplicitDefaultLocale:ParticipatoryWealthRankingSurvey.kt$String.format("%02d", count)</ID>
    <ID>InstanceOfCheckForException:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$ex !is JsonSyntaxException</ID>
    <ID>InstanceOfCheckForException:VillageSelectionRepository.kt$VillageSelectionRepository$ex !is JsonSyntaxException</ID>
    <ID>InstanceOfCheckForException:VillageSelectionRepository.kt$VillageSelectionRepository$ex is HttpException</ID>
    <ID>InstanceOfCheckForException:VillageSelectionViewModel.kt$VillageSelectionViewModel$ex !is JsonSyntaxException</ID>
    <ID>InstanceOfCheckForException:VillageSelectionViewModel.kt$VillageSelectionViewModel$ex is HttpException</ID>
    <ID>InvalidPackageDeclaration:CharacterStyle.kt$package com.ireward.htmlcompose</ID>
    <ID>InvalidPackageDeclaration:MetricAffectingSpan.kt$package com.ireward.htmlcompose</ID>
    <ID>LargeClass:AddDidiRepository.kt$AddDidiRepository : BaseRepository</ID>
    <ID>LargeClass:AddDidiViewModel.kt$AddDidiViewModel : BaseViewModel</ID>
    <ID>LargeClass:BPCProgressScreenRepository.kt$BPCProgressScreenRepository : BaseRepository</ID>
    <ID>LargeClass:FormPictureScreenViewModel.kt$FormPictureScreenViewModel : BaseViewModel</ID>
    <ID>LargeClass:PdfUtils.kt$PdfUtils</ID>
    <ID>LargeClass:RetryHelper.kt$RetryHelper</ID>
    <ID>LargeClass:SettingViewModel.kt$SettingViewModel : BaseViewModel</ID>
    <ID>LargeClass:SurveySummaryViewModel.kt$SurveySummaryViewModel : BaseViewModel</ID>
    <ID>LargeClass:SyncBPCDataOnServer.kt$SyncBPCDataOnServer</ID>
    <ID>LargeClass:SyncHelper.kt$SyncHelper</ID>
    <ID>LargeClass:TransectWalkViewModel.kt$TransectWalkViewModel : BaseViewModel</ID>
    <ID>LargeClass:VillageSelectionRepository.kt$VillageSelectionRepository : BaseRepository</ID>
    <ID>LargeClass:VillageSelectionViewModel.kt$VillageSelectionViewModel : BaseViewModel</ID>
    <ID>LongMethod:AddDidiRepository.kt$AddDidiRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>LongMethod:AddDidiScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun AddDidiScreen(navController: NavHostController, modifier: Modifier, isOnline: Boolean = true, didiViewModel: AddDidiViewModel?=null, didiDetailId:Int,onNavigation:()-&gt;Unit)</ID>
    <ID>LongMethod:AddDidiViewModel.kt$AddDidiViewModel$fun addDidisToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:AddDidiViewModel.kt$AddDidiViewModel$fun callWorkFlowAPI( villageId: Int, stepId: Int, networkCallbackListener: NetworkCallbackListener )</ID>
    <ID>LongMethod:AddDidiViewModel.kt$AddDidiViewModel$fun setSocialMappingINProgress( stepId: Int, villageId: Int, isOnline: Boolean, networkCallbackListener: NetworkCallbackListener )</ID>
    <ID>LongMethod:AddDidiViewModel.kt$AddDidiViewModel$fun updateDidiIntoDatabase( didiId: Int, isOnline: Boolean, networkCallbackListener: NetworkCallbackListener, localDbListener: LocalDbListener )</ID>
    <ID>LongMethod:AddDidiViewModel.kt$AddDidiViewModel$fun updateDidiToNetwork(didi: DidiEntity, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:AddDidiViewModel.kt$AddDidiViewModel$fun updateDidiToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:AddDidiViewModel.kt$AddDidiViewModel$private fun deleteDidisToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:AddTola.kt$@Composable fun AddTolaBox( modifier: Modifier = Modifier, tolaName: String = "", isLocationAvailable: Boolean = false, onSaveClicked: (name: String, location: LocationCoordinates?) -&gt; Unit, onCancelClicked: () -&gt; Unit )</ID>
    <ID>LongMethod:AddTola.kt$@Composable fun TolaBox( modifier: Modifier = Modifier, tolaName: String = "khabd", tolaLocation: LocationCoordinates?, isLocationAvailable: Boolean = false, isTransectWalkCompleted: Boolean = false, deleteButtonClicked: () -&gt; Unit, listState: LazyListState, coroutineScope : CoroutineScope, index : Int, saveButtonClicked: (newName: String, newLocation: LocationCoordinates?) -&gt; Unit )</ID>
    <ID>LongMethod:AndroidDownloader.kt$AndroidDownloader$@SuppressLint("Range") fun checkDownloadStatus( downloadId: Long, id: Int, downloadManager: DownloadManager, onDownloadComplete:()-&gt;Unit, onDownloadFailed:()-&gt;Unit, )</ID>
    <ID>LongMethod:AuthNavGraph.kt$fun NavGraphBuilder.authNavGraph(navController: NavHostController)</ID>
    <ID>LongMethod:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$fun fetchBpcDataForVillage( forceRefresh: Boolean = false, village: VillageEntity, networkCallbackListener: NetworkCallbackListener )</ID>
    <ID>LongMethod:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$suspend fun fetchBpcSummaryDataForVillageFromNetwork(forceRefresh: Boolean, village: VillageEntity)</ID>
    <ID>LongMethod:BpcAddMoreDidiScreen.kt$@Composable fun BpcAddMoreDidiScreen( modifier: Modifier = Modifier, bpcAddMoreDidiViewModel: BpcAddMoreDidiViewModel, navController: NavHostController, forReplace: Boolean = false )</ID>
    <ID>LongMethod:BpcAddMoreDidiScreen.kt$@Composable fun DidiDetailExpendableContentForBpc( modifier: Modifier, didi: DidiEntity, expended: Boolean )</ID>
    <ID>LongMethod:BpcAddMoreDidiScreen.kt$@Composable fun ExpandableDidiItemCardForBpc( didi: DidiEntity, expanded: Boolean, modifier: Modifier, isChecked: Boolean, isForReplace: Boolean, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (Boolean, DidiEntity) -&gt; Unit )</ID>
    <ID>LongMethod:BpcAddMoreDidiScreen.kt$@Composable fun ShowDidisFromTolaForBpcAddMoreScreen( didiTola: String, didiList: List&lt;DidiEntity&gt;, modifier: Modifier, isForReplace: Boolean, expandedIds: List&lt;Int&gt;, isCheckedIds: List&lt;Int&gt;, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (Boolean, DidiEntity) -&gt; Unit )</ID>
    <ID>LongMethod:BpcAddMoreDidiScreen.kt$private fun decoupledConstraints(): ConstraintSet</ID>
    <ID>LongMethod:BpcAddMoreDidiScreen.kt$private fun didiDetailConstraints(): ConstraintSet</ID>
    <ID>LongMethod:BpcDidiListScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun BpcDidiListScreen( modifier: Modifier = Modifier, bpcDidiListViewModel: BpcDidiListViewModel, navController: NavHostController, villageId: Int, stepId: Int )</ID>
    <ID>LongMethod:BpcPrgressScreen.kt$@Composable fun StepsBoxForBpc( modifier: Modifier = Modifier, boxTitle: String, stepNo: Int, index: Int, iconId: Int, viewModel: BpcProgressScreenViewModel, stepListData: SnapshotStateList&lt;StepListEntity&gt;, isCompleted: Boolean = false, shouldBeActive: Boolean = false, onclick: (Int) -&gt; Unit )</ID>
    <ID>LongMethod:BpcPrgressScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun BpcProgressScreen( modifier: Modifier = Modifier, bpcProgreesScreenViewModel: BpcProgressScreenViewModel, navController: NavHostController, onNavigateToStep:(Int, Int) -&gt;Unit, onNavigateToSetting:()-&gt;Unit, onBackClick:()-&gt;Unit )</ID>
    <ID>LongMethod:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel$fun calculateDidiScore(didiId: Int)</ID>
    <ID>LongMethod:BpcVillageSelectionScreen.kt$@Composable fun BpcVillageAndVoBoxForBottomSheet( modifier: Modifier = Modifier, context: Context, villageEntity: VillageEntity, index: Int, selectedIndex: Int, onVillageSeleted: (Int) -&gt; Unit )</ID>
    <ID>LongMethod:BpcVillageSelectionScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun BpcVillageSelectionScreen( modifier: Modifier = Modifier, navController: NavController, viewModel: BpcVillageScreenViewModel = hiltViewModel(), onNavigateToSetting:()-&gt;Unit )</ID>
    <ID>LongMethod:BugLogggingMechanismScreen.kt$@Composable fun BugLogggingMechanismScreen(navController: NavHostController)</ID>
    <ID>LongMethod:ButtonsUtil.kt$@Composable fun AcceptRejectButtonBox( modifier: Modifier = Modifier, positiveButtonText: String, negativeButtonRequired: Boolean = true, negativeButtonText: String = "", positiveButtonOnClick: () -&gt; Unit, negativeButtonOnClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:ButtonsUtil.kt$@Composable fun AcceptRejectButtonBoxPreFilled( modifier: Modifier = Modifier, positiveButtonText: String, negativeButtonRequired: Boolean = true, preFilledValue: Int, negativeButtonText: String = "", positiveButtonOnClick: () -&gt; Unit, negativeButtonOnClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:ButtonsUtil.kt$@OptIn(ExperimentalGlideComposeApi::class) @Composable fun IncrementDecrementView(modifier: Modifier, optionText:String, currentValue: Int=0, optionImageUrl:String, questionFlag:String, optionList: List&lt;OptionsItem&gt;, optionValue:Int?=0, onDecrementClick: (Int)-&gt;Unit, onIncrementClick: (Int)-&gt;Unit, onValueChange: (String) -&gt; Unit, onLimitFailed: (String) -&gt; Unit)</ID>
    <ID>LongMethod:CameraView.kt$@Composable fun CameraView( modifier: Modifier = Modifier, outputDirectory: File, viewModel: PatDidiSummaryViewModel, didiEntity: DidiEntity, executor: Executor, onImageCaptured: (Uri, String) -&gt; Unit, onCloseButtonClicked: () -&gt; Unit, onError: (ImageCaptureException) -&gt; Unit )</ID>
    <ID>LongMethod:CameraView.kt$@Composable fun CameraViewForForm( modifier: Modifier = Modifier, outputDirectory: File, formName: String, executor: Executor, onImageCaptured: (Uri, String) -&gt; Unit, onCloseButtonClicked: () -&gt; Unit, onError: (ImageCaptureException) -&gt; Unit )</ID>
    <ID>LongMethod:CircularProgressView.kt$@Composable fun CircularProgressBar( modifier: Modifier, circleRadius: Float = 100f, backgroundColor: Color = Color.Transparent, progressBackgroundColor: Color = grayProgressBackground, progressColor: Color = blueDark, initialPosition: Int = 0, minProgress: Int = 0, maxProgress: Int = 6, borderThickness: Dp = 7.dp, centerTextSize: TextUnit = 14.sp )</ID>
    <ID>LongMethod:CircularProgressView.kt$@Composable fun CircularProgressBarWithIcon( modifier: Modifier, circleRadius: Float = 25f, icon: Painter, backgroundColor: Color = Color.Transparent, progressBackgroundColor: Color = grayProgressBackground, progressColor: Color = blueDark, initialPosition: Int = 0, minProgress: Int = 0, maxProgress: Int = 6, borderThickness: Dp = 7.dp, )</ID>
    <ID>LongMethod:ComposableUtils.kt$@Composable fun DidiItemCardForPat( navController: NavHostController, prefRepo: PrefRepo, didi: DidiEntity, expanded: Boolean, modifier: Modifier, answerDao: AnswerDao, isFromNotAvailableCard:Boolean?=false, isVoEndorsementComplete: Boolean?=false, questionListDao: QuestionListDao, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onNotAvailableClick: (DidiEntity) -&gt; Unit, onItemClick: (DidiEntity) -&gt; Unit, onCircularImageClick: (DidiEntity) -&gt; Unit )</ID>
    <ID>LongMethod:ComposableUtils.kt$@Composable fun ShowDidisFromTola( navController:NavHostController, prefRepo: PrefRepo, didiTola: String, didiList: List&lt;DidiEntity&gt;, modifier: Modifier, expandedIds: List&lt;Int&gt;, answerDao: AnswerDao, questionListDao: QuestionListDao, addDidiViewModel: AddDidiViewModel?=null, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onNavigate: (DidiEntity) -&gt; Unit, onDeleteClicked: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongMethod:ComposableUtils.kt$@Composable fun showCustomDialog( title:String, message:String, positiveButtonTitle : String ?=EMPTY_STRING, negativeButtonTitle : String ?=EMPTY_STRING, dismissOnBackPress: Boolean? = true, onPositiveButtonClick:()-&gt;Unit, onNegativeButtonClick:()-&gt;Unit)</ID>
    <ID>LongMethod:ComposableUtils.kt$@Composable fun showDidiImageDialog(didi: DidiEntity,onCloseClick:()-&gt;Unit)</ID>
    <ID>LongMethod:ComposeableUtils.kt$@Composable fun DidiItemCardForVoForSummary( navController: NavHostController, didi: DidiEntity, modifier: Modifier, onItemClick: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongMethod:ComposeableUtils.kt$@SuppressLint("UnrememberedMutableState") @Composable fun DidiItemCardForPatSummary( didi: DidiEntity, modifier: Modifier, isVOEndorsementComplete:Boolean ?=true, onItemClick: (DidiEntity) -&gt; Unit, onNotAvailableClick: (DidiEntity) -&gt;Unit, onStartPATClick: (DidiEntity) -&gt;Unit, )</ID>
    <ID>LongMethod:CurlLoggingInterceptor.kt$CurlLoggingInterceptor$@Throws(IOException::class) override fun intercept(chain: Interceptor.Chain): Response</ID>
    <ID>LongMethod:CustomFloatButton.kt$@Composable fun CustomFloatingButton(modifier: Modifier = Modifier,buttonTitle:String, isNext:Boolean,onClick: () -&gt; Unit)</ID>
    <ID>LongMethod:CustomSnackBarView.kt$@Composable internal fun CustomSnackBarViewComponent( state: CustomSnackBarViewState, duration: Long, position: CustomSnackBarViewPosition, containerColor: Color, contentColor: Color, verticalPadding: Dp, horizontalPadding: Dp, icon: Int, enterAnimation: EnterTransition, exitAnimation: ExitTransition, )</ID>
    <ID>LongMethod:DidiScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun DidiScreen( navController: NavHostController, modifier: Modifier = Modifier, didiViewModel: AddDidiViewModel, villageId:Int, stepId:Int, onNavigateToAddDidi:()-&gt; Unit, onNavigateToSummary:()-&gt; Unit )</ID>
    <ID>LongMethod:DigitalFormAScreen.kt$@Composable fun DigitalFormAScreen( navController: NavController, viewModel: DigitalFormViewModel, modifier: Modifier = Modifier, fromScreen: String = "" )</ID>
    <ID>LongMethod:DigitalFormBScreen.kt$@Composable fun DigitalFormBScreen( navController: NavController, viewModel: DigitalFormViewModel, modifier: Modifier = Modifier, fromScreen: String = "" )</ID>
    <ID>LongMethod:DigitalFormCScreen.kt$@Composable fun DigitalFormCScreen( navController: NavController, viewModel: DigitalFormViewModel, modifier: Modifier = Modifier, fromScreen: String = "" )</ID>
    <ID>LongMethod:DropDownWithTitle.kt$@Composable fun &lt;T : Any&gt; DropDownWithTitle( title: String, hintText: String = stringResource(id = R.string.select), items: List&lt;T&gt;, modifier: Modifier, dropDownBorder: Color = borderGrey, dropDownBackground: Color = white, isRequiredField: Boolean = false, listTypeTola:Boolean = false, selectedItem: String = "", expanded: Boolean = false, mTextFieldSize: Size, onExpandedChange: (Boolean) -&gt; Unit, onDismissRequest: () -&gt; Unit, onGlobalPositioned: (LayoutCoordinates) -&gt; Unit, onItemSelected: (T) -&gt; Unit )</ID>
    <ID>LongMethod:EditTextWithTitle.kt$@Composable fun EditTextWithTitle( titleText: String, isRequiredField: Boolean = false, modifier: Modifier, currentString: String, hint: String = stringResource(id = R.string.enter), onValueChange: (String) -&gt; Unit )</ID>
    <ID>LongMethod:ExportHelper.kt$ExportHelper$suspend fun exportAnswerTableToCsv(context: Context)</ID>
    <ID>LongMethod:ExportHelper.kt$ExportHelper$suspend fun exportDidiTableToCsv(context: Context)</ID>
    <ID>LongMethod:ExportHelper.kt$ExportHelper$suspend fun exportNumericAnswerTableToCsv(context: Context)</ID>
    <ID>LongMethod:ExportHelper.kt$ExportHelper$suspend fun exportTolaTableToCsv(context: Context)</ID>
    <ID>LongMethod:FormPictureScreen.kt$@Composable fun ExpandableFormPictureCard( modifier: Modifier = Modifier, expanded: Boolean, pageList: MutableList&lt;Int&gt;, navController: NavController, addPageClicked: () -&gt; Unit, pageItemClicked: (pageNumber: Int) -&gt; Unit, retakeButtonClicked: (index: Int) -&gt; Unit, deleteButtonClicked: () -&gt; Unit )</ID>
    <ID>LongMethod:FormPictureScreen.kt$@Composable fun FormPictureCard( modifier: Modifier = Modifier, navController: NavController, showIcon: Boolean, cardTitle: String, contentColor: Color, borderColor: Color, expanded: Boolean, icon: ImageVector = Icons.Default.Add, pageList: MutableList&lt;Int&gt;, pageItemClicked: (pageNumber: Int) -&gt; Unit, formPictureCardClicked: () -&gt; Unit, addPageClicked: () -&gt; Unit, retakeButtonClicked: (index: Int) -&gt; Unit, deleteButtonClicked: () -&gt; Unit )</ID>
    <ID>LongMethod:FormPictureScreen.kt$@OptIn(ExperimentalMaterialApi::class, ExperimentalPermissionsApi::class) @Composable fun FormPictureScreen( modifier: Modifier = Modifier, navController: NavHostController, formPictureScreenViewModel: FormPictureScreenViewModel, stepId: Int )</ID>
    <ID>LongMethod:FormPictureScreen.kt$private fun requestCameraPermission(context: Activity, viewModal: FormPictureScreenViewModel, requestPermission: () -&gt; Unit)</ID>
    <ID>LongMethod:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$fun callWorkFlowAPI(villageId: Int,stepId: Int, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$fun updateVoStatusToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$fun uploadFormsCAndD(context: Context, isOnline: Boolean)</ID>
    <ID>LongMethod:ImageViewer.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun FormImageViewerScreen( modifier: Modifier = Modifier, navController: NavController, fileName: String, viewModel: ImageViewerViewModel )</ID>
    <ID>LongMethod:LanguageSelectorScreen.kt$@OptIn(ExperimentalPermissionsApi::class) @SuppressLint("StateFlowValueCalledInComposition") @Composable fun LanguageScreen( viewModel: LanguageViewModel, navController: NavController, modifier: Modifier = Modifier, pageFrom:String )</ID>
    <ID>LongMethod:LocationUtil.kt$LocationUtil$@RequiresApi(Build.VERSION_CODES.R) fun getLocation(context: Activity, gpsConsumer: Consumer&lt;Location&gt;, networkConsumer: Consumer&lt;Location&gt;)</ID>
    <ID>LongMethod:LocationUtil.kt$LocationUtil$fun getLocation(context: Activity): LocationCoordinates?</ID>
    <ID>LongMethod:LocationUtil.kt$LocationUtil$fun getLocation(context: Activity, gpsLocationListener: LocationListener, networkLocationListener: LocationListener)</ID>
    <ID>LongMethod:LoginScreen.kt$@SuppressLint("StringFormatInvalid") @Composable fun LoginScreen( navController: NavController, viewModel: LoginViewModel, modifier: Modifier )</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:Media.kt$@androidx.annotation.OptIn(androidx.media3.common.util.UnstableApi::class) @Composable fun Media( state: MediaState, modifier: Modifier = Modifier, surfaceType: SurfaceType = SurfaceType.SurfaceView, resizeMode: ResizeMode = ResizeMode.Fit, shutterColor: Color = Color.Black, keepContentOnPlayerReset: Boolean = false, useArtwork: Boolean = true, defaultArtworkPainter: Painter? = null, subtitles: @Composable ((CueGroup) -&gt; Unit)? = null, // TODO showBuffering: ShowBuffering = ShowBuffering.Never, buffering: @Composable (() -&gt; Unit)? = null, errorMessage: @Composable ((PlaybackException) -&gt; Unit)? = null, overlay: @Composable (() -&gt; Unit)? = null, controllerHideOnTouch: Boolean = true, controllerAutoShow: Boolean = true, controller: @Composable ((MediaState) -&gt; Unit)? = null )</ID>
    <ID>LongMethod:NavHomeGraph.kt$fun NavGraphBuilder.bpcDidiListNavGraph(navController: NavHostController)</ID>
    <ID>LongMethod:NavHomeGraph.kt$fun NavGraphBuilder.patNavGraph(navController: NavHostController)</ID>
    <ID>LongMethod:NavHomeGraph.kt$fun NavGraphBuilder.settingNavGraph(navController: NavHostController)</ID>
    <ID>LongMethod:NavHomeGraph.kt$fun NavGraphBuilder.voEndorsmentNavGraph(navController: NavHostController)</ID>
    <ID>LongMethod:NavHomeGraph.kt$fun NavGraphBuilder.wealthRankingNavGraph(navController: NavHostController)</ID>
    <ID>LongMethod:NudgeLogger.kt$LogWriter$private suspend fun getSyslogFile( output: File, after: String = "", logFileNames: ArrayList&lt;String&gt;? = null ): Boolean</ID>
    <ID>LongMethod:NumericFieldTypeQuestion.kt$@OptIn(ExperimentalFoundationApi::class) @SuppressLint("CoroutineCreationDuringComposition") @Composable fun NumericFieldTypeQuestion( modifier: Modifier, questionNumber: Int, question: String, questionId: Int, didiId: Int, questionFlag: String, optionList: List&lt;OptionsItem&gt;, pagerState: PagerState? = null, isEditPAT: Boolean = false, totalValueTitle: String, viewModel: QuestionScreenViewModel? = null, showNextButton: Boolean = false, onSubmitClick: (Int) -&gt; Unit )</ID>
    <ID>LongMethod:OtpVerificationScreen.kt$@SuppressLint("StateFlowValueCalledInComposition", "StringFormatInvalid") @Composable fun OtpVerificationScreen( navController: NavController, viewModel: OtpVerificationViewModel, modifier: Modifier = Modifier, mobileNumber: String )</ID>
    <ID>LongMethod:PATSummarySaveRequest.kt$AnswerDetailDTOListItem.Companion$fun getAnswerDetailDtoListItem( sectionAnswerEntityList: List&lt;SectionAnswerEntity&gt;, numericAnswerEntityList: List&lt;NumericAnswerEntity&gt; ): List&lt;AnswerDetailDTOListItem&gt;</ID>
    <ID>LongMethod:ParticipatoryWealthRankingSurvey.kt$@Composable fun DidiDetailExpendableContentForWealthRanking(modifier: Modifier, didi: DidiEntity, expended: Boolean)</ID>
    <ID>LongMethod:ParticipatoryWealthRankingSurvey.kt$@Composable fun DidiItemCardForWealthRanking( didi: DidiEntity, expanded: Boolean, modifier: Modifier, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongMethod:ParticipatoryWealthRankingSurvey.kt$@Composable fun ParticipatoryWealthRankingSurvey( modifier: Modifier = Modifier, navController: NavController, viewModel: WealthRankingSurveyViewModel, stepId: Int, isStepComplete: Boolean )</ID>
    <ID>LongMethod:ParticipatoryWealthRankingSurvey.kt$@Composable fun WealthRankingBox( modifier: Modifier = Modifier, count: Int, wealthRank: WealthRank, onWealthRankingBoxClicked: (wealthRank: WealthRank) -&gt; Unit )</ID>
    <ID>LongMethod:ParticipatoryWealthRankingSurvey.kt$private fun decoupledConstraintsForWealthCard(): ConstraintSet</ID>
    <ID>LongMethod:ParticipatoryWealthRankingSurvey.kt$private fun didiDetailConstraintsForWealthCard(): ConstraintSet</ID>
    <ID>LongMethod:PatDidiSummaryScreen.kt$@OptIn(ExperimentalPermissionsApi::class) @SuppressLint("StateFlowValueCalledInComposition") @Composable fun PatDidiSummaryScreen( navController: NavHostController, modifier: Modifier, isOnline: Boolean = true, patDidiSummaryViewModel: PatDidiSummaryViewModel, didiId: Int, onNavigation: () -&gt; Unit )</ID>
    <ID>LongMethod:PatDidiSummaryScreen.kt$private fun requestCameraPermission( context: Activity, viewModal: PatDidiSummaryViewModel, requestPermission: (Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel$fun uploadDidiImage(context: Context, uri: String, didiId: Int, location: String)</ID>
    <ID>LongMethod:PatSectionSummaryRepository.kt$PatSectionSummaryRepository$override suspend fun &lt;T&gt; createEventDependency( eventItem: T, eventName: EventName, dependentEvent: Events ): List&lt;EventDependencyEntity&gt;</ID>
    <ID>LongMethod:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$private suspend fun calculateDidiScore(didiId: Int)</ID>
    <ID>LongMethod:PatSurvaySectionOneSummary.kt$@Composable fun PatSummeryScreenDidiDetailBoxForSectionOne( modifier: Modifier = Modifier, screenHeight: Int, didi: DidiEntity, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongMethod:PatSurvaySectionOneSummary.kt$@OptIn(ExperimentalGlideComposeApi::class) @Composable fun SectionOneSummeryItem( modifier: Modifier = Modifier, index: Int, questionImageUrl:String, quesSummery:String, answerValue: String, optionValue:Int, isArrowVisible:Boolean = false, onCardClick:(Int)-&gt;Unit )</ID>
    <ID>LongMethod:PatSurvaySectionOneSummary.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun PatSurvaySectionSummaryScreen( navController: NavHostController, modifier: Modifier, isOnline: Boolean = true, patSectionSummaryViewModel: PatSectionSummaryViewModel, didiId: Int )</ID>
    <ID>LongMethod:PatSurvaySectionTwoSummary.kt$@Composable fun PatSummeryScreenDidiDetailBox( modifier: Modifier = Modifier, screenHeight: Int, didi: DidiEntity, onCircularImageClick:()-&gt;Unit )</ID>
    <ID>LongMethod:PatSurvaySectionTwoSummary.kt$@OptIn(ExperimentalGlideComposeApi::class) @Composable fun SectionTwoSummeryItem( modifier: Modifier = Modifier, index: Int, quesSummery:String, answerValue:String, questionType: String, questionImageUrl: String, questionFlag:String, isArrowVisible:Boolean, isSummaryEnable:Boolean, onCardClick:(Int)-&gt;Unit )</ID>
    <ID>LongMethod:PatSurvaySectionTwoSummary.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun PatSurvaySectionTwoSummaryScreen( navController: NavHostController, modifier: Modifier, patSectionSummaryViewModel: PatSectionSummaryViewModel, didiId: Int )</ID>
    <ID>LongMethod:PatSurveyCompleteSummary.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun PatSurveyCompleteSummary( navController: NavHostController, modifier: Modifier, patSectionSummaryViewModel: PatSectionSummaryViewModel, didiId: Int, fromScreen: String )</ID>
    <ID>LongMethod:PdfUtils.kt$PdfUtils$suspend fun getFormAPdf( context: Context, villageEntity: VillageEntity, didiDetailList: List&lt;DidiEntity&gt;, casteList: List&lt;CasteEntity&gt;, completionDate: String ): Boolean</ID>
    <ID>LongMethod:PdfUtils.kt$PdfUtils$suspend fun getFormAPdfForBpc( context: Context, villageEntity: VillageEntity, didiDetailList: List&lt;PoorDidiEntity&gt;, casteList: List&lt;CasteEntity&gt;, completionDate: String ): Boolean</ID>
    <ID>LongMethod:PdfUtils.kt$PdfUtils$suspend fun getFormBPdf( context: Context, villageEntity: VillageEntity, didiDetailList: List&lt;DidiEntity&gt;, casteList: List&lt;CasteEntity&gt;, completionDate: String ): Boolean</ID>
    <ID>LongMethod:PdfUtils.kt$PdfUtils$suspend fun getFormBPdfForBpc( context: Context, villageEntity: VillageEntity, didiDetailList: List&lt;PoorDidiEntity&gt;, casteList: List&lt;CasteEntity&gt;, completionDate: String ): Boolean</ID>
    <ID>LongMethod:PdfUtils.kt$PdfUtils$suspend fun getFormCPdf( context: Context, villageEntity: VillageEntity, didiDetailList: List&lt;DidiEntity&gt;, casteList: List&lt;CasteEntity&gt;, completionDate: String ): Boolean</ID>
    <ID>LongMethod:PdfUtils.kt$PdfUtils$suspend fun getFormCPdfForBpc( context: Context, villageEntity: VillageEntity, didiDetailList: List&lt;PoorDidiEntity&gt;, casteList: List&lt;CasteEntity&gt;, completionDate: String ): Boolean</ID>
    <ID>LongMethod:PdfViewer.kt$@Composable fun PdfViewer( modifier: Modifier = Modifier, navController: NavController, filePath: String, verticalArrangement: Arrangement.Vertical = Arrangement.spacedBy(8.dp) )</ID>
    <ID>LongMethod:ProfileScreen.kt$@Composable fun ProfileScreen( navController: NavHostController, modifier: Modifier = Modifier, profileScreenVideModel: ProfileScreenViewModel )</ID>
    <ID>LongMethod:ProgressScreen.kt$@Composable fun StepsBox( modifier: Modifier = Modifier, boxTitle: String, subTitle: String, stepNo: Int, index: Int, iconId: Int, viewModel: ProgressScreenViewModel?=null, isCompleted: Boolean = false, shouldBeActive: Boolean = false, onclick: (Int) -&gt; Unit )</ID>
    <ID>LongMethod:ProgressScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun ProgressScreen( modifier: Modifier = Modifier, viewModel: ProgressScreenViewModel, stepsNavHostController: NavHostController, onNavigateToStep:(Int, Int, Int, Boolean) -&gt;Unit, onNavigateToSetting:()-&gt;Unit, onBackClick:()-&gt;Unit )</ID>
    <ID>LongMethod:ProgressScreenViewModel.kt$ProgressScreenViewModel$fun callWorkFlowAPI(villageId: Int, stepId: Int, programId: Int)</ID>
    <ID>LongMethod:QuestionScreen.kt$@SuppressLint("SuspiciousIndentation", "StateFlowValueCalledInComposition", "CoroutineCreationDuringComposition" ) @OptIn(ExperimentalFoundationApi::class, ExperimentalGlideComposeApi::class) @Composable fun QuestionScreen( navController: NavHostController, modifier: Modifier, viewModel: QuestionScreenViewModel, didiId: Int, sectionType:String, questionIndex:Int )</ID>
    <ID>LongMethod:QuestionScreenViewModel.kt$QuestionScreenViewModel$fun setAnswerToQuestion( didiId: Int, questionId: Int, answerOptionModel: OptionsItem, assetAmount: Double, enteredAssetAmount: String, quesType: String, summary: String, selIndex: Int, questionFlag:String, onAnswerSave: () -&gt; Unit )</ID>
    <ID>LongMethod:RadioButtonTypeQuestion.kt$@Composable fun RadioButtonTypeQuestion( modifier: Modifier, questionNumber: Int, question: String, isLastIndex:Boolean=false, selectedOptionIndex: Int=-1, optionList: List&lt;OptionsItem?&gt;?, isAnswerSelected:Boolean =false, onAnswerSelection: (Int,Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:ReLoginScreen.kt$@Composable fun ShowOptDialogForVillageScreen( modifier: Modifier = Modifier, context: Context, viewModel: BaseViewModel, snackState: CustomSnackBarViewState, setShowDialog: (Boolean) -&gt; Unit, positiveButtonClicked: () -&gt; Unit, )</ID>
    <ID>LongMethod:RetryHelper.kt$RetryHelper$fun retryApi(apiType: ApiType)</ID>
    <ID>LongMethod:RetryHelper.kt$RetryHelper$private fun onCatchError(e: Exception, api: ApiType)</ID>
    <ID>LongMethod:ScoreComparisionScreen.kt$@Composable fun ScoreComparisionScreen( modifier: Modifier = Modifier, navController: NavHostController, viewModel: ScoreComparisonViewModel )</ID>
    <ID>LongMethod:ScoreComparisionScreen.kt$@Composable fun ScoreComparisonDidiCard( modifier: Modifier = Modifier, didiEntity: DidiEntity, passingScore: Int, viewModel: ScoreComparisonViewModel, onScoreCardClicked: (didiEntity: DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongMethod:SearchWithFilterView.kt$@Composable fun SearchWithFilterView( placeholderString: String, modifier: Modifier = Modifier, filterSelected: Boolean = false, showFilter: Boolean = true, onFilterSelected: (Boolean) -&gt; Unit, onSearchValueChange: (String) -&gt; Unit )</ID>
    <ID>LongMethod:SettingRepository.kt$SettingRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>LongMethod:SettingScreen.kt$@Composable fun ExpandedSettingsList( modifier: Modifier = Modifier, expanded: Boolean, formList: List&lt;String&gt;, viewModel: SettingViewModel, navController: NavController )</ID>
    <ID>LongMethod:SettingScreen.kt$@Composable fun SettingCard( title: String, subTitle: String, expanded: Boolean, showArrow: Boolean = false, formList: List&lt;String&gt;, viewModel: SettingViewModel, navController: NavController, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:SettingScreen.kt$@Composable fun SettingScreen( viewModel: SettingViewModel, navController: NavController, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:SettingScreen.kt$@Composable fun showBPCSyncDialog( setShowDialog: (Boolean) -&gt; Unit, settingViewModel: SettingViewModel, showBPCSyncDialog: MutableState&lt;Boolean&gt;, syncBPCStatus: MutableState&lt;Int&gt;, isBPCDataNeedToBeSynced: MutableState&lt;Boolean&gt;, extraNetworkCheck: Boolean )</ID>
    <ID>LongMethod:SettingScreen.kt$@Composable fun showSyncDialog( setShowDialog: (Boolean) -&gt; Unit, settingViewModel: SettingViewModel, showSyncDialogStatus: MutableState&lt;Boolean&gt;, isDataNeedToBeSynced: MutableState&lt;Int&gt;, extraNetworkCheck: Boolean )</ID>
    <ID>LongMethod:SimpleController.kt$@Composable fun SimpleController( mediaState: MediaState, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:SingleQuestionScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @OptIn(ExperimentalFoundationApi::class, ExperimentalGlideComposeApi::class) @Composable fun SingleQuestionScreen(navController: NavHostController, modifier: Modifier, viewModel: QuestionScreenViewModel, didiId: Int, sectionType:String, questionIndex:Int )</ID>
    <ID>LongMethod:SocialMappingActivity.kt$@Composable fun PendingTolaCard( tola: Tola, isCompleted: Boolean, onItemclick: () -&gt; Unit, onCompleteClick: () -&gt; Unit )</ID>
    <ID>LongMethod:SocialMappingActivity.kt$@Composable fun SocialMappingScreen( isOnline: Boolean, title: String, tolas: List&lt;Tola&gt;, onCompleteClick: (Int, Tola) -&gt; Unit, onItemclick: (Tola) -&gt; Unit )</ID>
    <ID>LongMethod:SocialMappingDidiListScreen.kt$@Composable fun DidiDetailExpendableContent(modifier: Modifier, didi: DidiEntity, expended: Boolean,didiViewModel: AddDidiViewModel)</ID>
    <ID>LongMethod:SocialMappingDidiListScreen.kt$@Composable fun DidiItemCard( navController:NavHostController, didiViewModel: AddDidiViewModel, didi: DidiEntity, expanded: Boolean, modifier: Modifier, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (DidiEntity) -&gt; Unit, onDeleteClicked: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt; Unit )</ID>
    <ID>LongMethod:SocialMappingDidiListScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun SocialMappingDidiListScreen( navController: NavHostController, modifier: Modifier, didiViewModel: AddDidiViewModel, villageId: Int, stepId: Int )</ID>
    <ID>LongMethod:SocialMappingDidiListScreen.kt$fun decoupledConstraintsForPatCard(): ConstraintSet</ID>
    <ID>LongMethod:SocialMappingDidiListScreen.kt$private fun decoupledConstraints(): ConstraintSet</ID>
    <ID>LongMethod:SocialMappingDidiListScreen.kt$private fun didiDetailConstraints(): ConstraintSet</ID>
    <ID>LongMethod:SplashScreen.kt$@Composable fun SplashScreen( navController: NavController, modifier: Modifier = Modifier, viewModel: ConfigViewModel )</ID>
    <ID>LongMethod:SurveySummary.kt$@SuppressLint("StringFormatMatches", "StateFlowValueCalledInComposition") @Composable fun SurveySummary( modifier: Modifier = Modifier, navController: NavHostController, fromScreen: String, surveySummaryViewModel: SurveySummaryViewModel, stepId: Int, isStepComplete: Boolean )</ID>
    <ID>LongMethod:SurveySummaryViewModel.kt$SurveySummaryViewModel$@SuppressLint("SuspiciousIndentation") fun savePATSummeryToServer(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SurveySummaryViewModel.kt$SurveySummaryViewModel$fun callWorkFlowAPI(villageId: Int,stepId: Int, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SurveySummaryViewModel.kt$SurveySummaryViewModel$fun updateBpcPatStatusToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SurveySummaryViewModel.kt$SurveySummaryViewModel$private fun calculateDidiScore(didiId: Int)</ID>
    <ID>LongMethod:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$@SuppressLint("SuspiciousIndentation") fun savePATSummeryToServer(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$fun callWorkFlowAPIForBpc( networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$fun sendBpcMatchScore(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$fun updateBpcPatStatusToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$private fun calculateDidiScore(didiId: Int)</ID>
    <ID>LongMethod:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$private fun updateBpcStepsToServer(needToEditStep: MutableList&lt;StepListEntity&gt;, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$@SuppressLint("SuspiciousIndentation") fun savePATSummeryToServer(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$fun addDidisToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$fun addTolasToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$fun callWorkFlowAPI(steps: List&lt;StepListEntity&gt;, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$fun updateDidiToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$fun updateVoStatusToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$fun updateWealthRankingToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$fun uploadFormCAndD(villageId : Int,context: Context)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$private fun calculateDidiScore(didiId: Int)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$private fun deleteTolaToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$private fun updateStepsToServer(needToEdiStep: MutableList&lt;StepListEntity&gt;, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:SyncHelper.kt$SyncHelper$private fun uploadDidiImagesToServer(context : Context)</ID>
    <ID>LongMethod:TimeBar.kt$@Composable fun TimeBar( durationMs: Long, positionMs: Long, bufferedPositionMs: Long, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = PaddingValues(0.dp), scrubberCenterAsAnchor: Boolean = false, onScrubStart: ((positionMs: Long) -&gt; Unit)? = null, onScrubMove: ((positionMs: Long) -&gt; Unit)? = null, onScrubStop: ((positionMs: Long) -&gt; Unit)? = null, progress: @Composable (current: Float, scrubbed: Float, buffered: Float) -&gt; Unit = { _, scrubbed, buffered -&gt; // by default, use scrubbed progress as played progress TimeBarProgress(played = scrubbed, buffered = buffered) }, scrubber: @Composable (enable: Boolean, scrubbing: Boolean) -&gt; Unit = { enable, scrubbing -&gt; TimeBarScrubber(enable, scrubbing) } )</ID>
    <ID>LongMethod:TransectWalkRepository.kt$TransectWalkRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$fun addTolasToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$fun callWorkFlowAPI( villageId: Int, stepId: Int, networkCallbackListener: NetworkCallbackListener )</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$fun checkTolaDeleteStatus(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$fun checkTolaUpdateStatus(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$fun markTransectWalkIncomplete( stepId: Int, villageId: Int, isOnline: Boolean, networkCallbackListener: NetworkCallbackListener )</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$fun removeTola( tolaId: Int, context: Context, isOnline: Boolean, networkCallbackListener: NetworkCallbackListener, villageId: Int, stepId: Int )</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$private fun checkTolaAddStatus(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$private fun deleteTolaToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:TransectWalkViewModel.kt$TransectWalkViewModel$private fun updateTolasToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:TransetWalkScreen.kt$@Composable fun TransectWalkScreen( modifier: Modifier = Modifier, navController: NavController, viewModel: TransectWalkViewModel, villageId: Int, stepId: Int )</ID>
    <ID>LongMethod:Utils.kt$fun compressImage(imageUri: String, activity: Context,name:String): String?</ID>
    <ID>LongMethod:VideoDetailPlayerScreen.kt$@Composable fun FullscreenView( navController: NavHostController, viewModel: VideDetailPlayerViewModel, videoId: Int )</ID>
    <ID>LongMethod:VideoDetailPlayerScreen.kt$@Composable private fun MediaContent( mediaState: MediaState, isLandscape: Boolean, modifier: Modifier = Modifier, navController: NavHostController )</ID>
    <ID>LongMethod:VideoListScreen.kt$@Composable fun VideoItemCard( modifier: Modifier, videoItem: TrainingVideoEntity, videoListViewModel: VideoListViewModel, mDownloadStatus: DownloadStatus, mainActivity: MainActivity )</ID>
    <ID>LongMethod:VideoListScreen.kt$@Composable fun VideoListScreen( navController: NavHostController, modifier: Modifier = Modifier.fillMaxSize(), viewModel: VideoListViewModel )</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun callWorkFlowAPIForBpc( networkCallbackListener: NetworkCallbackListener, prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun fetchUserAndVillageDetails(forceRefresh: Boolean = false, apiSuccess: (success: UserAndVillageDetailsModel) -&gt; Unit)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun refreshBpcData(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun refreshCrpData(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$fun refreshStepListData( taskCompleted: (success: Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun calculateDidiScore(didiId: Int, prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun callCrpWorkFlowAPI(prefRepo: PrefRepo, stepList: List&lt;StepListEntity&gt;)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchDidiForBpc(villageId: Int, prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchDidiForCrp(prefRepo: PrefRepo, villageId: Int)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchPoorDidisForBpc(villageId: Int, prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchQuestions(prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun savePATSummeryToServer(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun savePATSummeryToServerForBpc(networkCallbackListener: NetworkCallbackListener, prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun sendBpcMatchScore(networkCallbackListener: NetworkCallbackListener, prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun updateBpcStepsToServer(needToEditStep: MutableList&lt;StepListEntity&gt;, networkCallbackListener: NetworkCallbackListener, prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun updateStepsToServer(prefRepo: PrefRepo, needToEdiStep: MutableList&lt;StepListEntity&gt;)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun updateVoStatusToNetwork(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun updateWealthRankingToNetwork(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun uploadDidiImagesToServer(prefRepo: PrefRepo, context : Context)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private fun uploadFormCAndD(prefRepo: PrefRepo, villageId: Int, context: Context)</ID>
    <ID>LongMethod:VillageSelectionRepository.kt$VillageSelectionRepository$private suspend fun updateBpcPatStatusToNetwork(networkCallbackListener: NetworkCallbackListener, prefRepo: PrefRepo)</ID>
    <ID>LongMethod:VillageSelectionScreen.kt$@Composable fun VillageAndVoBoxForBottomSheet( modifier: Modifier = Modifier, context: Context, tolaName: String = "", voName: String = "", index: Int, isUserBPC:Boolean, isVoEndorsementComplete:Boolean =false, selectedIndex: Int, statusId:Int=0, stepId:Int=0, onVillageSeleted: (Int) -&gt; Unit )</ID>
    <ID>LongMethod:VillageSelectionScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun VillageSelectionScreen( modifier: Modifier = Modifier, navController: NavController, viewModel: VillageSelectionViewModel, onNavigateToSetting:()-&gt;Unit )</ID>
    <ID>LongMethod:VillageSelectionViewModel.kt$VillageSelectionViewModel$private fun fetchDataForBpc(context: Context)</ID>
    <ID>LongMethod:VillageSelectionViewModel.kt$VillageSelectionViewModel$private fun fetchQuestions()</ID>
    <ID>LongMethod:VillageSelectionViewModel.kt$VillageSelectionViewModel$private fun fetchUserDetails(apiSuccess: (success: Boolean) -&gt; Unit)</ID>
    <ID>LongMethod:VillageSelectionViewModel.kt$VillageSelectionViewModel$private fun fetchVillageList(context: Context)</ID>
    <ID>LongMethod:VoEndorsementScreen.kt$@Composable fun DidiItemCardForVo( navController: NavHostController, didi: DidiEntity, modifier: Modifier, onItemClick: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongMethod:VoEndorsementScreen.kt$@Composable fun ShowDidisFromTolaForVo( navController: NavHostController, viewModel: VoEndorsementScreenViewModel, didiTola: String, didiList: List&lt;DidiEntity&gt;, modifier: Modifier, onNavigate: (String) -&gt; Unit, onCircularImageClick: (DidiEntity) -&gt; Unit )</ID>
    <ID>LongMethod:VoEndorsementScreen.kt$@Composable fun VoEndorsementScreen( modifier: Modifier = Modifier, navController: NavHostController, viewModel: VoEndorsementScreenViewModel, stepId: Int )</ID>
    <ID>LongMethod:VoEndorsementStepScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun VoEndorsementStepScreen( modifier: Modifier = Modifier, navController: NavHostController, viewModel: VoEndorsementScreenViewModel, stepId: Int, isStepComplete:Boolean, onNavigateToSummary:()-&gt; Unit )</ID>
    <ID>LongMethod:VoEndorsementSummaryScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @OptIn(ExperimentalFoundationApi::class) @Composable fun VoEndorsementSummaryScreen( navController: NavController, viewModel: VoEndorsementSummaryViewModel, didiId: Int, didiStatus:Int )</ID>
    <ID>LongMethod:WealthRankingScreen.kt$@Composable fun ExpandableContent( didiEntity: DidiEntity, visible: Boolean = true, onRankSelected: (wealthRank: WealthRank) -&gt; Unit )</ID>
    <ID>LongMethod:WealthRankingScreen.kt$@Composable fun ShowDidisFromTola( didiTola: String, didiList: List&lt;DidiEntity&gt;, viewModel: WealthRankingViewModel, expandedIds: List&lt;Int&gt;, modifier: Modifier, parentIndex: Int, coroutineScope: CoroutineScope, listState: LazyListState )</ID>
    <ID>LongMethod:WealthRankingScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun WealthRankingScreen( navController: NavController, viewModel: WealthRankingViewModel, modifier: Modifier, villageId: Int, stepId: Int, )</ID>
    <ID>LongMethod:WealthRankingScreen.kt$@SuppressLint("UnusedTransitionTargetStateParameter") @Composable fun ExpandableCard( didiEntity: DidiEntity, viewModel: WealthRankingViewModel, onCardArrowClick: (fromArrow: Boolean) -&gt; Unit, expanded: Boolean, onCircularImageClick:(DidiEntity) -&gt; Unit )</ID>
    <ID>LongMethod:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$fun callWorkFlowAPI( villageId: Int, stepId: Int, networkCallbackListener: NetworkCallbackListener )</ID>
    <ID>LongMethod:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$fun updateWealthRankingToNetwork(networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>LongMethod:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel.&lt;no name provided&gt;$override fun run()</ID>
    <ID>LongMethod:YesNoQuestion.kt$@Composable fun YesNoQuestion( modifier: Modifier, questionNumber: Int, question: String, answer: Boolean = false, answered: Boolean = false, onYesClicked: ()-&gt; Unit, onNoClicked: ()-&gt; Unit )</ID>
    <ID>LongParameterList:AddDidiRepository.kt$AddDidiRepository$( id: Int, serverId: Int, needsToPost: Boolean, transactionId: String, createdDate: Long, modifiedDate: Long )</ID>
    <ID>LongParameterList:AddDidiRepository.kt$AddDidiRepository$( val prefRepo: PrefRepo, val casteListDao: CasteListDao, val tolaDao: TolaDao, val stepsListDao: StepsListDao, val villageListDao: VillageListDao, val lastSelectedTolaDao: LastSelectedTolaDao, val questionListDao: QuestionListDao, val answerDao: AnswerDao, val numericAnswerDao: NumericAnswerDao, )</ID>
    <ID>LongParameterList:AddDidiScreen.kt$(navController: NavHostController, modifier: Modifier, isOnline: Boolean = true, didiViewModel: AddDidiViewModel?=null, didiDetailId:Int,onNavigation:()-&gt;Unit)</ID>
    <ID>LongParameterList:AddTola.kt$( modifier: Modifier = Modifier, tolaName: String = "khabd", tolaLocation: LocationCoordinates?, isLocationAvailable: Boolean = false, isTransectWalkCompleted: Boolean = false, deleteButtonClicked: () -&gt; Unit, listState: LazyListState, coroutineScope : CoroutineScope, index : Int, saveButtonClicked: (newName: String, newLocation: LocationCoordinates?) -&gt; Unit )</ID>
    <ID>LongParameterList:AnswerDao.kt$AnswerDao$(didiId: Int,optionId:Int ,questionId: Int,actionType:String,optionValue:Int,weight:Int,answerValue:String,type:String,totalAssetAmount:Double,summary:String,assetAmount:String,questionFlag:String)</ID>
    <ID>LongParameterList:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$( val prefRepo: PrefRepo, val apiService: ApiService, val villageListDao: VillageListDao, val stepsListDao: StepsListDao, val tolaDao: TolaDao, val casteListDao: CasteListDao, val languageListDao: LanguageListDao, val questionListDao: QuestionListDao, val trainingVideoDao: TrainingVideoDao, val numericAnswerDao: NumericAnswerDao, val answerDao: AnswerDao, val bpcSummaryDao: BpcSummaryDao, val poorDidiListDao: PoorDidiListDao, val androidDownloader: AndroidDownloader )</ID>
    <ID>LongParameterList:BpcAddMoreDidiScreen.kt$( didi: DidiEntity, expanded: Boolean, modifier: Modifier, isChecked: Boolean, isForReplace: Boolean, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (Boolean, DidiEntity) -&gt; Unit )</ID>
    <ID>LongParameterList:BpcAddMoreDidiScreen.kt$( didiTola: String, didiList: List&lt;DidiEntity&gt;, modifier: Modifier, isForReplace: Boolean, expandedIds: List&lt;Int&gt;, isCheckedIds: List&lt;Int&gt;, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (Boolean, DidiEntity) -&gt; Unit )</ID>
    <ID>LongParameterList:BpcPrgressScreen.kt$( modifier: Modifier = Modifier, boxTitle: String, stepNo: Int, index: Int, iconId: Int, viewModel: BpcProgressScreenViewModel, stepListData: SnapshotStateList&lt;StepListEntity&gt;, isCompleted: Boolean = false, shouldBeActive: Boolean = false, onclick: (Int) -&gt; Unit )</ID>
    <ID>LongParameterList:BpcPrgressScreen.kt$( modifier: Modifier = Modifier, bpcProgreesScreenViewModel: BpcProgressScreenViewModel, navController: NavHostController, onNavigateToStep:(Int, Int) -&gt;Unit, onNavigateToSetting:()-&gt;Unit, onBackClick:()-&gt;Unit )</ID>
    <ID>LongParameterList:BpcVillageScreenViewModel.kt$BpcVillageScreenViewModel$( val villageListDao: VillageListDao, val stepsListDao: StepsListDao, val tolaDao: TolaDao, val didiDao: DidiDao, val casteListDao: CasteListDao, val languageListDao: LanguageListDao, val questionListDao: QuestionListDao, val trainingVideoDao: TrainingVideoDao, val numericAnswerDao: NumericAnswerDao, val answerDao: AnswerDao, val bpcSummaryDao: BpcSummaryDao, val poorDidiListDao: PoorDidiListDao, val userDao: UserDao, val lastSelectedTolaDao: LastSelectedTolaDao, val villageSelectionRepository: VillageSelectionRepository, private val syncManagerDatabase: SyncManagerDatabase, )</ID>
    <ID>LongParameterList:BpcVillageSelectionScreen.kt$( modifier: Modifier = Modifier, context: Context, villageEntity: VillageEntity, index: Int, selectedIndex: Int, onVillageSeleted: (Int) -&gt; Unit )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, buttonText: String, icon: ImageVector, imageIcon:Int, shouldBeActive: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, buttonTitle: String = "Yes", textColor: Color, iconTintColor: Color, buttonBackgroundColor: Color = white, buttonBorderColor: Color = lightGray2, icon: Painter = painterResource(id = R.drawable.icon_check), onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, buttonTitle: String = stringResource(id = R.string.add_tola), outlineColor: Color = greyBorder, textColor: Color = blueDark, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, buttonTitle: String, color: Color = languageItemActiveBg, textColor: Color = blueDark, horizontalPadding : Dp = 10.dp, isArrowRequired: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, buttonTitle: String, icon: ImageVector, contentColor: Color, borderColor: Color = greyBorder, showIcon: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, buttonTitle: String, isArrowRequired: Boolean = true, isActive: Boolean = true, color: Color = languageItemActiveBg, textColor: Color = Color.White, iconTintColor: Color = Color.White, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, buttonTitle: String, isArrowRequired: Boolean = true, isActive: Boolean = true, textColor: Color = Color.White, iconTintColor: Color = Color.White, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, positiveButtonText: String, negativeButtonRequired: Boolean = true, negativeButtonText: String = "", positiveButtonOnClick: () -&gt; Unit, negativeButtonOnClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$( modifier: Modifier = Modifier, positiveButtonText: String, negativeButtonRequired: Boolean = true, preFilledValue: Int, negativeButtonText: String = "", positiveButtonOnClick: () -&gt; Unit, negativeButtonOnClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:ButtonsUtil.kt$(modifier: Modifier, optionText:String, currentValue: Int=0, optionImageUrl:String, questionFlag:String, optionList: List&lt;OptionsItem&gt;, optionValue:Int?=0, onDecrementClick: (Int)-&gt;Unit, onIncrementClick: (Int)-&gt;Unit, onValueChange: (String) -&gt; Unit, onLimitFailed: (String) -&gt; Unit)</ID>
    <ID>LongParameterList:CameraView.kt$( fileNameFormat: String, context: Context, viewModel: PatDidiSummaryViewModel, didiEntity: DidiEntity, imageCapture: ImageCapture, outputDirectory: File, executor: Executor, onImageCaptured: (Uri, String) -&gt; Unit, onError: (ImageCaptureException) -&gt; Unit )</ID>
    <ID>LongParameterList:CameraView.kt$( formName: String, imageCapture: ImageCapture, outputDirectory: File, executor: Executor, onImageCaptured: (Uri, String) -&gt; Unit, onError: (ImageCaptureException) -&gt; Unit )</ID>
    <ID>LongParameterList:CameraView.kt$( modifier: Modifier = Modifier, outputDirectory: File, formName: String, executor: Executor, onImageCaptured: (Uri, String) -&gt; Unit, onCloseButtonClicked: () -&gt; Unit, onError: (ImageCaptureException) -&gt; Unit )</ID>
    <ID>LongParameterList:CameraView.kt$( modifier: Modifier = Modifier, outputDirectory: File, viewModel: PatDidiSummaryViewModel, didiEntity: DidiEntity, executor: Executor, onImageCaptured: (Uri, String) -&gt; Unit, onCloseButtonClicked: () -&gt; Unit, onError: (ImageCaptureException) -&gt; Unit )</ID>
    <ID>LongParameterList:CircularProgressView.kt$( modifier: Modifier, circleRadius: Float = 100f, backgroundColor: Color = Color.Transparent, progressBackgroundColor: Color = grayProgressBackground, progressColor: Color = blueDark, initialPosition: Int = 0, minProgress: Int = 0, maxProgress: Int = 6, borderThickness: Dp = 7.dp, centerTextSize: TextUnit = 14.sp )</ID>
    <ID>LongParameterList:CircularProgressView.kt$( modifier: Modifier, circleRadius: Float = 16f, backgroundColor: Color = Color.Transparent, progressBackgroundColor: Color = grayProgressBackground, progressColor: Color = blueDark, initialPosition: Float = 0f, maxProgress: Int = 100, borderThickness: Dp = 2.dp, )</ID>
    <ID>LongParameterList:CircularProgressView.kt$( modifier: Modifier, circleRadius: Float = 25f, icon: Painter, backgroundColor: Color = Color.Transparent, progressBackgroundColor: Color = grayProgressBackground, progressColor: Color = blueDark, initialPosition: Int = 0, minProgress: Int = 0, maxProgress: Int = 6, borderThickness: Dp = 7.dp, )</ID>
    <ID>LongParameterList:ComposableUtils.kt$( navController: NavHostController, prefRepo: PrefRepo, didi: DidiEntity, expanded: Boolean, modifier: Modifier, answerDao: AnswerDao, isFromNotAvailableCard:Boolean?=false, isVoEndorsementComplete: Boolean?=false, questionListDao: QuestionListDao, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onNotAvailableClick: (DidiEntity) -&gt; Unit, onItemClick: (DidiEntity) -&gt; Unit, onCircularImageClick: (DidiEntity) -&gt; Unit )</ID>
    <ID>LongParameterList:ComposableUtils.kt$( navController:NavHostController, prefRepo: PrefRepo, didiTola: String, didiList: List&lt;DidiEntity&gt;, modifier: Modifier, expandedIds: List&lt;Int&gt;, answerDao: AnswerDao, questionListDao: QuestionListDao, addDidiViewModel: AddDidiViewModel?=null, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onNavigate: (DidiEntity) -&gt; Unit, onDeleteClicked: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongParameterList:ComposableUtils.kt$( title:String, message:String, positiveButtonTitle : String ?=EMPTY_STRING, negativeButtonTitle : String ?=EMPTY_STRING, dismissOnBackPress: Boolean? = true, onPositiveButtonClick:()-&gt;Unit, onNegativeButtonClick:()-&gt;Unit)</ID>
    <ID>LongParameterList:ComposeableUtils.kt$( didi: DidiEntity, modifier: Modifier, isVOEndorsementComplete:Boolean ?=true, onItemClick: (DidiEntity) -&gt; Unit, onNotAvailableClick: (DidiEntity) -&gt;Unit, onStartPATClick: (DidiEntity) -&gt;Unit, )</ID>
    <ID>LongParameterList:CustomSnackBarView.kt$( message: String?, position: CustomSnackBarViewPosition, containerColor: Color, contentColor: Color, verticalPadding: Dp, horizontalPadding: Dp, icon: Int, isCustomIcon: Boolean, isSuccess: Boolean, )</ID>
    <ID>LongParameterList:CustomSnackBarView.kt$( modifier: Modifier = Modifier, state: CustomSnackBarViewState, position: CustomSnackBarViewPosition = CustomSnackBarViewPosition.Bottom, duration: Long = 3000L, icon: Int, containerColor: Color = Color.Gray, contentColor: Color = TextWhite, enterAnimation: EnterTransition = expandVertically( animationSpec = tween(delayMillis = 300), expandFrom = when(position) { is CustomSnackBarViewPosition.Top -&gt; Alignment.Top is CustomSnackBarViewPosition.Bottom -&gt; Alignment.Bottom is CustomSnackBarViewPosition.Float -&gt; Alignment.CenterVertically } ), exitAnimation: ExitTransition = shrinkVertically( animationSpec = tween(delayMillis = 300), shrinkTowards = when(position) { is CustomSnackBarViewPosition.Top -&gt; Alignment.Top is CustomSnackBarViewPosition.Bottom -&gt; Alignment.Bottom is CustomSnackBarViewPosition.Float -&gt; Alignment.CenterVertically } ), verticalPadding: Dp = 12.dp, horizontalPadding: Dp = 8.dp )</ID>
    <ID>LongParameterList:CustomSnackBarView.kt$( state: CustomSnackBarViewState, duration: Long, position: CustomSnackBarViewPosition, containerColor: Color, contentColor: Color, verticalPadding: Dp, horizontalPadding: Dp, icon: Int, enterAnimation: EnterTransition, exitAnimation: ExitTransition, )</ID>
    <ID>LongParameterList:DidiDao.kt$DidiDao$(id: Int, serverId: Int, needsToPost: Boolean, transactionId: String, createdDate: Long, modifiedDate: Long)</ID>
    <ID>LongParameterList:DidiDao.kt$DidiDao$(patSurveyStatus: Int,section1Status:Int,section2Status:Int,didiId:Int,shgFlag:Int,patExclusionStatus: Int)</ID>
    <ID>LongParameterList:DidiImageUploadRequest.kt$DidiImageUploadRequest.Companion$( didi: DidiEntity, filePath: String, location: String, userType: String, tolaServerId: Int? = 0, cohortdeviceId: String? = "" )</ID>
    <ID>LongParameterList:DidiScreen.kt$( navController: NavHostController, modifier: Modifier = Modifier, didiViewModel: AddDidiViewModel, villageId:Int, stepId:Int, onNavigateToAddDidi:()-&gt; Unit, onNavigateToSummary:()-&gt; Unit )</ID>
    <ID>LongParameterList:DropDownWithTitle.kt$( title: String, hintText: String = stringResource(id = R.string.select), items: List&lt;T&gt;, modifier: Modifier, dropDownBorder: Color = borderGrey, dropDownBackground: Color = white, isRequiredField: Boolean = false, listTypeTola:Boolean = false, selectedItem: String = "", expanded: Boolean = false, mTextFieldSize: Size, onExpandedChange: (Boolean) -&gt; Unit, onDismissRequest: () -&gt; Unit, onGlobalPositioned: (LayoutCoordinates) -&gt; Unit, onItemSelected: (T) -&gt; Unit )</ID>
    <ID>LongParameterList:EditTextWithTitle.kt$( titleText: String, isRequiredField: Boolean = false, modifier: Modifier, currentString: String, hint: String = stringResource(id = R.string.enter), onValueChange: (String) -&gt; Unit )</ID>
    <ID>LongParameterList:EditTextWithTitle.kt$( value: String, onValueChange: (String) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, readOnly: Boolean = false, textStyle: TextStyle = LocalTextStyle.current, placeholder: @Composable (() -&gt; Unit)? = null, leadingIcon: @Composable (() -&gt; Unit)? = null, trailingIcon: @Composable (() -&gt; Unit)? = null, isError: Boolean = false, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default, singleLine: Boolean = false, maxLines: Int = if (singleLine) 1 else Int.MAX_VALUE, minLines: Int = 1, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, shape: Shape = MaterialTheme.shapes.small, colors: TextFieldColors = TextFieldDefaults.outlinedTextFieldColors() )</ID>
    <ID>LongParameterList:ExportModule.kt$ExportModule$( prefRepo: PrefRepo, apiService: ApiService, didiDao: DidiDao, tolaDao: TolaDao, answerDao: AnswerDao, numericAnswerDao: NumericAnswerDao )</ID>
    <ID>LongParameterList:FailureAPICallback.kt$FailureAPICallback$( code: Int, reqUrl: String = "", throwable: Throwable?, errorMessage: String? = null, httpCode: Int = -1, mError: ErrorDataModel? = null)</ID>
    <ID>LongParameterList:FormPictureScreen.kt$( modifier: Modifier = Modifier, expanded: Boolean, pageList: MutableList&lt;Int&gt;, navController: NavController, addPageClicked: () -&gt; Unit, pageItemClicked: (pageNumber: Int) -&gt; Unit, retakeButtonClicked: (index: Int) -&gt; Unit, deleteButtonClicked: () -&gt; Unit )</ID>
    <ID>LongParameterList:FormPictureScreen.kt$( modifier: Modifier = Modifier, navController: NavController, showIcon: Boolean, cardTitle: String, contentColor: Color, borderColor: Color, expanded: Boolean, icon: ImageVector = Icons.Default.Add, pageList: MutableList&lt;Int&gt;, pageItemClicked: (pageNumber: Int) -&gt; Unit, formPictureCardClicked: () -&gt; Unit, addPageClicked: () -&gt; Unit, retakeButtonClicked: (index: Int) -&gt; Unit, deleteButtonClicked: () -&gt; Unit )</ID>
    <ID>LongParameterList:FormPictureScreen.kt$( modifier: Modifier = Modifier, pageNumber: Int, index: Int, pageItemClicked: (pageNumber: Int) -&gt; Unit, retakeButtonClicked: (index: Int) -&gt; Unit, deleteButtonClicked: (index: Int) -&gt; Unit )</ID>
    <ID>LongParameterList:HtmlText.kt$( text: String, modifier: Modifier = Modifier, style: TextStyle = TextStyle.Default, softWrap: Boolean = true, overflow: TextOverflow = TextOverflow.Clip, maxLines: Int = Int.MAX_VALUE, onTextLayout: (TextLayoutResult) -&gt; Unit = {}, linkClicked: ((String) -&gt; Unit)? = null, fontSize: TextUnit = 14.sp, flags: Int = HtmlCompat.FROM_HTML_MODE_COMPACT, URLSpanStyle: SpanStyle = SpanStyle( color = linkTextColor(), textDecoration = TextDecoration.Underline ), customSpannedHandler: ((Spanned) -&gt; AnnotatedString)? = null )</ID>
    <ID>LongParameterList:IncrementDecrementButton.kt$(modifier: Modifier = Modifier, animationType: AnimationType = AnimationType.FADE, value: Int = 0, onDecrementClick: (Int) -&gt; Unit = {}, onIncrementClick: (Int) -&gt; Unit = {}, onMiddleClick: (Int) -&gt; Unit = {}, decrementComposable: @Composable (cb: (Int) -&gt; Unit) -&gt; Unit = { cb -&gt; DefaultDecrementComposable( modifier = modifier, onDecrementClick = { cb(-1) } ) }, incrementComposable: @Composable (cb: (Int) -&gt; Unit) -&gt; Unit = { cb -&gt; DefaultIncrementComposable( modifier = modifier, onIncrementClick = { cb(-1) } ) }, middleComposable: @Composable (Int, cb: (Int) -&gt; Unit) -&gt; Unit = { buttonValue, cb -&gt; DefaultMiddleComposable( modifier = modifier, onMiddleClick = { cb(-1) }, value = buttonValue ) }, )</ID>
    <ID>LongParameterList:IncrementDecrementButton.kt$(modifier: Modifier = Modifier, animationType: AnimationType = AnimationType.FADE, value: Int = 0, onDecrementClick: (Int) -&gt; Unit = {}, onIncrementClick: (Int) -&gt; Unit = {}, onMiddleClick: (Int) -&gt; Unit = {}, decrementComposable: @Composable (cb: (Int) -&gt; Unit) -&gt; Unit = { cb -&gt; DefaultDecrementComposable( modifier = modifier, onDecrementClick = { cb(-1) } ) }, incrementComposable: @Composable (cb: (Int) -&gt; Unit) -&gt; Unit = { cb -&gt; DefaultIncrementComposable( modifier = modifier, onIncrementClick = { cb(-1) } ) }, middleComposable: @Composable (Int, cb: (Int) -&gt; Unit) -&gt; Unit = { buttonValue, cb -&gt; DefaultMiddleComposable( modifier = modifier.wrapContentWidth(), onMiddleClick = { cb(-1) }, value = buttonValue ) }, )</ID>
    <ID>LongParameterList:ListTypeQuestion.kt$( modifier: Modifier, questionNumber: Int, question: String, index: Int=-1, selectedIndex: Int, optionList: List&lt;OptionsItem?&gt;?, isAnswerSelected:Boolean =false, onAnswerSelection: (Int,Int) -&gt; Unit )</ID>
    <ID>LongParameterList:MainActivityViewModel.kt$MainActivityViewModel$( val prefRepo: PrefRepo, val apiService: ApiService, val tolaDao: TolaDao, val stepsListDao: StepsListDao, val villegeListDao: VillageListDao, val didiDao: DidiDao, val answerDao: AnswerDao, val numericAnswerDao: NumericAnswerDao, val questionDao: QuestionListDao, val casteListDao: CasteListDao, val trainingVideoDao: TrainingVideoDao, val bpcSummaryDao: BpcSummaryDao, val poorDidiListDao: PoorDidiListDao, val languageListDao: LanguageListDao, val connectionMonitor: ConnectionMonitorV2 )</ID>
    <ID>LongParameterList:Media.kt$( state: MediaState, modifier: Modifier = Modifier, surfaceType: SurfaceType = SurfaceType.SurfaceView, resizeMode: ResizeMode = ResizeMode.Fit, shutterColor: Color = Color.Black, keepContentOnPlayerReset: Boolean = false, useArtwork: Boolean = true, defaultArtworkPainter: Painter? = null, subtitles: @Composable ((CueGroup) -&gt; Unit)? = null, // TODO showBuffering: ShowBuffering = ShowBuffering.Never, buffering: @Composable (() -&gt; Unit)? = null, errorMessage: @Composable ((PlaybackException) -&gt; Unit)? = null, overlay: @Composable (() -&gt; Unit)? = null, controllerHideOnTouch: Boolean = true, controllerAutoShow: Boolean = true, controller: @Composable ((MediaState) -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:NumericFieldTypeQuestion.kt$( modifier: Modifier, questionNumber: Int, question: String, questionId: Int, didiId: Int, questionFlag: String, optionList: List&lt;OptionsItem&gt;, pagerState: PagerState? = null, isEditPAT: Boolean = false, totalValueTitle: String, viewModel: QuestionScreenViewModel? = null, showNextButton: Boolean = false, onSubmitClick: (Int) -&gt; Unit )</ID>
    <ID>LongParameterList:PATSummarySaveRequest.kt$PATSummarySaveRequest.Companion$( didiEntity: DidiEntity, answerDetailDTOList: List&lt;AnswerDetailDTOListItem?&gt;, villageEntity: VillageEntity, surveyId: Int, languageId: Int, userType: String )</ID>
    <ID>LongParameterList:ParticipatoryWealthRankingSurvey.kt$( didi: DidiEntity, expanded: Boolean, modifier: Modifier, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongParameterList:ParticipatoryWealthRankingSurvey.kt$( title: String, message: String, isBulletShow:Boolean?=false, list: List&lt;String&gt; ?= emptyList(), setShowDialog: (Boolean) -&gt; Unit, positiveButtonClicked: () -&gt; Unit )</ID>
    <ID>LongParameterList:PatDidiSummaryScreen.kt$( navController: NavHostController, modifier: Modifier, isOnline: Boolean = true, patDidiSummaryViewModel: PatDidiSummaryViewModel, didiId: Int, onNavigation: () -&gt; Unit )</ID>
    <ID>LongParameterList:PatSurvaySectionOneSummary.kt$( modifier: Modifier = Modifier, index: Int, questionImageUrl:String, quesSummery:String, answerValue: String, optionValue:Int, isArrowVisible:Boolean = false, onCardClick:(Int)-&gt;Unit )</ID>
    <ID>LongParameterList:PatSurvaySectionTwoSummary.kt$( modifier: Modifier = Modifier, index: Int, quesSummery:String, answerValue:String, questionType: String, questionImageUrl: String, questionFlag:String, isArrowVisible:Boolean, isSummaryEnable:Boolean, onCardClick:(Int)-&gt;Unit )</ID>
    <ID>LongParameterList:ProgressScreen.kt$( modifier: Modifier = Modifier, boxTitle: String, subTitle: String, stepNo: Int, index: Int, iconId: Int, viewModel: ProgressScreenViewModel?=null, isCompleted: Boolean = false, shouldBeActive: Boolean = false, onclick: (Int) -&gt; Unit )</ID>
    <ID>LongParameterList:ProgressScreen.kt$( modifier: Modifier = Modifier, context: Context, viewModel: BaseViewModel, snackState: CustomSnackBarViewState, setShowDialog: (Boolean) -&gt; Unit, positiveButtonClicked: () -&gt; Unit, /*isResendOTPEnable: MutableState&lt;Boolean&gt;, formattedTime: MutableState&lt;String&gt;, isResendOTPVisible: MutableState&lt;Boolean&gt;*/ )</ID>
    <ID>LongParameterList:ProgressScreen.kt$( modifier: Modifier = Modifier, name: String, identity: String, isBPCUser:Boolean, isBackButtonShow:Boolean, onBackClick:()-&gt;Unit )</ID>
    <ID>LongParameterList:ProgressScreen.kt$( modifier: Modifier = Modifier, viewModel: ProgressScreenViewModel, stepsNavHostController: NavHostController, onNavigateToStep:(Int, Int, Int, Boolean) -&gt;Unit, onNavigateToSetting:()-&gt;Unit, onBackClick:()-&gt;Unit )</ID>
    <ID>LongParameterList:QuestionScreen.kt$( navController: NavHostController, modifier: Modifier, viewModel: QuestionScreenViewModel, didiId: Int, sectionType:String, questionIndex:Int )</ID>
    <ID>LongParameterList:QuestionScreenRepository.kt$QuestionScreenRepository$( didiId: Int, optionId: Int, questionId: Int, actionType: String, optionValue: Int, weight: Int, answerValue: String, type: String, totalAssetAmount: Double, summary: String, assetAmount: String, questionFlag: String )</ID>
    <ID>LongParameterList:QuestionScreenRepository.kt$QuestionScreenRepository$( val prefRepo: PrefRepo, val villageListDao: VillageListDao, val questionListDao: QuestionListDao, val answerDao: AnswerDao, val apiService: ApiService, val numericAnswerDao: NumericAnswerDao, val stepsListDao: StepsListDao )</ID>
    <ID>LongParameterList:QuestionScreenViewModel.kt$QuestionScreenViewModel$( didiId: Int, questionId: Int, answerOptionModel: OptionsItem, assetAmount: Double, enteredAssetAmount: String, quesType: String, summary: String, selIndex: Int, questionFlag:String, onAnswerSave: () -&gt; Unit )</ID>
    <ID>LongParameterList:RadioButtonTypeQuestion.kt$( modifier: Modifier = Modifier, buttonTitle: String, index: Int, selectedIndex: Int, optionValue:Int, onOptionSelected: (Int) -&gt; Unit )</ID>
    <ID>LongParameterList:RadioButtonTypeQuestion.kt$( modifier: Modifier, questionNumber: Int, question: String, isLastIndex:Boolean=false, selectedOptionIndex: Int=-1, optionList: List&lt;OptionsItem?&gt;?, isAnswerSelected:Boolean =false, onAnswerSelection: (Int,Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:ReLoginScreen.kt$( modifier: Modifier = Modifier, context: Context, viewModel: BaseViewModel, snackState: CustomSnackBarViewState, setShowDialog: (Boolean) -&gt; Unit, positiveButtonClicked: () -&gt; Unit, )</ID>
    <ID>LongParameterList:RetryHelper.kt$RetryHelper$( prefRepo: PrefRepo, apiService: ApiService, tolaDao: TolaDao, stepsListDao: StepsListDao, villageListDao: VillageListDao, didiDao: DidiDao, answerDao: AnswerDao, numericAnswerDao: NumericAnswerDao, questionDao: QuestionListDao, castListDao: CasteListDao, bpcSummaryDao: BpcSummaryDao, poorDidiListDao: PoorDidiListDao, languageListDao: LanguageListDao )</ID>
    <ID>LongParameterList:SaveMatchSummaryResponse.kt$SaveMatchSummaryResponse$( @SerializedName("createdDate") @Expose val createdDate: Long, @SerializedName("modifiedDate") @Expose val modifiedDate: Long, @SerializedName("createdBy") @Expose val createdBy: Int, @SerializedName("modifiedBy") @Expose val modifiedBy: Int, @SerializedName("id") @Expose val id: Int, @SerializedName("villageId") @Expose val villageId: Int, @SerializedName("programId") @Expose val programId: Int, @SerializedName("scorePercentage") @Expose val scorePercentage: Int, @SerializedName("reverificationScore") @Expose val reverificationScore: Double?, @SerializedName("status") @Expose val status: String?, )</ID>
    <ID>LongParameterList:ScoreComparisionScreen.kt$( modifier: Modifier = Modifier, didiEntity: DidiEntity, passingScore: Int, viewModel: ScoreComparisonViewModel, onScoreCardClicked: (didiEntity: DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt;Unit )</ID>
    <ID>LongParameterList:SearchWithFilterView.kt$( placeholderString: String, modifier: Modifier = Modifier, filterSelected: Boolean = false, showFilter: Boolean = true, onFilterSelected: (Boolean) -&gt; Unit, onSearchValueChange: (String) -&gt; Unit )</ID>
    <ID>LongParameterList:SettingRepository.kt$SettingRepository$( val prefRepo: PrefRepo, val tolaDao: TolaDao, val stepsListDao: StepsListDao, val villageListDao: VillageListDao, val lastSelectedTolaDao: LastSelectedTolaDao, val questionListDao: QuestionListDao, val answerDao: AnswerDao, val questionDao: QuestionListDao, val numericAnswerDao: NumericAnswerDao, )</ID>
    <ID>LongParameterList:SettingScreen.kt$( setShowDialog: (Boolean) -&gt; Unit, settingViewModel: SettingViewModel, showBPCSyncDialog: MutableState&lt;Boolean&gt;, syncBPCStatus: MutableState&lt;Int&gt;, isBPCDataNeedToBeSynced: MutableState&lt;Boolean&gt;, extraNetworkCheck: Boolean )</ID>
    <ID>LongParameterList:SettingScreen.kt$( title: String, subTitle: String, expanded: Boolean, showArrow: Boolean = false, formList: List&lt;String&gt;, viewModel: SettingViewModel, navController: NavController, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:SettingViewModel.kt$SettingViewModel$( val prefRepo: PrefRepo, val apiInterface: ApiService, val tolaDao: TolaDao, val casteListDao: CasteListDao, val lastSelectedTolaDao: LastSelectedTolaDao, val userDao: UserDao, val stepsListDao: StepsListDao, val villegeListDao: VillageListDao, val didiDao: DidiDao, val answerDao: AnswerDao, val numericAnswerDao: NumericAnswerDao, val questionDao: QuestionListDao, val bpcSummaryDao: BpcSummaryDao, val poorDidiListDao: PoorDidiListDao, val exportHelper: ExportHelper, val eventDao: EventsDao, val settingRepository: SettingRepository )</ID>
    <ID>LongParameterList:SingleQuestionScreen.kt$(navController: NavHostController, modifier: Modifier, viewModel: QuestionScreenViewModel, didiId: Int, sectionType:String, questionIndex:Int )</ID>
    <ID>LongParameterList:SocialMappingDidiListScreen.kt$( navController:NavHostController, didiViewModel: AddDidiViewModel, didi: DidiEntity, expanded: Boolean, modifier: Modifier, onExpendClick: (Boolean, DidiEntity) -&gt; Unit, onItemClick: (DidiEntity) -&gt; Unit, onDeleteClicked: (DidiEntity) -&gt; Unit, onCircularImageClick:(DidiEntity) -&gt; Unit )</ID>
    <ID>LongParameterList:SurveyHeader.kt$( modifier: Modifier, didiName: String, questionCount: Int, currentQuestion: Int, answeredCount: Int, partNumber : Int, viewModel: QuestionScreenViewModel?=null )</ID>
    <ID>LongParameterList:SurveySummary.kt$( modifier: Modifier = Modifier, navController: NavHostController, fromScreen: String, surveySummaryViewModel: SurveySummaryViewModel, stepId: Int, isStepComplete: Boolean )</ID>
    <ID>LongParameterList:SurveySummaryRepository.kt$SurveySummaryRepository$( val prefRepo: PrefRepo, val tolaDao: TolaDao, val stepsListDao: StepsListDao, val answerDao: AnswerDao, val numericAnswerDao: NumericAnswerDao, val questionDao: QuestionListDao, val villageListDao: VillageListDao, val apiService: ApiService, val questionListDao: QuestionListDao )</ID>
    <ID>LongParameterList:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$(val settingViewModel: SettingViewModel, val prefRepo: PrefRepo, val apiService: ApiService, val exceptionHandler : CoroutineExceptionHandler, var job: Job?, val didiDao: DidiDao, val stepsListDao: StepsListDao, val questionDao: QuestionListDao, var syncPercentage : MutableState&lt;Float&gt;, val answerDao: AnswerDao, val numericAnswerDao: NumericAnswerDao, val villageListDao : VillageListDao)</ID>
    <ID>LongParameterList:SyncHelper.kt$SyncHelper$( val settingViewModel: SettingViewModel, val prefRepo: PrefRepo, val apiService: ApiService, val tolaDao: TolaDao, val stepsListDao: StepsListDao, val exceptionHandler : CoroutineExceptionHandler, val villegeListDao: VillageListDao, val didiDao: DidiDao, var job: Job?, val showLoader : MutableState&lt;Boolean&gt;, var syncPercentage : MutableState&lt;Float&gt;, val answerDao: AnswerDao, val numericAnswerDao: NumericAnswerDao, val questionDao: QuestionListDao )</ID>
    <ID>LongParameterList:TimeBar.kt$( durationMs: Long, positionMs: Long, bufferedPositionMs: Long, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = PaddingValues(0.dp), scrubberCenterAsAnchor: Boolean = false, onScrubStart: ((positionMs: Long) -&gt; Unit)? = null, onScrubMove: ((positionMs: Long) -&gt; Unit)? = null, onScrubStop: ((positionMs: Long) -&gt; Unit)? = null, progress: @Composable (current: Float, scrubbed: Float, buffered: Float) -&gt; Unit = { _, scrubbed, buffered -&gt; // by default, use scrubbed progress as played progress TimeBarProgress(played = scrubbed, buffered = buffered) }, scrubber: @Composable (enable: Boolean, scrubbing: Boolean) -&gt; Unit = { enable, scrubbing -&gt; TimeBarScrubber(enable, scrubbing) } )</ID>
    <ID>LongParameterList:TimeBar.kt$( enabled: Boolean, scrubbing: Boolean, modifier: Modifier = Modifier, enabledSize: Dp = 12.dp, disabledSize: Dp = 0.dp, draggedSize: Dp = 16.dp, color: Color = Color(0xFFFFFFFF), shape: Shape = CircleShape )</ID>
    <ID>LongParameterList:TimeBar.kt$( played: Float, buffered: Float, modifier: Modifier = Modifier, playedColor: Color = Color(0xFFFFFFFF), bufferedColor: Color = Color(0xCCFFFFFF), unplayedColor: Color = Color(0x33FFFFFF), )</ID>
    <ID>LongParameterList:TolaDao.kt$TolaDao$(id: Int, serverId: Int, needsToPost: Boolean, transactionId: String, createdDate: Long, modifiedDate: Long)</ID>
    <ID>LongParameterList:TransectWalkRepository.kt$TransectWalkRepository$( id: Int, serverId: Int, needsToPost: Boolean, transactionId: String, createdDate: Long, modifiedDate: Long )</ID>
    <ID>LongParameterList:TransectWalkViewModel.kt$TransectWalkViewModel$( tolaId: Int, context: Context, isOnline: Boolean, networkCallbackListener: NetworkCallbackListener, villageId: Int, stepId: Int )</ID>
    <ID>LongParameterList:VillageSelectionRepository.kt$VillageSelectionRepository$( val prefRepo: PrefRepo, val apiService: ApiService, val villageListDao: VillageListDao, val stepsListDao: StepsListDao, val tolaDao: TolaDao, val casteListDao: CasteListDao, val languageListDao: LanguageListDao, val questionDao: QuestionListDao, val trainingVideoDao: TrainingVideoDao, val numericAnswerDao: NumericAnswerDao, val answerDao: AnswerDao, val bpcSummaryDao: BpcSummaryDao, val poorDidiListDao: PoorDidiListDao, val androidDownloader: AndroidDownloader )</ID>
    <ID>LongParameterList:VillageSelectionScreen.kt$( modifier: Modifier = Modifier, context: Context, tolaName: String = "", voName: String = "", index: Int, isUserBPC:Boolean, isVoEndorsementComplete:Boolean =false, selectedIndex: Int, statusId:Int=0, stepId:Int=0, onVillageSeleted: (Int) -&gt; Unit )</ID>
    <ID>LongParameterList:VillageSelectionViewModel.kt$VillageSelectionViewModel$( val prefRepo: PrefRepo, val apiService: ApiService, val villageListDao: VillageListDao, val stepsListDao: StepsListDao, val tolaDao: TolaDao, val didiDao: DidiDao, val casteListDao: CasteListDao, val languageListDao: LanguageListDao, val questionListDao: QuestionListDao, val trainingVideoDao: TrainingVideoDao, val numericAnswerDao: NumericAnswerDao, val answerDao: AnswerDao, val bpcSummaryDao: BpcSummaryDao, val poorDidiListDao: PoorDidiListDao, private val syncManagerDatabase: SyncManagerDatabase, val userDao: UserDao, val downloader: AndroidDownloader, val lastSelectedTolaDao: LastSelectedTolaDao, val villageSelectionRepository: VillageSelectionRepository )</ID>
    <ID>LongParameterList:VoEndorsementScreen.kt$( navController: NavHostController, viewModel: VoEndorsementScreenViewModel, didiTola: String, didiList: List&lt;DidiEntity&gt;, modifier: Modifier, onNavigate: (String) -&gt; Unit, onCircularImageClick: (DidiEntity) -&gt; Unit )</ID>
    <ID>LongParameterList:VoEndorsementStepScreen.kt$( modifier: Modifier = Modifier, navController: NavHostController, viewModel: VoEndorsementScreenViewModel, stepId: Int, isStepComplete:Boolean, onNavigateToSummary:()-&gt; Unit )</ID>
    <ID>LongParameterList:WealthRankingScreen.kt$( didiTola: String, didiList: List&lt;DidiEntity&gt;, viewModel: WealthRankingViewModel, expandedIds: List&lt;Int&gt;, modifier: Modifier, parentIndex: Int, coroutineScope: CoroutineScope, listState: LazyListState )</ID>
    <ID>LongParameterList:WealthRankingSurveyRepository.kt$WealthRankingSurveyRepository$( val prefRepo: PrefRepo, val tolaDao: TolaDao, val stepsListDao: StepsListDao, val villageListDao: VillageListDao, val answerDao: AnswerDao, val numericAnswerDao: NumericAnswerDao, val questionDao: QuestionListDao, val apiService: ApiService )</ID>
    <ID>LongParameterList:WealthRankingViewModel.kt$WealthRankingViewModel$( val prefRepo: PrefRepo, val tolaDao: TolaDao, val didiDao: DidiDao, val stepsListDao: StepsListDao, val villageListDao: VillageListDao, val lastSelectedTolaDao: LastSelectedTolaDao, val apiService: ApiService, val wealthRankingRepository: WealthRankingSurveyRepository )</ID>
    <ID>LongParameterList:YesNoQuestion.kt$( modifier: Modifier, questionNumber: Int, question: String, answer: Boolean = false, answered: Boolean = false, onYesClicked: ()-&gt; Unit, onNoClicked: ()-&gt; Unit )</ID>
    <ID>LoopWithTooManyJumpStatements:ControllerState.kt$ControllerState$while</ID>
    <ID>LoopWithTooManyJumpStatements:NudgeLogger.kt$LogWriter$for</ID>
    <ID>LoopWithTooManyJumpStatements:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$for</ID>
    <ID>LoopWithTooManyJumpStatements:VoEndorsementSummaryViewModel.kt$VoEndorsementSummaryViewModel$for</ID>
    <ID>MagicNumber:AddDidiScreen.kt$200</ID>
    <ID>MagicNumber:AddDidiViewModel.kt$AddDidiViewModel$100</ID>
    <ID>MagicNumber:AddDidiViewModel.kt$AddDidiViewModel$10000</ID>
    <ID>MagicNumber:AddDidiViewModel.kt$AddDidiViewModel$3</ID>
    <ID>MagicNumber:AddDidiViewModel.kt$AddDidiViewModel$5</ID>
    <ID>MagicNumber:AddDidiViewModel.kt$AddDidiViewModel.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:AddTola.kt$200</ID>
    <ID>MagicNumber:AddTola.kt$3000</ID>
    <ID>MagicNumber:AndroidDownloader.kt$AndroidDownloader$100</ID>
    <ID>MagicNumber:AppConstants.kt$1000</ID>
    <ID>MagicNumber:AppConstants.kt$30</ID>
    <ID>MagicNumber:AppConstants.kt$450</ID>
    <ID>MagicNumber:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$250</ID>
    <ID>MagicNumber:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$40</ID>
    <ID>MagicNumber:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$41</ID>
    <ID>MagicNumber:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$43</ID>
    <ID>MagicNumber:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$44</ID>
    <ID>MagicNumber:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$45</ID>
    <ID>MagicNumber:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$46</ID>
    <ID>MagicNumber:BpcAddMoreDidiScreen.kt$0.5f</ID>
    <ID>MagicNumber:BpcAddMoreDidiScreen.kt$0.75f</ID>
    <ID>MagicNumber:BpcAddMoreDidiScreen.kt$180f</ID>
    <ID>MagicNumber:BpcDidiListScreen.kt$100</ID>
    <ID>MagicNumber:BpcDidiListScreen.kt$250</ID>
    <ID>MagicNumber:BpcDidiListViewModel.kt$BpcDidiListViewModel$100</ID>
    <ID>MagicNumber:BpcPrgressScreen.kt$0.15f</ID>
    <ID>MagicNumber:BpcPrgressScreen.kt$0.9f</ID>
    <ID>MagicNumber:BpcPrgressScreen.kt$1000</ID>
    <ID>MagicNumber:BpcPrgressScreen.kt$6</ID>
    <ID>MagicNumber:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel.&lt;no name provided&gt;$100</ID>
    <ID>MagicNumber:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel.&lt;no name provided&gt;$300</ID>
    <ID>MagicNumber:BpcVillageSelectionScreen.kt$.5f</ID>
    <ID>MagicNumber:BpcVillageSelectionScreen.kt$44</ID>
    <ID>MagicNumber:BpcVillageSelectionScreen.kt$45</ID>
    <ID>MagicNumber:ButtonsUtil.kt$1.25f</ID>
    <ID>MagicNumber:ButtonsUtil.kt$1.5f</ID>
    <ID>MagicNumber:CameraView.kt$4</ID>
    <ID>MagicNumber:CasteEntity.kt$CasteEntity.Companion$3</ID>
    <ID>MagicNumber:CircularProgressView.kt$3f</ID>
    <ID>MagicNumber:Color.kt$0x33000000</ID>
    <ID>MagicNumber:Color.kt$0x7F271914</ID>
    <ID>MagicNumber:Color.kt$0x80271914</ID>
    <ID>MagicNumber:Color.kt$0xB2B1B1B1</ID>
    <ID>MagicNumber:Color.kt$0xC9D39509</ID>
    <ID>MagicNumber:Color.kt$0xCC271914</ID>
    <ID>MagicNumber:Color.kt$0xCCF7F7F7</ID>
    <ID>MagicNumber:Color.kt$0xFF02B5C6</ID>
    <ID>MagicNumber:Color.kt$0xFF03DAC5</ID>
    <ID>MagicNumber:Color.kt$0xFF0B9A52</ID>
    <ID>MagicNumber:Color.kt$0xFF212C4D</ID>
    <ID>MagicNumber:Color.kt$0xFF222E50</ID>
    <ID>MagicNumber:Color.kt$0xFF271424</ID>
    <ID>MagicNumber:Color.kt$0xFF271914</ID>
    <ID>MagicNumber:Color.kt$0xFF3700B3</ID>
    <ID>MagicNumber:Color.kt$0xFF439A86</ID>
    <ID>MagicNumber:Color.kt$0xFF46989A</ID>
    <ID>MagicNumber:Color.kt$0xFF52453d</ID>
    <ID>MagicNumber:Color.kt$0xFF60626C</ID>
    <ID>MagicNumber:Color.kt$0xFF6200EE</ID>
    <ID>MagicNumber:Color.kt$0xFF693D30</ID>
    <ID>MagicNumber:Color.kt$0xFF707070</ID>
    <ID>MagicNumber:Color.kt$0xFF87D3C1</ID>
    <ID>MagicNumber:Color.kt$0xFF888888</ID>
    <ID>MagicNumber:Color.kt$0xFF938c89</ID>
    <ID>MagicNumber:Color.kt$0xFFACACAC</ID>
    <ID>MagicNumber:Color.kt$0xFFB1B1B1</ID>
    <ID>MagicNumber:Color.kt$0xFFB4B4B4</ID>
    <ID>MagicNumber:Color.kt$0xFFB5B6BA</ID>
    <ID>MagicNumber:Color.kt$0xFFBB86FC</ID>
    <ID>MagicNumber:Color.kt$0xFFBFBFBF</ID>
    <ID>MagicNumber:Color.kt$0xFFC1C1C1</ID>
    <ID>MagicNumber:Color.kt$0xFFC6C6C6</ID>
    <ID>MagicNumber:Color.kt$0xFFD12222</ID>
    <ID>MagicNumber:Color.kt$0xFFD1D5DE</ID>
    <ID>MagicNumber:Color.kt$0xFFD32505</ID>
    <ID>MagicNumber:Color.kt$0xFFD32517</ID>
    <ID>MagicNumber:Color.kt$0xFFD5D5D5</ID>
    <ID>MagicNumber:Color.kt$0xFFD8C7BE</ID>
    <ID>MagicNumber:Color.kt$0xFFDD6541</ID>
    <ID>MagicNumber:Color.kt$0xFFDDD4D1</ID>
    <ID>MagicNumber:Color.kt$0xFFDE0101</ID>
    <ID>MagicNumber:Color.kt$0xFFDEDEDE</ID>
    <ID>MagicNumber:Color.kt$0xFFE08B00</ID>
    <ID>MagicNumber:Color.kt$0xFFE0D9D7</ID>
    <ID>MagicNumber:Color.kt$0xFFE0F2F1</ID>
    <ID>MagicNumber:Color.kt$0xFFE2E2E2</ID>
    <ID>MagicNumber:Color.kt$0xFFE30707</ID>
    <ID>MagicNumber:Color.kt$0xFFE31F06</ID>
    <ID>MagicNumber:Color.kt$0xFFE8E8E8</ID>
    <ID>MagicNumber:Color.kt$0xFFEAEAEA</ID>
    <ID>MagicNumber:Color.kt$0xFFEBEBEB</ID>
    <ID>MagicNumber:Color.kt$0xFFEFF2FC</ID>
    <ID>MagicNumber:Color.kt$0xFFF0665B</ID>
    <ID>MagicNumber:Color.kt$0xFFF0F7FC</ID>
    <ID>MagicNumber:Color.kt$0xFFF2F4F8</ID>
    <ID>MagicNumber:Color.kt$0xFFF4E9E2</ID>
    <ID>MagicNumber:Color.kt$0xFFF4FFFC</ID>
    <ID>MagicNumber:Color.kt$0xFFF7F7F7</ID>
    <ID>MagicNumber:Color.kt$0xFFF8D5D5</ID>
    <ID>MagicNumber:Color.kt$0xFFFAFAFA</ID>
    <ID>MagicNumber:Color.kt$0xFFFCF6F0</ID>
    <ID>MagicNumber:Color.kt$0xFFFCFFFD</ID>
    <ID>MagicNumber:Color.kt$0xFFFDEACB</ID>
    <ID>MagicNumber:Color.kt$0xFFFDEBEB</ID>
    <ID>MagicNumber:Color.kt$0xFFFF0808</ID>
    <ID>MagicNumber:Color.kt$0xFFFFEDED</ID>
    <ID>MagicNumber:Color.kt$0xFFFFF4E3</ID>
    <ID>MagicNumber:Color.kt$0xFFFFFFFF</ID>
    <ID>MagicNumber:Color.kt$0xFFe3051a</ID>
    <ID>MagicNumber:Color.kt$0xFFf1f3f4</ID>
    <ID>MagicNumber:Color.kt$0xc6c5b9</ID>
    <ID>MagicNumber:Color.kt$0xffFFFCFC</ID>
    <ID>MagicNumber:ConnectionMonitor.kt$ConnectionMonitor$128</ID>
    <ID>MagicNumber:ConnectionMonitor.kt$ConnectionMonitor$23000</ID>
    <ID>MagicNumber:ConnectionMonitor.kt$ConnectionMonitor$3600</ID>
    <ID>MagicNumber:ConnectionMonitor.kt$ConnectionMonitor.DoesNetworkHaveInternet$1500</ID>
    <ID>MagicNumber:ConnectionMonitor.kt$ConnectionMonitor.DoesNetworkHaveInternet$53</ID>
    <ID>MagicNumber:CustomFloatButton.kt$0.40f</ID>
    <ID>MagicNumber:CustomFloatButton.kt$0.60f</ID>
    <ID>MagicNumber:CustomSnackBarView.kt$0xFF19B661</ID>
    <ID>MagicNumber:CustomSnackBarView.kt$0xFFE8503A</ID>
    <ID>MagicNumber:CustomSnackBarView.kt$0xFFEEEEEE</ID>
    <ID>MagicNumber:DidiEndorsementStatus.kt$DidiEndorsementStatus.Companion$3</ID>
    <ID>MagicNumber:DigitalFormAScreen.kt$0.45</ID>
    <ID>MagicNumber:DigitalFormBScreen.kt$0.45</ID>
    <ID>MagicNumber:DigitalFormViewModel.kt$DigitalFormViewModel$500</ID>
    <ID>MagicNumber:DownloadStatus.kt$DownloadStatus.DOWNLOAD_PAUSED$3</ID>
    <ID>MagicNumber:ErrorInterceptor.kt$ErrorInterceptor$500</ID>
    <ID>MagicNumber:FormPictureScreen.kt$0.5f</ID>
    <ID>MagicNumber:FormPictureScreen.kt$250</ID>
    <ID>MagicNumber:FormPictureScreen.kt$3f</ID>
    <ID>MagicNumber:FormPictureScreen.kt$4</ID>
    <ID>MagicNumber:FormPictureScreen.kt$500</ID>
    <ID>MagicNumber:FormPictureScreen.kt$90f</ID>
    <ID>MagicNumber:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$5</ID>
    <ID>MagicNumber:ImageViewer.kt$4</ID>
    <ID>MagicNumber:ImageViewer.kt$5</ID>
    <ID>MagicNumber:ListTypeQuestion.kt$5</ID>
    <ID>MagicNumber:LocationUtil.kt$LocationUtil$3</ID>
    <ID>MagicNumber:LocationUtil.kt$LocationUtil$30</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$200</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$3600</ID>
    <ID>MagicNumber:MediaState.kt$MediaState$0.01f</ID>
    <ID>MagicNumber:NetworkModule.kt$NetworkModule$10</ID>
    <ID>MagicNumber:NetworkModule.kt$NetworkModule$1024</ID>
    <ID>MagicNumber:NetworkModule.kt$NetworkModule.&lt;no name provided&gt;$60</ID>
    <ID>MagicNumber:NudgeLogger.kt$LogWriter$1024</ID>
    <ID>MagicNumber:NudgeLogger.kt$LogWriter$10L</ID>
    <ID>MagicNumber:NudgeLogger.kt$LogWriter$1234L</ID>
    <ID>MagicNumber:NudgeLogger.kt$LogWriter$20L</ID>
    <ID>MagicNumber:NudgeLogger.kt$LogWriter$256</ID>
    <ID>MagicNumber:NudgeLogger.kt$LogWriter$32</ID>
    <ID>MagicNumber:NudgeLogger.kt$LogWriter$8192</ID>
    <ID>MagicNumber:NumericFieldTypeQuestion.kt$5</ID>
    <ID>MagicNumber:OtpVerificationScreen.kt$8</ID>
    <ID>MagicNumber:OtpVerificationScreen.kt$&lt;no name provided&gt;$1000</ID>
    <ID>MagicNumber:OtpView.kt$50</ID>
    <ID>MagicNumber:OtpView.kt$6</ID>
    <ID>MagicNumber:ParticipatoryWealthRankingSurvey.kt$0.5f</ID>
    <ID>MagicNumber:ParticipatoryWealthRankingSurvey.kt$100</ID>
    <ID>MagicNumber:ParticipatoryWealthRankingSurvey.kt$180f</ID>
    <ID>MagicNumber:ParticipatoryWealthRankingSurvey.kt$3</ID>
    <ID>MagicNumber:ParticipatoryWealthRankingSurvey.kt$5</ID>
    <ID>MagicNumber:PatDidiSummaryScreen.kt$100</ID>
    <ID>MagicNumber:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel$500</ID>
    <ID>MagicNumber:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$100</ID>
    <ID>MagicNumber:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$300</ID>
    <ID>MagicNumber:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$4</ID>
    <ID>MagicNumber:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$6</ID>
    <ID>MagicNumber:PatSuccessScreen.kt$3000L</ID>
    <ID>MagicNumber:PatSurvaySectionOneSummary.kt$10</ID>
    <ID>MagicNumber:PatSurvaySectionOneSummary.kt$4</ID>
    <ID>MagicNumber:PatSurvaySectionTwoSummary.kt$.5f</ID>
    <ID>MagicNumber:PatSurvaySectionTwoSummary.kt$10</ID>
    <ID>MagicNumber:PatSurvaySectionTwoSummary.kt$4</ID>
    <ID>MagicNumber:PdfUtils.kt$PdfUtils$10</ID>
    <ID>MagicNumber:PdfUtils.kt$PdfUtils$12</ID>
    <ID>MagicNumber:PdfUtils.kt$PdfUtils$13</ID>
    <ID>MagicNumber:PdfUtils.kt$PdfUtils$14</ID>
    <ID>MagicNumber:PdfUtils.kt$PdfUtils$150</ID>
    <ID>MagicNumber:PdfUtils.kt$PdfUtils$20</ID>
    <ID>MagicNumber:PdfUtils.kt$PdfUtils$50</ID>
    <ID>MagicNumber:PdfViewer.kt$.5f</ID>
    <ID>MagicNumber:PdfViewer.kt$3f</ID>
    <ID>MagicNumber:Player.kt$23</ID>
    <ID>MagicNumber:ProgressScreen.kt$1000</ID>
    <ID>MagicNumber:ProgressScreen.kt$3</ID>
    <ID>MagicNumber:ProgressScreen.kt$4</ID>
    <ID>MagicNumber:ProgressScreen.kt$5</ID>
    <ID>MagicNumber:ProgressScreen.kt$6</ID>
    <ID>MagicNumber:ProgressScreenViewModel.kt$ProgressScreenViewModel$100</ID>
    <ID>MagicNumber:ProgressScreenViewModel.kt$ProgressScreenViewModel$200</ID>
    <ID>MagicNumber:ProgressScreenViewModel.kt$ProgressScreenViewModel$4</ID>
    <ID>MagicNumber:ProgressScreenViewModel.kt$ProgressScreenViewModel$5</ID>
    <ID>MagicNumber:QuestionScreen.kt$100</ID>
    <ID>MagicNumber:QuestionScreen.kt$150</ID>
    <ID>MagicNumber:QuestionScreen.kt$250</ID>
    <ID>MagicNumber:QuestionScreen.kt$300</ID>
    <ID>MagicNumber:ReLoginScreen.kt$&lt;no name provided&gt;$1000</ID>
    <ID>MagicNumber:ResponseHandler.kt$ResponseHandler$200</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$12</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$14</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$19</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$24</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$40</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$41</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$43</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$44</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$45</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$46</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$500</ID>
    <ID>MagicNumber:RetryHelper.kt$RetryHelper$77</ID>
    <ID>MagicNumber:ScoreComparisionScreen.kt$0xFFFF0000</ID>
    <ID>MagicNumber:ScoreComparisionScreen.kt$1.25f</ID>
    <ID>MagicNumber:ScoreComparisionScreen.kt$180f</ID>
    <ID>MagicNumber:SettingScreen.kt$0xFF2EE08E</ID>
    <ID>MagicNumber:SettingScreen.kt$3</ID>
    <ID>MagicNumber:SettingScreen.kt$30</ID>
    <ID>MagicNumber:SettingScreen.kt$4</ID>
    <ID>MagicNumber:SettingScreen.kt$5</ID>
    <ID>MagicNumber:SettingScreen.kt$500</ID>
    <ID>MagicNumber:SettingScreen.kt$6</ID>
    <ID>MagicNumber:SettingScreen.kt$7</ID>
    <ID>MagicNumber:SettingScreen.kt$8</ID>
    <ID>MagicNumber:SettingScreen.kt$9</ID>
    <ID>MagicNumber:SettingScreen.kt$90f</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel$1024</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel$2000</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel$3</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel$4</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel$5</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel$6</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel.&lt;no name provided&gt;.&lt;no name provided&gt;$1000</ID>
    <ID>MagicNumber:SettingViewModel.kt$SettingViewModel.&lt;no name provided&gt;.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:SimpleController.kt$0x98000000</ID>
    <ID>MagicNumber:SimpleController.kt$200</ID>
    <ID>MagicNumber:SimpleController.kt$3000</ID>
    <ID>MagicNumber:SingleQuestionScreen.kt$250</ID>
    <ID>MagicNumber:SocialMappingActivity.kt$1121.34</ID>
    <ID>MagicNumber:SocialMappingActivity.kt$11231.55</ID>
    <ID>MagicNumber:SocialMappingDidiListScreen.kt$0.5f</ID>
    <ID>MagicNumber:SocialMappingDidiListScreen.kt$0.9f</ID>
    <ID>MagicNumber:SocialMappingDidiListScreen.kt$100</ID>
    <ID>MagicNumber:SocialMappingDidiListScreen.kt$180f</ID>
    <ID>MagicNumber:SocialMappingDidiListScreen.kt$3</ID>
    <ID>MagicNumber:StepCompetionScreen.kt$0.3</ID>
    <ID>MagicNumber:StepCompetionScreen.kt$0.5</ID>
    <ID>MagicNumber:StepCompetionScreen.kt$0xb48def</ID>
    <ID>MagicNumber:StepCompetionScreen.kt$0xf4306d</ID>
    <ID>MagicNumber:StepCompetionScreen.kt$0xfce18a</ID>
    <ID>MagicNumber:StepCompetionScreen.kt$0xff726d</ID>
    <ID>MagicNumber:StepCompetionScreen.kt$80</ID>
    <ID>MagicNumber:SurveySummaryRepository.kt$SurveySummaryRepository$5</ID>
    <ID>MagicNumber:SurveySummaryViewModel.kt$SurveySummaryViewModel$100</ID>
    <ID>MagicNumber:SurveySummaryViewModel.kt$SurveySummaryViewModel$10000</ID>
    <ID>MagicNumber:SurveySummaryViewModel.kt$SurveySummaryViewModel$4</ID>
    <ID>MagicNumber:SurveySummaryViewModel.kt$SurveySummaryViewModel$5</ID>
    <ID>MagicNumber:SurveySummaryViewModel.kt$SurveySummaryViewModel$6</ID>
    <ID>MagicNumber:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$0.2f</ID>
    <ID>MagicNumber:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$0.4f</ID>
    <ID>MagicNumber:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$0.6f</ID>
    <ID>MagicNumber:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$0.8f</ID>
    <ID>MagicNumber:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$100</ID>
    <ID>MagicNumber:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$1000</ID>
    <ID>MagicNumber:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$10000</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.07f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.14f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.1f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.27f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.2f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.34f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.3f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.4f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.5f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.6f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.7f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$0.8f</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$100</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$1000</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$10000</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$1024</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$1500</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$3</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$4</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$40</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$41</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$43</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$44</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$46</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$5</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$6</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$7</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$8</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper$9</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper.&lt;no name provided&gt;$4</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper.&lt;no name provided&gt;$5</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper.&lt;no name provided&gt;$6</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper.&lt;no name provided&gt;$7</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper.&lt;no name provided&gt;$8</ID>
    <ID>MagicNumber:SyncHelper.kt$SyncHelper.&lt;no name provided&gt;$9</ID>
    <ID>MagicNumber:TimeBar.kt$0x33FFFFFF</ID>
    <ID>MagicNumber:TimeBar.kt$0xCCFFFFFF</ID>
    <ID>MagicNumber:TimeBar.kt$0xFFFFFFFF</ID>
    <ID>MagicNumber:TransectWalkViewModel.kt$TransectWalkViewModel$10000</ID>
    <ID>MagicNumber:TransectWalkViewModel.kt$TransectWalkViewModel$3</ID>
    <ID>MagicNumber:TransectWalkViewModel.kt$TransectWalkViewModel$5</ID>
    <ID>MagicNumber:TransectWalkViewModel.kt$TransectWalkViewModel.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:TransetWalkScreen.kt$0.9f</ID>
    <ID>MagicNumber:Utils.kt$100</ID>
    <ID>MagicNumber:Utils.kt$1024</ID>
    <ID>MagicNumber:Utils.kt$16</ID>
    <ID>MagicNumber:Utils.kt$180F</ID>
    <ID>MagicNumber:Utils.kt$270F</ID>
    <ID>MagicNumber:Utils.kt$3</ID>
    <ID>MagicNumber:Utils.kt$350</ID>
    <ID>MagicNumber:Utils.kt$4</ID>
    <ID>MagicNumber:Utils.kt$40</ID>
    <ID>MagicNumber:Utils.kt$41</ID>
    <ID>MagicNumber:Utils.kt$43</ID>
    <ID>MagicNumber:Utils.kt$44</ID>
    <ID>MagicNumber:Utils.kt$45</ID>
    <ID>MagicNumber:Utils.kt$46</ID>
    <ID>MagicNumber:Utils.kt$5</ID>
    <ID>MagicNumber:Utils.kt$6</ID>
    <ID>MagicNumber:Utils.kt$612.0f</ID>
    <ID>MagicNumber:Utils.kt$8</ID>
    <ID>MagicNumber:Utils.kt$80</ID>
    <ID>MagicNumber:Utils.kt$816.0f</ID>
    <ID>MagicNumber:Utils.kt$90F</ID>
    <ID>MagicNumber:VideoDetailPlayerScreen.kt$0x80808080</ID>
    <ID>MagicNumber:VideoDetailPlayerScreen.kt$16f</ID>
    <ID>MagicNumber:VideoDetailPlayerScreen.kt$9f</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$100</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$10000</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$1500</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$250</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$3</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$4</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$40</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$41</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$43</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$44</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$45</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$46</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$5</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$6</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$7</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$8</ID>
    <ID>MagicNumber:VillageSelectionRepository.kt$VillageSelectionRepository$9</ID>
    <ID>MagicNumber:VillageSelectionScreen.kt$.5f</ID>
    <ID>MagicNumber:VillageSelectionScreen.kt$3</ID>
    <ID>MagicNumber:VillageSelectionScreen.kt$4</ID>
    <ID>MagicNumber:VillageSelectionScreen.kt$44</ID>
    <ID>MagicNumber:VillageSelectionScreen.kt$45</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$250</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$30</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$4</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$40</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$41</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$43</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$44</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$45</ID>
    <ID>MagicNumber:VillageSelectionViewModel.kt$VillageSelectionViewModel$46</ID>
    <ID>MagicNumber:VoEndorsementScreen.kt$100</ID>
    <ID>MagicNumber:VoEndorsementScreenViewModel.kt$VoEndorsementScreenViewModel$100</ID>
    <ID>MagicNumber:VoEndorsementSummaryScreen.kt$100</ID>
    <ID>MagicNumber:VoEndorsementSummaryScreen.kt$1000</ID>
    <ID>MagicNumber:VoEndorsementSummaryScreen.kt$200</ID>
    <ID>MagicNumber:VoEndorsementSummaryScreen.kt$500</ID>
    <ID>MagicNumber:VoEndorsementSummaryScreen.kt$6</ID>
    <ID>MagicNumber:VoEndorsementSummaryViewModel.kt$VoEndorsementSummaryViewModel$5</ID>
    <ID>MagicNumber:WealthRankingScreen.kt$180f</ID>
    <ID>MagicNumber:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$10000</ID>
    <ID>MagicNumber:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$3</ID>
    <ID>MagicNumber:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$5</ID>
    <ID>MagicNumber:WealthRankingViewModel.kt$WealthRankingViewModel$100</ID>
    <ID>MagicNumber:WealthRankingViewModel.kt$WealthRankingViewModel$3</ID>
    <ID>MagicNumber:YesNoQuestion.kt$3</ID>
    <ID>MagicNumber:keyboardAsState.kt$0.15</ID>
    <ID>MatchingDeclarationName:DowloadCompleteReceiver.kt$DownloadCompleteReceiver : BroadcastReceiver</ID>
    <ID>MatchingDeclarationName:VillagesEntity.kt$VillageEntity</ID>
    <ID>MatchingDeclarationName:keyboardAsState.kt$KeyboardStatus</ID>
    <ID>MaxLineLength:AddDidiRepository.kt$AddDidiRepository$EventName.REJECTED_PAT_SCORE</ID>
    <ID>MaxLineLength:AddDidiRepository.kt$AddDidiRepository$suspend</ID>
    <ID>MaxLineLength:AddDidiScreen.kt$&lt;no name provided&gt;$showCustomToast(context,context.getString(R.string.didi_has_been_successfully_added,didiViewModel?.didiName?.value))</ID>
    <ID>MaxLineLength:AddDidiScreen.kt$didiViewModel</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"addDidisToNetwork: response: response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"checkUpdateDidiStatus -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"deleteDidisToNetwork -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"setSocialMappingINProgress -&gt; newStep.orderNumber &gt; stepList[stepList.map { steps -&gt; steps.orderNumber }.indexOf(2)].orderNumber: false, newStep.orderNumber: ${newStep.orderNumber}"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"setSocialMappingINProgress -&gt; newStep.orderNumber &gt; stepList[stepList.map { steps -&gt; steps.orderNumber }.indexOf(2)].orderNumber: true"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"setSocialMappingINProgress -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"updateDidiToNetwork(didi: DidiEntity, networkCallbackListener: NetworkCallbackListener) -&gt; Error : ${ex.localizedMessage}"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"updateDidiToNetwork(didi: DidiEntity, networkCallbackListener: NetworkCallbackListener) -&gt; onFailed"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"updateDidiToNetwork(didi: DidiEntity, networkCallbackListener: NetworkCallbackListener) -&gt; onSuccess"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$"updateDidiToNetwork-&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$)</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$/*private fun updateTolaListWithIds(newDidiList: StateFlow&lt;List&lt;DidiEntity&gt;&gt;, villageId: Int) { val oldDidiList = didiDao.getAllDidisForVillage(villageId) didiDao.deleteDidiForVillage(villageId) val didis = mutableListOf&lt;DidiEntity&gt;() newDidiList.value.forEach { didis.add( DidiEntity( id = it.id, name = it.name, address = it.address, guardianName = it.guardianName, relationship = it.relationship, castId = it.castId, castName = it.castName, cohortId = it.cohortId, cohortName = it.cohortName, wealth_ranking = it.beneficiaryProcessStatus?.find { it.name == StepType.WEALTH_RANKING.name }?.status ?: WealthRank.NOT_RANKED.rank, villageId = this.villageId, needsToPost = false, createdDate = it.createdDate, needsToPostPAT = oldDidiList[oldDidiList.map { it.id } .indexOf(it.id)].needsToPostPAT, needsToPostRanking = oldDidiList[oldDidiList.map { it.id } .indexOf(it.id)].needsToPostRanking, modifiedDate = System.currentTimeMillis(), beneficiaryProcessStatus = it.beneficiaryProcessStatus, patSurveyStatus = oldDidiList[oldDidiList.map { it.id } .indexOf(it.id)].patSurveyStatus, section1Status = oldDidiList[oldDidiList.map { it.id } .indexOf(it.id)].section1Status, section2Status = oldDidiList[oldDidiList.map { it.id } .indexOf(it.id)].section2Status, shgFlag = oldDidiList[oldDidiList.map { it.id }.indexOf(it.id)].shgFlag, transactionId = "" ) ) } didiDao.insertAll(didis) }*/</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$NudgeLogger.d("AddDidiViewModel", "callWorkFlowAPI -&gt; inProgressStepRequest = $inProgressStepRequest")</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$NudgeLogger.d("AddDidiViewModel", "callWorkFlowAPI -&gt; inProgressStepResponse: status = ${inProgressStepResponse.status}, message = ${inProgressStepResponse.message}, data = ${inProgressStepResponse.data.toString()}")</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$NudgeLogger.d("AddDidiViewModel", "callWorkFlowAPI -&gt; primaryWorkFlowRequest = $primaryWorkFlowRequest")</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$NudgeLogger.d("AddDidiViewModel", "callWorkFlowAPI -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}")</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$NudgeLogger.d("AddDidiViewModel", "callWorkFlowAPI -&gt; stepsListDao.updateNeedToPost after \n")</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$NudgeLogger.d("AddDidiViewModel", "checkDeleteDidiStatus -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}")</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$NudgeLogger.d("AddDidiViewModel", "updateDidiToNetwork -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}")</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$callBack(stepList.sortedBy { it.orderNumber }[currentStepIndex - 1].isComplete == StepStatus.COMPLETED.ordinal)</ID>
    <ID>MaxLineLength:AddDidiViewModel.kt$AddDidiViewModel$if</ID>
    <ID>MaxLineLength:AddTola.kt$Icon</ID>
    <ID>MaxLineLength:AddTola.kt$color = if ((location!!.lat != null &amp;&amp; location!!.long != null) &amp;&amp; (location?.lat != 0.0 &amp;&amp; location?.long != 0.0)) greenOnline else blueDark</ID>
    <ID>MaxLineLength:AddTola.kt$if</ID>
    <ID>MaxLineLength:AddTola.kt$painter = painterResource(id = if ((location!!.lat != null &amp;&amp; location!!.long != null) &amp;&amp; (location?.lat != 0.0 &amp;&amp; location?.long != 0.0)) R.drawable.baseline_location_icn else R.drawable.icon_get_location)</ID>
    <ID>MaxLineLength:AddTola.kt$text = if ((location!!.lat != null &amp;&amp; location!!.long != null) &amp;&amp; (location?.lat != 0.0 &amp;&amp; location?.long != 0.0)) stringResource(R.string.location_added_text) else stringResource(R.string.get_location_text)</ID>
    <ID>MaxLineLength:AddTola.kt$text = if (isLocationAvailable) stringResource(id = R.string.location_added_text) else stringResource(id = R.string.not_added)</ID>
    <ID>MaxLineLength:AddTola.kt$text = if (locationAdded) stringResource(R.string.location_added_text) else stringResource(R.string.get_location_text)</ID>
    <ID>MaxLineLength:AndroidDownloader.kt$AndroidDownloader$.</ID>
    <ID>MaxLineLength:AndroidDownloader.kt$AndroidDownloader$/*NudgeLogger.d("AndroidDownloader", "checkDownloadStatus -&gt; downloadId: $downloadId, id: $id, status: $status, ")*/</ID>
    <ID>MaxLineLength:AndroidDownloader.kt$AndroidDownloader$NudgeLogger.d("AndroidDownloader", "checkDownloadStatus -&gt; onDownloadComplete = downloadId: $downloadId, id: $id, status: $status, ")</ID>
    <ID>MaxLineLength:AndroidDownloader.kt$AndroidDownloader$NudgeLogger.d("AndroidDownloader", "checkDownloadStatus -&gt; onDownloadFailed = downloadId: $downloadId, id: $id, status: $status, ")</ID>
    <ID>MaxLineLength:AndroidDownloader.kt$AndroidDownloader$cursor.getLong(cursor.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR))</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$@Query("Select COUNT(*) FROM $ANSWER_TABLE where didiId = :didiId AND actionType = :actionType AND questionId = :questionId AND optionId=:optionId")</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$@Query("Select COUNT(*) FROM $ANSWER_TABLE where didiId = :didiId AND questionId = :questionId AND actionType = :actionType")</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$@Query("Select COUNT(*) FROM $ANSWER_TABLE where didiId = :didiId AND type = :type AND actionType = :actionType AND optionValue=1")</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$@Query("Select optionId FROM $ANSWER_TABLE where didiId = :didiId AND actionType = :actionType AND questionId = :questionId")</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$@Query("Update $ANSWER_TABLE set optionValue = :optionValue, answerValue = :answerValue,weight=:weight, optionId = :optionId,type=:type,totalAssetAmount =:totalAssetAmount,summary=:summary,assetAmount=:assetAmount, questionFlag=:questionFlag where didiId = :didiId AND questionId = :questionId AND actionType = :actionType")</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$@Query("select $DIDI_TABLE.id,$DIDI_TABLE.name,$DIDI_TABLE.serverId,$DIDI_TABLE.villageId,$DIDI_TABLE.patSurveyStatus,$DIDI_TABLE.section1Status,$DIDI_TABLE.section2Status,$DIDI_TABLE.forVoEndorsement,$DIDI_TABLE.score,$DIDI_TABLE.comment,$DIDI_TABLE.shgFlag, $DIDI_TABLE.patEdit, $DIDI_TABLE.patExclusionStatus, $DIDI_TABLE.ableBodiedFlag from $DIDI_TABLE LEFT join $ANSWER_TABLE on $ANSWER_TABLE.didiId = $DIDI_TABLE.id where $DIDI_TABLE.needsToPostPAT=1 AND $DIDI_TABLE.wealth_ranking = 'POOR' AND $DIDI_TABLE.activeStatus = 1 GROUP BY $DIDI_TABLE.id")</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$@Query("select $DIDI_TABLE.id,$DIDI_TABLE.name,$DIDI_TABLE.serverId,$DIDI_TABLE.villageId,$DIDI_TABLE.patSurveyStatus,$DIDI_TABLE.section1Status,$DIDI_TABLE.section2Status,$DIDI_TABLE.forVoEndorsement,$DIDI_TABLE.score,$DIDI_TABLE.comment,$DIDI_TABLE.shgFlag, $DIDI_TABLE.patEdit, $DIDI_TABLE.patExclusionStatus, $DIDI_TABLE.ableBodiedFlag from $DIDI_TABLE LEFT join $ANSWER_TABLE on $ANSWER_TABLE.didiId = $DIDI_TABLE.id where $DIDI_TABLE.villageId = :villageId AND $DIDI_TABLE.needsToPostPAT=1 AND $DIDI_TABLE.wealth_ranking = 'POOR' AND $DIDI_TABLE.activeStatus = 1 GROUP BY $DIDI_TABLE.id")</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$@Query("select d.* from $DIDI_TABLE d INNER join $ANSWER_TABLE q on q.didiId = d.id where d.villageId =:villageId AND d.forVoEndorsement = 1 GROUP BY d.id ORDER BY d.createdDate DESC")</ID>
    <ID>MaxLineLength:AnswerDao.kt$AnswerDao$fun</ID>
    <ID>MaxLineLength:ApiService.kt$ApiService$@Body stepResultTypeRequest: StepResultTypeRequest</ID>
    <ID>MaxLineLength:ApiService.kt$ApiService$suspend</ID>
    <ID>MaxLineLength:AuthNavGraph.kt$FullscreenView(navController = navController, viewModel = hiltViewModel(), videoId = it.arguments?.getInt(ARG_VIDEO_ID) ?: -1)</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$" StepType.WEALTH_RANKING.name, ResultType.POOR.name"</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$"bpcSummaryResponse status = ${bpcSummaryResponse.status}, message = ${bpcSummaryResponse.message}, data = ${bpcSummaryResponse.data.toString()}"</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$"cohortResponse status = ${cohortResponse.status}, message = ${cohortResponse.message}, data = ${cohortResponse.data.toString()}"</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$"didiResponse status = ${didiResponse.status}, message = ${didiResponse.message}, data = ${didiResponse.data.toString()}"</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$"poorDidiList status = ${poorDidiList.status}, message = ${poorDidiList.message}, data = ${poorDidiList.data.toString()}"</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$"response status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$)</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$.</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$/* if (!RetryHelper.retryApiList.contains(ApiType.BPC_POOR_DIDI_LIST_API)) RetryHelper.retryApiList.add( ApiType.BPC_POOR_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id)*/</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$/* if (!RetryHelper.retryApiList.contains(ApiType.PAT_BPC_SURVEY_SUMMARY)) RetryHelper.retryApiList.add( ApiType.PAT_BPC_SURVEY_SUMMARY ) if (!RetryHelper.stepListApiVillageId.contains(village.id)) RetryHelper.stepListApiVillageId.add( village.id ) */</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$/* if (!RetryHelper.retryApiList.contains(ApiType.STEP_LIST_API)) RetryHelper.retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id)*/</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$/*if (!RetryHelper.retryApiList.contains(ApiType.BPC_DIDI_LIST_API)) RetryHelper.retryApiList.add( ApiType.BPC_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id)*/</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$/*if (!RetryHelper.retryApiList.contains(ApiType.TOLA_LIST_API)) RetryHelper.retryApiList.add( ApiType.TOLA_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id)*/</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$/*if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.BPC_DIDI_LIST_API)) RetryHelper.retryApiList.add( ApiType.BPC_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) }*/</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$/*if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.BPC_POOR_DIDI_LIST_API)) RetryHelper.retryApiList.add( ApiType.BPC_POOR_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) }*/</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$/*if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.PAT_BPC_SURVEY_SUMMARY)) RetryHelper.retryApiList.add( ApiType.PAT_BPC_SURVEY_SUMMARY ) if (!RetryHelper.stepListApiVillageId.contains(village.id)) RetryHelper.stepListApiVillageId.add( village.id ) }*/</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$// PREF_WEALTH_RANKING_COMPLETION_DATE, steps.localModifiedDate?: BLANK_STRING)</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$?.</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$answerValue</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$didi.beneficiaryProcessStatus</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$if</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$numericAnswerDao.updateNumericAnswersAfterRefresh(forceRefresh, didiIdList, numAnswerList)</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$optionValue</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$val</ID>
    <ID>MaxLineLength:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$weight</ID>
    <ID>MaxLineLength:BaseRepository.kt$BaseRepository$onServerError(ErrorModel(statusCode = e.response()?.code() ?: -1, message = e.response()?.message()))</ID>
    <ID>MaxLineLength:BaseRepository.kt$BaseRepository$onServerError(ErrorModelWithApi(apiName = api, statusCode = RESPONSE_CODE_TIMEOUT,message = TIMEOUT_ERROR_MSG))</ID>
    <ID>MaxLineLength:BaseRepository.kt$BaseRepository$onServerError(ErrorModelWithApi(apiName = api, statusCode = e.response()?.code() ?: -1, message = e.response()?.message()))</ID>
    <ID>MaxLineLength:BaseViewModel.kt$BaseViewModel$onServerError(ErrorModel(statusCode = e.response()?.code() ?: -1, message = e.response()?.message()))</ID>
    <ID>MaxLineLength:BaseViewModel.kt$BaseViewModel$onServerError(ErrorModelWithApi(apiName = api, statusCode = RESPONSE_CODE_TIMEOUT,message = TIMEOUT_ERROR_MSG))</ID>
    <ID>MaxLineLength:BaseViewModel.kt$BaseViewModel$onServerError(ErrorModelWithApi(apiName = api, statusCode = e.response()?.code() ?: -1, message = e.response()?.message()))</ID>
    <ID>MaxLineLength:BpcAddMoreDidiScreen.kt$id = if (count &gt; 1) R.string.didi_selected_text_plural else R.string.didi_selected_text_singular</ID>
    <ID>MaxLineLength:BpcAddMoreDidiViewModel.kt$BpcAddMoreDidiViewModel$/* fun replaceDidi(checkedIds: SnapshotStateList&lt;Int&gt;) { job = CoroutineScope(Dispatchers.IO + exceptionHandler).launch { checkedIds.forEach { didiId -&gt; bpcNonSelectedDidiDao.markDidiSelected(didiId, BpcDidiSelectionStatus.SELECTED.ordinal) ReplaceHelper.didiForReplacement = bpcNonSelectedDidiDao.getNonSelectedDidi(didiId) // if (didiToBeReplaced.first != -1 &amp;&amp; didiToBeReplaced.second != -1) { val isDidiInSelectedDao = bpcSelectedDidiDao.isDidiAvailableInSelectedTable(ReplaceHelper.didiToBeReplaced.value.second) if (isDidiInSelectedDao &gt; 0) { bpcSelectedDidiDao.markDidiSelected( ReplaceHelper.didiToBeReplaced.value.second, BpcDidiSelectionStatus.REPLACED.ordinal ) bpcSelectedDidiDao.updateSelDidiPatSurveyStatus(ReplaceHelper.didiToBeReplaced.value.second, PatSurveyStatus.NOT_AVAILABLE.ordinal) } else { bpcNonSelectedDidiDao.markDidiSelected( ReplaceHelper.didiToBeReplaced.value.second, BpcDidiSelectionStatus.REPLACED.ordinal ) bpcNonSelectedDidiDao.updateNonSelDidiPatSurveyStatus(ReplaceHelper.didiToBeReplaced.value.second, PatSurveyStatus.NOT_AVAILABLE.ordinal) } // } // removeDidiFromSelectedList(bpcSelectedDidiDao) } } }*/</ID>
    <ID>MaxLineLength:BpcDidiListScreen.kt$id = if (count &gt; 1) R.string.count_didis_pending_plural else R.string.count_didis_pending_singular</ID>
    <ID>MaxLineLength:BpcDidiListScreen.kt$newFilteredTolaDidiList[didiKey]?.filter { it.wealth_ranking == WealthRank.POOR.rank }</ID>
    <ID>MaxLineLength:BpcDidiListViewModel.kt$BpcDidiListViewModel$if</ID>
    <ID>MaxLineLength:BpcDidiListViewModel.kt$BpcDidiListViewModel$isStepComplete.value = stepList.sortedBy { it.orderNumber }.last().isComplete == StepStatus.COMPLETED.ordinal</ID>
    <ID>MaxLineLength:BpcDidiListViewModel.kt$BpcDidiListViewModel$pendingDidiCount.value = filterDidiList.filter { it.patSurveyStatus == PatSurveyStatus.NOT_STARTED.ordinal || it.patSurveyStatus == PatSurveyStatus.INPROGRESS.ordinal }.size</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$"DisposableEffect: connectionLiveData.observe isNetworkAvailable -&gt; isNetworkAvailable.isOnline = ${isNetworkAvailable.isOnline}, isNetworkAvailable.connectionSpeed = ${isNetworkAvailable.connectionSpeed}, isNetworkAvailable.speedType = ${isNetworkAvailable.speedType}"</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$&amp;&amp;</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$/*Column( verticalArrangement = Arrangement.spacedBy(10.dp), horizontalAlignment = Alignment.Start, modifier = Modifier .padding(start = 16.dp, end = 16.dp, bottom = 50.dp) .height(((2 * screenHeight) / 3).dp) ) { Text( text = stringResource(R.string.seletc_village_screen_text), fontFamily = NotoSans, fontWeight = FontWeight.SemiBold, fontSize = 16.sp, color = textColorDark, modifier = Modifier.padding(top = 12.dp) ) LazyColumn(verticalArrangement = Arrangement.spacedBy(10.dp)) { itemsIndexed(villages) { index, village -&gt; BpcVillageAndVoBoxForBottomSheet( context = context, villageEntity = village, index = index, selectedIndex = bpcProgreesScreenViewModel.villageSelected.value, ) { bpcProgreesScreenViewModel.showLoader.value = true bpcProgreesScreenViewModel.villageSelected.value = it bpcProgreesScreenViewModel.fetchBpcSummaryData(village.id) bpcProgreesScreenViewModel.updateSelectedVillage(village) bpcProgreesScreenViewModel.getStepsList(village.id) bpcProgreesScreenViewModel.getBpcCompletedDidiCount() bpcProgreesScreenViewModel.setBpcVerificationCompleteForVillages() bpcProgreesScreenViewModel.selectedText.value = bpcProgreesScreenViewModel.villageList.value[it].name scope.launch { scaffoldState.hide() delay(1000) bpcProgreesScreenViewModel.showLoader.value = false } } } item { Spacer(modifier = Modifier.height(16.dp)) } } }*/</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$// bpcProgreesScreenViewModel.prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + bpcProgreesScreenViewModel.prefRepo.getSelectedVillage().id, false)</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$// bpcSummaryData.value = BpcSummaryEntity.getEmptySummaryForVillage(bpcProgreesScreenViewModel.getSelectedVillage().id)</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$Icon(painter = painterResource(id = R.drawable.sarathi_logo_mini), contentDescription = "app bar icon", tint = textColorDark,modifier= Modifier.size(26.dp))</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$Row</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$bpcProgreesScreenViewModel.isBpcVerificationComplete.value[bpcProgreesScreenViewModel.repository.prefRepo.getSelectedVillage().id] = isStepCompleted == StepStatus.COMPLETED.ordinal</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$bpcProgreesScreenViewModel.repository.prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$bpcProgreesScreenViewModel.repository.prefRepo.saveFromPage(ARG_FROM_PAT_SURVEY)</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$bpcProgreesScreenViewModel.repository.prefRepo.saveSettingOpenFrom(PageFrom.HOME_PAGE.ordinal)</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$color = if (isStepCompleted == StepStatus.COMPLETED.ordinal) greenOnline else stepBoxActiveColor</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$color = if (isStepCompleted == StepStatus.COMPLETED.ordinal) white else textColorDark</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$if</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$if (isStepCompleted == StepStatus.COMPLETED.ordinal) greenOnline else stepBoxActiveColor</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$shouldBeActive = isStepCompleted == StepStatus.INPROGRESS.ordinal || isStepCompleted == StepStatus.COMPLETED.ordinal</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$showCustomToast(context, context.getString(R.string.something_went_wrong))</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$text</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$text = (bpcProgreesScreenViewModel.passPercentage.collectAsState().value).toString() + "%"</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$text = (bpcSummaryData.value.sentVoEndorsementCount ?: 0).toString()</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$text = bpcProgreesScreenViewModel.repository.prefRepo.getSelectedVillage().federationName</ID>
    <ID>MaxLineLength:BpcPrgressScreen.kt$val subText = if (count &gt; 1) stringResource(R.string.ultra_poor_didis_verified_text_plural, count) else stringResource(R.string.ultra_poor_didis_verified_text_singular, count)</ID>
    <ID>MaxLineLength:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel$/*fun fetchVillageList(){ job=viewModelScope.launch { withContext(Dispatchers.IO){ val villageList=repository.getAllVillages() // val stepList = stepsListDao.getAllStepsForVillage(villageId = villageId) // val tolaDBList=tolaDao.getAllTolasForVillage(prefRepo.getSelectedVillage().id) _villagList.value = villageList // _tolaList.emit(tolaDBList) // _didiList.emit(didiDao.getAllDidisForVillage(prefRepo.getSelectedVillage().id)) withContext(Dispatchers.Main){ villageList.mapIndexed { index, villageEntity -&gt; if(repository.prefRepo.getSelectedVillage().id==villageEntity.id){ villageSelected.value=index } } selectedText.value = villageList[villageList.map { it.id }.indexOf(repository.prefRepo.getSelectedVillage().id)].name getStepsList(repository.prefRepo.getSelectedVillage().id) } } } }*/</ID>
    <ID>MaxLineLength:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel$didiList.filter { it.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal }</ID>
    <ID>MaxLineLength:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel$private suspend</ID>
    <ID>MaxLineLength:BpcSummaryEntity.kt$BpcSummaryEntity$return cohortCount != 0 &amp;&amp; mobilisedCount != 0 &amp;&amp; poorDidiCount != 0 &amp;&amp; sentVoEndorsementCount != 0 &amp;&amp; voEndorsedCount != 0</ID>
    <ID>MaxLineLength:BpcVillageScreenViewModel.kt$BpcVillageScreenViewModel$if</ID>
    <ID>MaxLineLength:BpcVillageSelectionScreen.kt$BPCVillageStatus.VO_ENDORSEMENT_COMPLETED.ordinal, BPCVillageStatus.BPC_VERIFICATION_NOT_STARTED.ordinal, BPCVillageStatus.BPC_VERIFICATION_IN_PROGRESS.ordinal -&gt; white</ID>
    <ID>MaxLineLength:BpcVillageSelectionScreen.kt$BPCVillageStatus.VO_ENDORSEMENT_NOT_STARTED.ordinal</ID>
    <ID>MaxLineLength:BpcVillageSelectionScreen.kt$BPCVillageStatus.VO_ENDORSEMENT_NOT_STARTED.ordinal, BPCVillageStatus.VO_ENDORSEMENT_IN_PROGRESS.ordinal -&gt; .5f</ID>
    <ID>MaxLineLength:BpcVillageSelectionScreen.kt$BPCVillageStatus.VO_ENDORSEMENT_NOT_STARTED.ordinal, BPCVillageStatus.VO_ENDORSEMENT_IN_PROGRESS.ordinal -&gt; greyLightBgColor</ID>
    <ID>MaxLineLength:BpcVillageSelectionScreen.kt$else</ID>
    <ID>MaxLineLength:BpcVillageSelectionScreen.kt$if</ID>
    <ID>MaxLineLength:ButtonsUtil.kt$.</ID>
    <ID>MaxLineLength:ButtonsUtil.kt$IncrementDecrementView(modifier = Modifier,"Goat",0, onDecrementClick = {}, onIncrementClick = {}, optionImageUrl = BLANK_STRING, questionFlag = BLANK_STRING, onValueChange = {}, optionList = emptyList(),onLimitFailed = {})</ID>
    <ID>MaxLineLength:ButtonsUtil.kt$NumericQuestionsErrorEnum.TOTAL_FAMILY_MEMBER_NOT_LESS_THAN_EARNING_MEMBER_ERROR.name</ID>
    <ID>MaxLineLength:ButtonsUtil.kt$color = if (preFilledValue == DidiEndorsementStatus.REJECTED.ordinal) white else textColorDark</ID>
    <ID>MaxLineLength:ButtonsUtil.kt$errorType = NumericQuestionsErrorEnum.EARNING_MEMBERS_NOT_MORE_THAN_FAMILY_MEMBER_ERROR.name</ID>
    <ID>MaxLineLength:ButtonsUtil.kt$errorType=NumericQuestionsErrorEnum.TOTAL_FAMILY_MEMBER_NOT_LESS_THAN_EARNING_MEMBER_ERROR.name</ID>
    <ID>MaxLineLength:ButtonsUtil.kt$val newCurrentCount = incDecValue(0, currentCount, optionValue == TOTAL_FAMILY_MEMBERS_OPTION_VALUE)</ID>
    <ID>MaxLineLength:CameraView.kt$imageCapture</ID>
    <ID>MaxLineLength:CasteEntity.kt$CasteEntity.Companion$castListForLanguage.add(CasteEntity(id = 2, casteName = "OBC- Other Backward Class", languageId = languageId))</ID>
    <ID>MaxLineLength:CasteEntity.kt$CasteEntity.Companion$castListForLanguage.add(CasteEntity(id = 2, casteName = "ওবিসি- অন্যান্য অনগ্রসর শ্রেণী", languageId = languageId))</ID>
    <ID>MaxLineLength:CasteEntity.kt$CasteEntity.Companion$castListForLanguage.add(CasteEntity(id = 3, casteName = "SC- Scheduled Caste", languageId = languageId ))</ID>
    <ID>MaxLineLength:CasteEntity.kt$CasteEntity.Companion$castListForLanguage.add(CasteEntity(id = 3, casteName = "SC- তফসিলি জাতি", languageId = languageId ))</ID>
    <ID>MaxLineLength:CasteEntity.kt$CasteEntity.Companion$castListForLanguage.add(CasteEntity(id = 4, casteName = "ST- Scheduled Tribes", languageId = languageId))</ID>
    <ID>MaxLineLength:CasteEntity.kt$CasteEntity.Companion$castListForLanguage.add(CasteEntity(id = 4, casteName = "ST- তফসিলি উপজাতি", languageId = languageId))</ID>
    <ID>MaxLineLength:ComposableUtils.kt$Column</ID>
    <ID>MaxLineLength:ComposableUtils.kt$else</ID>
    <ID>MaxLineLength:ComposableUtils.kt$if</ID>
    <ID>MaxLineLength:ComposableUtils.kt$mutableStateOf(didi.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal || didi.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal)</ID>
    <ID>MaxLineLength:ComposableUtils.kt$navController.navigate("bpc_pat_complete_didi_summary_screen/${didi.id}/${ARG_FROM_PAT_DIDI_LIST_SCREEN}")</ID>
    <ID>MaxLineLength:ComposableUtils.kt$navController.navigate("bpc_yes_no_question_screen/${didi.id}/$TYPE_EXCLUSION/$quesIndex")</ID>
    <ID>MaxLineLength:ComposableUtils.kt$navController.navigate("bpc_yes_no_question_screen/${didi.id}/$TYPE_INCLUSION/$quesIndex")</ID>
    <ID>MaxLineLength:ComposableUtils.kt$navController.navigate("pat_complete_didi_summary_screen/${didi.id}/${ARG_FROM_PAT_DIDI_LIST_SCREEN}")</ID>
    <ID>MaxLineLength:ComposableUtils.kt$navController.navigate("yes_no_question_screen/${didi.id}/$TYPE_EXCLUSION/$quesIndex")</ID>
    <ID>MaxLineLength:ComposableUtils.kt$navController.navigate("yes_no_question_screen/${didi.id}/$TYPE_INCLUSION/$quesIndex")</ID>
    <ID>MaxLineLength:ComposableUtils.kt$}</ID>
    <ID>MaxLineLength:ComposeableUtils.kt$color = if (didi.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal) acceptEndorsementTextColor else rejectEndorsementTextColor</ID>
    <ID>MaxLineLength:ComposeableUtils.kt$if</ID>
    <ID>MaxLineLength:ComposeableUtils.kt$text = stringResource(id = if (didi.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal) R.string.endorsed else R.string.rejected)</ID>
    <ID>MaxLineLength:ConfigViewModel.kt$ConfigViewModel$"fetchLanguageDetails -&gt; response status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:CsvConfig.kt$CsvConfig$val hostPath: String = NudgeCore.getAppContext().getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)?.absolutePath ?: ""</ID>
    <ID>MaxLineLength:CurlLoggingInterceptor.kt$CurlLoggingInterceptor$"&lt;-- ${response.code}${if (response.message.isEmpty()) "" else ' ' + response.message} ${response.request.url} (${tookMs}ms)"</ID>
    <ID>MaxLineLength:CustomSnackBarView.kt$fun</ID>
    <ID>MaxLineLength:DataDumpRequestParts.kt$DataDumpRequestParts.Companion$fun</ID>
    <ID>MaxLineLength:DataDumpRequestParts.kt$DataDumpRequestParts.Companion$return DataDumpRequestParts(dataDump = dataDumpRequestPart, villageId = villageIdRequest, userType = userTypeRequest)</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * FROM $DIDI_TABLE where needsToPostBPCProcessStatus = :needsToPostBPCProcessStatus AND transactionId != :transactionId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * FROM $DIDI_TABLE where villageId = :villageId AND patSurveyStatus = 2 AND activeStatus = 1 ORDER BY createdDate DESC")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * from $DIDI_TABLE where activeStatus = :activeStatus and needsToPostDeleteStatus = :needsToPostDeleteStatus and transactionId = :transactionId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * from $DIDI_TABLE where activeStatus = :activeStatus and needsToPostDeleteStatus = :needsToPostDeleteStatus and villageId=:villageId and transactionId = :transactionId and serverId != :serverId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * from $DIDI_TABLE where activeStatus = :status and needsToPostDeleteStatus =:needsToPostDeleteStatus and transactionId = :transactionId and serverId != :serverId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * from $DIDI_TABLE where forVoEndorsement = 1 AND section2Status=2 AND villageId=:villageId ORDER BY localCreatedDate DESC ")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * from $DIDI_TABLE where needsToPost = :needsToPost and transactionId = :transactionId and serverId = :serverId and activeStatus = :activeStatus")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * from $DIDI_TABLE where needsToPost = :needsToPost and transactionId = :transactionId and serverId = :serverId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * from $DIDI_TABLE where needsToPostRanking = :needsToPostRanking and transactionId != :transactionId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT * from $DIDI_TABLE where wealth_ranking != :unRankedStatus and villageId = :villageId and activeStatus = 1")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT COUNT(*) FROM $DIDI_TABLE where villageId = :villageId AND patSurveyStatus&lt; 2 AND wealth_ranking='POOR' AND activeStatus = 1 ORDER BY createdDate DESC")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT COUNT(*) from $DIDI_TABLE where patSurveyStatus = 0 and section1Status = 0 and section2Status = 0 and villageId = :villageId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("SELECT COUNT(id) from $DIDI_TABLE where wealth_ranking = :unRankedStatus and villageId = :villageId and activeStatus = 1")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("Select COUNT(*) FROM $DIDI_TABLE where name = :name AND address=:address AND guardianName=:guardianName AND cohortId=:tolaId AND villageId= :villageId and activeStatus = 1")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("UPDATE $DIDI_TABLE SET activeStatus = :activeStatus, needsToPostDeleteStatus = :needsToPostDeleteStatus where cohortId = :tolaId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("UPDATE $DIDI_TABLE SET activeStatus = :activeStatus, needsToPostDeleteStatus = :needsToPostDeleteStatus where id = :id")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("UPDATE $DIDI_TABLE SET patExclusionStatus = :patExclusionStatus, crpComment=:crpComment,score=0 WHERE id = :didiId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("UPDATE $DIDI_TABLE set patSurveyStatus = :patSurveyStatus,section1Status=:section1Status,section2Status=:section2Status,needsToPostPAT=0,shgFlag=:shgFlag,patExclusionStatus=:patExclusionStatus WHERE id =:didiId")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("Update $DIDI_TABLE SET serverId = :serverId, needsToPost = :needsToPost, transactionId = :transactionId, createdDate = :createdDate, modifiedDate =:modifiedDate where id = :id")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$@Query("select COUNT(*) from $DIDI_TABLE where villageId =:villageId AND patSurveyStatus=0 AND wealth_ranking='POOR' AND activeStatus = 1")</ID>
    <ID>MaxLineLength:DidiDao.kt$DidiDao$fun</ID>
    <ID>MaxLineLength:DigitalFormAScreen.kt$PREF_WEALTH_RANKING_COMPLETION_DATE_ + viewModel.digitalFormRepository.getSelectedVillage().id</ID>
    <ID>MaxLineLength:DigitalFormAScreen.kt$items</ID>
    <ID>MaxLineLength:DigitalFormAScreen.kt$navController.navigate("pdf_viewer/${FORM_A_PDF_NAME}_${viewModel.digitalFormRepository.getSelectedVillage().id}.pdf")</ID>
    <ID>MaxLineLength:DigitalFormAScreen.kt$text = if (viewModel.digitalFormRepository.isUserBPC()) didiListForBpc.value.filter { it.wealth_ranking == WealthRank.POOR.rank &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.rankingEdit }.size.toString() else didiList.filter { it.wealth_ranking == WealthRank.POOR.rank &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.rankingEdit }.size.toString()</ID>
    <ID>MaxLineLength:DigitalFormAScreen.kt$text = stringResource(id = if (fromScreen == "") R.string.continue_text else R.string.done_text)</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$PREF_PAT_COMPLETION_DATE_ + viewModel.digitalFormRepository.getSelectedVillage().id</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$didiList.filter { it.forVoEndorsement == 1 &amp;&amp; it.section2Status == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.patEdit }.size.toString()</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$didiList.filter { it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal || it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.patEdit }.size.toString()</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$didiListForBpc.filter { it.forVoEndorsement == 1 &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.patEdit }.size.toString()</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$didiListForBpc.filter { it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal || it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.patEdit }.size.toString()</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$items</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$navController.navigate("pdf_viewer/${FORM_B_PDF_NAME}_${viewModel.digitalFormRepository.getSelectedVillage().id}.pdf")</ID>
    <ID>MaxLineLength:DigitalFormBScreen.kt$text = stringResource(id = if (fromScreen == "") R.string.continue_text else R.string.done_text)</ID>
    <ID>MaxLineLength:DigitalFormCScreen.kt$PREF_VO_ENDORSEMENT_COMPLETION_DATE_ + viewModel.digitalFormRepository.getSelectedVillage().id</ID>
    <ID>MaxLineLength:DigitalFormCScreen.kt$didiList.filter { it.forVoEndorsement == 1 &amp;&amp; it.section2Status == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal }.size.toString()</ID>
    <ID>MaxLineLength:DigitalFormCScreen.kt$didiListForBpc.value.filter { it.forVoEndorsement == 1 &amp;&amp; it.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal }.size.toString()</ID>
    <ID>MaxLineLength:DigitalFormCScreen.kt$items</ID>
    <ID>MaxLineLength:DigitalFormCScreen.kt$navController.navigate("pdf_viewer/${FORM_C_PDF_NAME}_${viewModel.digitalFormRepository.getSelectedVillage().id}.pdf")</ID>
    <ID>MaxLineLength:DigitalFormViewModel.kt$DigitalFormViewModel$NudgeLogger.d("DigitalFormViewModel", "generateFormAPdf -&gt; didi.id = ${it.id}, didi.name = ${it.name}")</ID>
    <ID>MaxLineLength:DigitalFormViewModel.kt$DigitalFormViewModel$didiDetailList = didiDetailList.value.filter { it.forVoEndorsement == 1 &amp;&amp; it.section2Status == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.patEdit }</ID>
    <ID>MaxLineLength:DigitalFormViewModel.kt$DigitalFormViewModel$didiDetailList = didiDetailList.value.filter { it.forVoEndorsement == 1 &amp;&amp; it.section2Status == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal }</ID>
    <ID>MaxLineLength:DigitalFormViewModel.kt$DigitalFormViewModel$didiDetailList = didiDetailListForBpc.value.filter { it.forVoEndorsement == 1 &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.patEdit }</ID>
    <ID>MaxLineLength:DigitalFormViewModel.kt$DigitalFormViewModel$didiDetailList = didiDetailListForBpc.value.filter { it.forVoEndorsement == 1 &amp;&amp; it.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal }</ID>
    <ID>MaxLineLength:DigitalFormViewModel.kt$DigitalFormViewModel$val path = if (success) PdfUtils.getPdfPath(context = context, formName = FORM_A_PDF_NAME, villageEntity.id) else null</ID>
    <ID>MaxLineLength:DigitalFormViewModel.kt$DigitalFormViewModel$val path = if (success) PdfUtils.getPdfPath(context = context, formName = FORM_B_PDF_NAME, villageEntity.id) else null</ID>
    <ID>MaxLineLength:DigitalFormViewModel.kt$DigitalFormViewModel$val path = if (success) PdfUtils.getPdfPath(context = context, formName = FORM_C_PDF_NAME, villageEntity.id) else null</ID>
    <ID>MaxLineLength:EditDidiWealthRankingRequest.kt$EditDidiWealthRankingRequest.Companion$if</ID>
    <ID>MaxLineLength:EditDidiWealthRankingRequest.kt$EditDidiWealthRankingRequest.Companion$||</ID>
    <ID>MaxLineLength:ErrorModelWithApi.kt$ErrorModelWithApi$data</ID>
    <ID>MaxLineLength:ExportHelper.kt$ExportHelper$"exportAnswerTableToCsv uploadAnswerTableDumpResponse success response =&gt; ${uploadAnswerTableDumpResponse.json()} "</ID>
    <ID>MaxLineLength:ExportHelper.kt$ExportHelper$"exportDidiTableToCsv addOnCompleteListener success response =&gt; path: ${didiTableDumpRef.downloadUrl.result.path}, "</ID>
    <ID>MaxLineLength:ExportHelper.kt$ExportHelper$"exportDidiTableToCsv uploadDidiTableDumpRequest success response =&gt; ${uploadDidiTableDumpResponse.json()} "</ID>
    <ID>MaxLineLength:ExportHelper.kt$ExportHelper$"exportNumericAnswerTableToCsv exportNumericAnswerTableToCsv success response =&gt; ${uploadNumericAnswerTableDumpResponse.json()} "</ID>
    <ID>MaxLineLength:ExportHelper.kt$ExportHelper$"exportTolaTableToCsv uploadTolaTableDumpResponse success response =&gt; ${uploadTolaTableDumpResponse.json()} "</ID>
    <ID>MaxLineLength:ExportModule.kt$ExportModule$prefRepo: PrefRepo</ID>
    <ID>MaxLineLength:FinalStepCompletion.kt$// val composition by rememberLottieComposition(LottieCompositionSpec.Asset("app/src/main/assets/animations/animation.json"))</ID>
    <ID>MaxLineLength:FinalStepCompletion.kt$// val composition by rememberLottieComposition(LottieCompositionSpec.Url("https://lottie.host/63e951fa-dd81-46c2-84df-e1d56406746b/BPYw85o5W3.json"))</ID>
    <ID>MaxLineLength:FinalStepCompletion.kt$Log.d("FinalStepCompletionScreen", "composition: $composition, composition?.duration: ${composition?.duration}, composition?.startFrame: ${composition?.startFrame} composition?.endFrame: ${composition?.endFrame}")</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$,</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$/*val imageFile = patDidiSummaryViewModel.getFileName(localContext, didi.value) patDidiSummaryViewModel.imagePath = imageFile.absolutePath val uri = uriFromFile(localContext, imageFile) patDidiSummaryViewModel.tempUri = uri cameraLauncher.launch(uri)*/</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$AnimatedVisibility</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$NudgeLogger.d("FormPictureScreen", "Permission previously granted")</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$NudgeLogger.d("FormPictureScreen", "Show camera permissions dialog")</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$NudgeLogger.d("PatImagePreviewScreen", "Permission previously granted")</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$NudgeLogger.d("PatImagePreviewScreen", "Show camera permissions dialog")</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$NudgeLogger.d("requestCameraPermission: ", "permission not granted")</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$PREF_NEED_TO_POST_FORM_C_AND_D_ + formPictureScreenViewModel.repository.prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$cardTitle</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$formPictureScreenViewModel.formsCClicked.value = --formPictureScreenViewModel.formsCClicked.value</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$formPictureScreenViewModel.formsDClicked.value = --formPictureScreenViewModel.formsDClicked.value</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$formPictureScreenViewModel.imagePathForCapture = imageFile.absolutePath</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$formPictureScreenViewModel.repository.prefRepo.savePref(formPictureScreenViewModel.getFormPathKey(formPictureScreenViewModel.getFormSubPath(FORM_C, i)), "")</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$formPictureScreenViewModel.repository.prefRepo.savePref(formPictureScreenViewModel.getFormPathKey(formPictureScreenViewModel.getFormSubPath(FORM_D, i)), "")</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$formPictureScreenViewModel.shouldShowCamera.value = Pair(FORM_C, true)</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$formPictureScreenViewModel.shouldShowCamera.value = Pair(FORM_D, true)</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$handleImageCapture</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$if</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$private</ID>
    <ID>MaxLineLength:FormPictureScreen.kt$val imageFile = formPictureScreenViewModel.getImageFileName(context, formName)</ID>
    <ID>MaxLineLength:FormPictureScreenRepository.kt$FormPictureScreenRepository$NudgeLogger.d("FormPictureScreenRepository","updateDidiRanking Request=&gt; ${Gson().toJson(didiWealthRankingRequest)}")</ID>
    <ID>MaxLineLength:FormPictureScreenRepository.kt$FormPictureScreenRepository$return villageListDao.fetchVillageDetailsForLanguage(villageId, prefRepo.getAppLanguageId() ?: 2) ?: villageListDao.getVillage(villageId)</ID>
    <ID>MaxLineLength:FormPictureScreenRepository.kt$FormPictureScreenRepository$suspend</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$"didiId = ${didi.id}, villageId = ${didi.villageId}, needsToPostVo = false"</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$"updateVoStatusResponse: status = ${updateVoStatusResponse.status}, message = ${updateVoStatusResponse.message}, data = ${updateVoStatusResponse.data.toString()}"</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$/*val formBFilePath = File("${context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${FORM_B_PDF_NAME}_${villageId}.pdf") formBAvailabe.value = formBFilePath.isFile &amp;&amp; formBFilePath.exists()*/</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$File("${context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${FORM_A_PDF_NAME}_${villageId}.pdf")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$File("${context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${FORM_B_PDF_NAME}_${villageId}.pdf")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$NudgeLogger</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$NudgeLogger.d("FormPictureScreenViewModel", "callWorkFlowAPI -&gt; primaryWorkFlowRequest = $primaryWorkFlowRequest")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$NudgeLogger.d("FormPictureScreenViewModel", "onServerError -&gt; onServerError: message = ${errorModel?.message}, api = ${errorModel?.apiName?.name}")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$NudgeLogger.d("FormPictureScreenViewModel", "updateDidiVoEndorsementStatus-&gt; didiDao.updateBeneficiaryProcessStatus after = updatedStatus: $updatedStatus \n\n")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$NudgeLogger.d("FormPictureScreenViewModel", "updateDidiVoEndorsementStatus-&gt; didiDao.updateBeneficiaryProcessStatus before = updatedStatus: $updatedStatus \n\n")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$NudgeLogger.d("FormPictureScreenViewModel", "updateVoStatusToNetwork -&gt; didi.voEndorsementStatus: DidiEndorsementStatus.ENDORSED.ordinal \n\n")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$NudgeLogger.d("FormPictureScreenViewModel", "updateVoStatusToNetwork -&gt; didiDao.updateNeedToPostVO after")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$NudgeLogger.d("FormPictureScreenViewModel", "updateVoStatusToNetwork -&gt; needToPostDidiList: $needToPostDidiList \n\n")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$if</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$onError("FormPictureScreenViewModel", "updateVoStatusToNetwork-&gt; onError: ${ex.message}, \n${ex.stackTrace}")</ID>
    <ID>MaxLineLength:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$repository.prefRepo.savePref(PREF_VO_ENDORSEMENT_COMPLETION_DATE_+repository.prefRepo.getSelectedVillage().id, currentTime)</ID>
    <ID>MaxLineLength:GetCohortResponseModel.kt$GetCohortResponseModel.Companion$/* fun convertToTolaEntity(tola: GetCohortResponseModel): TolaEntity { return TolaEntity(id = tola.id, name = tola.name, villageId = tola.villageId, status = tola.status, type = tola.type, latitude = tola.latitude, longitude = tola.longitude, needsToPost = false) }*/</ID>
    <ID>MaxLineLength:ImageViewer.kt$Log.d("TAG", "FormImageViewerScreen: ${viewModel.getFormPathKey(viewModel.getFormSubPath(fileName, i))}")</ID>
    <ID>MaxLineLength:ListTypeQuestion.kt$OptionCard</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil$"locationProvider: $locationProvider, location: lat-${location?.latitude}, long-${location?.longitude}"</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil$NudgeLogger.d("LocationUtil", "getLocation(Build.VERSION_CODES.R): hasGps: $hasGps, hasNetwork: $hasNetwork")</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil$NudgeLogger.d("LocationUtil", "getLocation(Build.VERSION_CODES.R): hasGps: locationManager.getCurrentLocation called")</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil$NudgeLogger.d("LocationUtil", "getLocation(Build.VERSION_CODES.R): hasNetwork: locationManager.getCurrentLocation called")</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil$NudgeLogger.d("LocationUtil", "getLocation(Build.VERSION_CODES.R): permission denied, custom permission prompt displayed")</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil$NudgeLogger.d("LocationUtil", "getLocation(Build.VERSION_CODES.R): permission not granted, permission requested again")</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil$Toast.makeText(context, context.getString(R.string.location_permission_not_granted_message), Toast.LENGTH_LONG).show()</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil$fun</ID>
    <ID>MaxLineLength:LocationUtil.kt$LocationUtil.&lt;no name provided&gt;$"LocationUtils"</ID>
    <ID>MaxLineLength:LoginScreen.kt$navController.navigate(route = "otp_verification_screen/" + viewModel.mobileNumber.value.text)</ID>
    <ID>MaxLineLength:MyApplication.kt$MyApplication.Companion$fun</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$BpcDidiListScreens$PAT_COMPLETE_DIDI_SUMMARY_SCREEN : BpcDidiListScreens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$BpcDidiListScreens$PAT_STEP_COMPLETION_SCREEN : BpcDidiListScreens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$BpcDidiListScreens$PAT_SURVEY_SUMMARY : BpcDidiListScreens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$BpcDidiListScreens$SINGLE_QUESTION_SCREEN : PatScreens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$BpcDidiListScreens$YES_NO_QUESTION_SCREEN : BpcDidiListScreens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$FormImageViewerScreen(navController = navController, fileName = it.arguments?.getString(ARG_IMAGE_PATH) ?: "", viewModel = hiltViewModel())</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$FormPictureScreen</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$FullscreenView(navController = navController, viewModel = hiltViewModel(), videoId = it.arguments?.getInt(ARG_VIDEO_ID) ?: -1)</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$PatScreens$PAT_COMPLETE_DIDI_SUMMARY_SCREEN : PatScreens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$PatScreens$SINGLE_QUESTION_SCREEN : PatScreens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$PatScreens$YES_NO_QUESTION_SCREEN : PatScreens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$PdfViewer(filePath = it.arguments?.getString(ARG_FORM_PATH) ?: "", modifier = Modifier, navController = navController)</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$SurveySummary(navController = navController, surveySummaryViewModel = hiltViewModel(), fromScreen = ARG_FROM_PAT_SURVEY, stepId = it.arguments?.getInt(ARG_STEP_ID) ?: -1, isStepComplete = it.arguments?.getBoolean(ARG_IS_STEP_COMPLETE) ?: false)</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$SurveySummary(navController = navController, surveySummaryViewModel = hiltViewModel(), fromScreen = ARG_FROM_VO_ENDORSEMENT_SCREEN, stepId = it.arguments?.getInt(ARG_STEP_ID) ?: -1, isStepComplete = it.arguments?.getBoolean(ARG_IS_STEP_COMPLETE) ?: false)</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$VoEndorsmentScreeens$VO_ENDORSEMENT_STEP_COMPLETION_SCREEN : VoEndorsmentScreeens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$VoEndorsmentScreeens$VO_ENDORSEMENT_SUMMARY_SCREEN : VoEndorsmentScreeens</ID>
    <ID>MaxLineLength:NavHomeGraph.kt$VoEndorsmentScreeens$VO_ENDORSEMENT_SURVEY_SUMMARY : VoEndorsmentScreeens</ID>
    <ID>MaxLineLength:NavigationController.kt$/* } composable( route = ScreenRoutes.STEP_COMPLETION_SCREEN.route, arguments = listOf(navArgument(ARG_COMPLETION_MESSAGE) { type = NavType.StringType }) ) { // StepCompletionScreen(navController = homeScreenNavController, modifier = Modifier, message = it.arguments?.getString(ARG_COMPLETION_MESSAGE) ?: "") } composable(route = ScreenRoutes.VILLAGE_SELECTION_SCREEN.route) { */</ID>
    <ID>MaxLineLength:NavigationController.kt$/* } composable(route = ScreenRoutes.MORE_SCREEN.route) { MoreScreen(navController) } composable(route = ScreenRoutes.HOME_SCREEN.route) { HomeScreen(navController = navController, modifier = Modifier.fillMaxWidth()) } composable( route = ScreenRoutes.TRANSECT_WALK_SCREEN.route, arguments = listOf(navArgument(ARG_VILLAGE_ID) { type = NavType.IntType }, navArgument(ARG_STEP_ID) { type = NavType.IntArrayType }) ) { // TransectWalkScreen( // navController = navController, // modifier = Modifier // .fillMaxSize() // .then(modifier), // viewModel = hiltViewModel(), // villageId = it.arguments?.getInt(ARG_VILLAGE_ID) ?: 0, // stepId = it.arguments?.getInt(ARG_STEP_ID) ?: -1 // ) } composable( route = ScreenRoutes.STEP_COMPLETION_SCREEN.route, arguments = listOf(navArgument(ARG_COMPLETION_MESSAGE) { type = NavType.StringType }) ) { // StepCompletionScreen(navController = navController, modifier = Modifier, message = it.arguments?.getString(ARG_COMPLETION_MESSAGE) ?: "") } composable(route = ScreenRoutes.VILLAGE_SELECTION_SCREEN.route) { // VillageSelectionScreen(navController = navController, viewModel = hiltViewModel()) } composable(route = ScreenRoutes.PAT_SURVEY_YES_NO_SCREEN.route) { val viewModel : YesNoQuestionViewModel = hiltViewModel() val surveyUiState = viewModel.surveyHeaderUiState.collectAsState().value val questionAnswerUiState = viewModel.questionAnswerUiState.collectAsState().value val nextPreviousUiState = viewModel.nextPreviousUiState.collectAsState().value YesNoQuestionScreen( navController, modifier = Modifier .fillMaxSize() .then(modifier), surveyUiState, questionAnswerUiState, nextPreviousUiState, viewModel::OnEvent ) } } } @Composable fun HomeScreenFlowNavigation( homeScreenNavController: NavHostController, stepsNavHostController: NavHostController, modifier: Modifier = Modifier ) { val sharedViewModel: AddDidiViewModel = hiltViewModel() NavHost( navController = homeScreenNavController, startDestination = ScreenRoutes.PROGRESS_SCREEN.route ) { composable(route = ScreenRoutes.PROGRESS_SCREEN.route) { */</ID>
    <ID>MaxLineLength:NetworkModule.kt$NetworkModule$// Workaround for the error "Caused by: javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</ID>
    <ID>MaxLineLength:NudgeDatabase.kt$NudgeDatabase$TolaEntity::class</ID>
    <ID>MaxLineLength:NudgeDatabase.kt$NudgeDatabase$entities</ID>
    <ID>MaxLineLength:NudgeLogger.kt$LogWriter$(bytesOfLogFiles &gt; SUPPORT_LOG_SIZE_MAX &amp;&amp; !TextUtils.equals(syslogFile?.name, logFile.name))</ID>
    <ID>MaxLineLength:NudgeLogger.kt$LogWriter$//delete oldest files where the newer files total &gt; SUPPORT_LOG_SIZE_MAX, except for the current file</ID>
    <ID>MaxLineLength:NudgeLogger.kt$LogWriter$NudgeLogger.d(TAG, "Logs on Disk: ${formatShortFileSize(context, bytesOfLogFiles - removedBytes)} Cleanup Removed: ${formatShortFileSize(context, removedBytes)}")</ID>
    <ID>MaxLineLength:NudgeLogger.kt$LogWriter$if</ID>
    <ID>MaxLineLength:NudgeLogger.kt$LogWriter$if (DEBUG) NudgeLogger.d(TAG, "Deleted logfile ${logFile.name} of size ${formatShortFileSize(context, length)}")</ID>
    <ID>MaxLineLength:NudgeLogger.kt$LogWriter$private</ID>
    <ID>MaxLineLength:NudgeLogger.kt$LogWriter$val bytes = "${syslogMessageTimeStampFormat.format(packet.timestamp)} ${packet.tag} ${packet.message}\n".toByteArray()</ID>
    <ID>MaxLineLength:NudgeLogger.kt$NudgeLogger$return if (ex != null) " ${ex.javaClass.simpleName}${if (ex.message != null) ": \"${ex.message}\"" else ""}" else ""</ID>
    <ID>MaxLineLength:NumericAnswerDao.kt$NumericAnswerDao$@Query("SELECT * FROM $NUMERIC_TABLE_NAME where optionId = :optionId AND questionId =:questionId AND didiId =:didiId")</ID>
    <ID>MaxLineLength:NumericAnswerDao.kt$NumericAnswerDao$@Query("SELECT COUNT(*) FROM $NUMERIC_TABLE_NAME where optionId = :optionId AND questionId =:questionId AND didiId =:didiId")</ID>
    <ID>MaxLineLength:NumericAnswerDao.kt$NumericAnswerDao$@Query("SELECT weight*count AS total_amount FROM $NUMERIC_TABLE_NAME where questionId =:questionId AND didiId =:didiId")</ID>
    <ID>MaxLineLength:NumericAnswerDao.kt$NumericAnswerDao$@Query("Update $NUMERIC_TABLE_NAME set count = :count, optionValue=:optionValue where didiId = :didiId AND questionId = :questionId AND didiId =:didiId AND optionId =:optionId")</ID>
    <ID>MaxLineLength:NumericFieldTypeQuestion.kt$NumericQuestionsErrorEnum.EARNING_MEMBERS_NOT_MORE_THAN_FAMILY_MEMBER_ERROR.name</ID>
    <ID>MaxLineLength:NumericFieldTypeQuestion.kt$NumericQuestionsErrorEnum.TOTAL_FAMILY_MEMBER_NOT_LESS_THAN_EARNING_MEMBER_ERROR.name</ID>
    <ID>MaxLineLength:NumericFieldTypeQuestion.kt$if</ID>
    <ID>MaxLineLength:OtpVerificationScreen.kt$AnimatedVisibility</ID>
    <ID>MaxLineLength:OtpVerificationScreen.kt$colors</ID>
    <ID>MaxLineLength:ParticipatoryWealthRankingSurvey.kt$AnimatedVisibility</ID>
    <ID>MaxLineLength:ParticipatoryWealthRankingSurvey.kt$WealthRank.MEDIUM -&gt; didids.value.filter { it.wealth_ranking == WealthRank.MEDIUM.rank }.size</ID>
    <ID>MaxLineLength:ParticipatoryWealthRankingSurvey.kt$append(stringResource(R.string.wealth_ranking_summary_empty_text).replace("{CATEGORY}", category))</ID>
    <ID>MaxLineLength:ParticipatoryWealthRankingSurvey.kt$if (count &gt; 1) R.string.you_are_submitting_wealth_ranking_for_count_didis else R.string.you_are_submitting_wealth_ranking_for_count_didis_singular</ID>
    <ID>MaxLineLength:ParticipatoryWealthRankingSurvey.kt$positiveButtonText</ID>
    <ID>MaxLineLength:ParticipatoryWealthRankingSurvey.kt$val didiListForCategory = didids.value.filter { it.wealth_ranking == showDidiListForRank.second.rank }</ID>
    <ID>MaxLineLength:ParticipatoryWealthRankingSurvey.kt$}</ID>
    <ID>MaxLineLength:PatDidiSummaryRepository.kt$PatDidiSummaryRepository$suspend</ID>
    <ID>MaxLineLength:PatDidiSummaryScreen.kt$!(patDidiSummaryViewModel.photoUri == null || patDidiSummaryViewModel.photoUri == Uri.EMPTY)</ID>
    <ID>MaxLineLength:PatDidiSummaryScreen.kt$color = if (ableBodiedFlag.value == AbleBodiedFlag.NO.value) white else textColorDark</ID>
    <ID>MaxLineLength:PatDidiSummaryScreen.kt$color = if (ableBodiedFlag.value == AbleBodiedFlag.YES.value) white else textColorDark</ID>
    <ID>MaxLineLength:PatDidiSummaryScreen.kt$if</ID>
    <ID>MaxLineLength:PatDidiSummaryScreen.kt$if (ableBodiedFlag.value == AbleBodiedFlag.NO.value) blueDark else Color.Transparent</ID>
    <ID>MaxLineLength:PatDidiSummaryScreen.kt$if (ableBodiedFlag.value == AbleBodiedFlag.YES.value) blueDark else Color.Transparent</ID>
    <ID>MaxLineLength:PatDidiSummaryScreen.kt$navController.navigate("bpc_yes_no_question_screen/${didi.value.id}/$TYPE_EXCLUSION/$questionIndex")</ID>
    <ID>MaxLineLength:PatDidiSummaryScreen.kt$navController.navigate("yes_no_question_screen/${didi.value.id}/${TYPE_EXCLUSION}/$questionIndex")</ID>
    <ID>MaxLineLength:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel$"uploadDidiImage imageUploadRequest status: ${imageUploadRequest.status} data: ${imageUploadRequest.data ?: ""}"</ID>
    <ID>MaxLineLength:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel$NudgeLogger.d("PatDidiSummaryViewModel", "saveFilePathInDb -&gt; didiDao.saveLocalImagePath before = didiId: ${didiEntity.id}, finalPathWithCoordinates: $finalPathWithCoordinates")</ID>
    <ID>MaxLineLength:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel$eventName = if (patDidiSummaryRepository.prefRepo.isUserBPC()) EventName.BPC_IMAGE else EventName.CRP_IMAGE</ID>
    <ID>MaxLineLength:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel$patDidiSummaryRepository.updateNeedToPostImage(didiId = didiEntity.value.id, needsToPostImage = needToPostImage)</ID>
    <ID>MaxLineLength:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel$val filePath = File(directory, "${didi.id}-${didi.cohortId}-${didi.villageId}_${System.currentTimeMillis()}.png")</ID>
    <ID>MaxLineLength:PatSectionSummaryRepository.kt$PatSectionSummaryRepository$EventName.REJECTED_PAT_SCORE</ID>
    <ID>MaxLineLength:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$Log.d("TAG", "calculateDidiScorePATSection: $totalWightWithoutNumQue :: $didiId :: $isDidiAccepted")</ID>
    <ID>MaxLineLength:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$NudgeLogger.d("PatSectionSummaryViewModel", "calculateDidiScore: for Flag FLAG_RATIO totalWightWithoutNumQue += newScore -&gt; $totalWightWithoutNumQue")</ID>
    <ID>MaxLineLength:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$NudgeLogger.d("PatSectionSummaryViewModel", "calculateDidiScore: totalWightWithoutNumQue += newScore -&gt; $totalWightWithoutNumQue")</ID>
    <ID>MaxLineLength:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$if</ID>
    <ID>MaxLineLength:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$val</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$Log.d("TAG", "isArrowVisible: ${viewModel.patSectionRepository.prefRepo.questionScreenOpenFrom()} ::${didi.value.id} ::${didi.value.name} :: ${viewModel.isPATStepComplete.value}")</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$castName = "OBC"</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$else</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$if</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$isArrowVisible = isArrowVisible(patSectionSummaryViewModel,didi)</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$patSectionSummaryViewModel.patSectionRepository.prefRepo.saveQuestionScreenOpenFrom(PageFrom.SUMMARY_ONE_PAGE.ordinal)</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$patSectionSummaryViewModel.updateVOEndorseAfterDidiRejected(didi.value.id,ForVOEndorsementType.REJECTED.ordinal)</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$return</ID>
    <ID>MaxLineLength:PatSurvaySectionOneSummary.kt$wealth_ranking = "POOR"</ID>
    <ID>MaxLineLength:PatSurvaySectionTwoSummary.kt$ShowDialog</ID>
    <ID>MaxLineLength:PatSurvaySectionTwoSummary.kt$castName = "OBC"</ID>
    <ID>MaxLineLength:PatSurvaySectionTwoSummary.kt$if</ID>
    <ID>MaxLineLength:PatSurvaySectionTwoSummary.kt$patSectionSummaryViewModel.patSectionRepository.prefRepo.saveQuestionScreenOpenFrom(PageFrom.SUMMARY_TWO_PAGE.ordinal)</ID>
    <ID>MaxLineLength:PatSurvaySectionTwoSummary.kt$wealth_ranking = "POOR"</ID>
    <ID>MaxLineLength:PatSurveyCompleteSummary.kt$if</ID>
    <ID>MaxLineLength:PatSurveyCompleteSummary.kt$isSummaryEnable = didi.value.patExclusionStatus != ExclusionType.EDIT_PAT_EXCLUSION.ordinal</ID>
    <ID>MaxLineLength:PatSurveyCompleteSummary.kt$navController.navigate("bpc_single_question_screen/${didiId}/$TYPE_EXCLUSION/$index")</ID>
    <ID>MaxLineLength:PatSurveyCompleteSummary.kt$navController.navigate("bpc_single_question_screen/${didiId}/$TYPE_INCLUSION/$index")</ID>
    <ID>MaxLineLength:PatSurveyCompleteSummary.kt$text</ID>
    <ID>MaxLineLength:PatSurveyCompleteSummary.kt$||</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$.</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$NudgeLogger.d("PdfUtil", "getFormAPdf -&gt; didi.id = ${didiEntity.id}, didi.name = ${didiEntity.name}")</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$NudgeLogger.d("PdfUtil", "getFormAPdfForBpc -&gt; didi.id = ${didiEntity.id}, didi.name = ${didiEntity.name}")</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$NudgeLogger.d("PdfUtil", "getFormBPdfForBpc -&gt; didi.id = ${didiEntity.id}, didi.name = ${didiEntity.name}")</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$NudgeLogger.d("PdfUtil", "getFormCPdfForBpc -&gt; didi.id = ${didiEntity.id}, didi.name = ${didiEntity.name}")</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$TextCell(casteList[casteList.map { it.id }.indexOf(didiEntity.castId)].casteName, cellDataTextProperties, dataCellWidth)</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$TextCell(if (didiEntity.cohortName == EMPTY_TOLA_NAME) "${villageEntity.name}" else "${didiEntity.cohortName}", cellDataTextProperties, dataCellWidth)</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$didiDetailList.filter { it.wealth_ranking == WealthRank.POOR.rank &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.rankingEdit }</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$if (didiEntity.cohortName == EMPTY_TOLA_NAME) "${villageEntity.name}" else "${didiEntity.cohortName}"</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$return File("${context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${formName}_${villageId}.pdf")</ID>
    <ID>MaxLineLength:PdfUtils.kt$PdfUtils$simplyPdfDocument.text</ID>
    <ID>MaxLineLength:PdfViewer.kt$/*BoxWithConstraints( modifier = modifier .fillMaxWidth() .background(pdfViewerBg) .padding(it) .padding(horizontal = 10.dp) ) { val width = with(LocalDensity.current) { maxWidth.toPx() }.toInt() val height = (width * sqrt(2f)).toInt() val pageCount by remember(renderer) { derivedStateOf { renderer?.pageCount ?: 0 } } val currentPage = remember { mutableStateOf(1) } var scale by remember { mutableStateOf(1f) } var offsetX by remember { mutableStateOf(0f) } var offsetY by remember { mutableStateOf(0f) } LazyColumn( verticalArrangement = verticalArrangement, state = lazyScrollState ) { item { Spacer(modifier = Modifier.height(8.dp)) } items( count = pageCount, key = { index -&gt; "$uri-$index" } ) { index -&gt; val cacheKey = MemoryCache.Key("$uri-$index") var bitmap by remember { mutableStateOf(imageLoader.memoryCache?.get(cacheKey) as? Bitmap?) } if (bitmap == null) { DisposableEffect(uri, index) { val job = imageLoadingScope.launch(Dispatchers.IO) { val destinationBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888) mutex.withLock { Log.d("PdfViewer", "Loading PDF $uri - page $index/$pageCount") if (!coroutineContext.isActive) return@launch try { renderer?.let { it.openPage(index).use { page -&gt; page.render( destinationBitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY ) } } } catch (e: Exception) { //Just catch and return in case the renderer is being closed return@launch } } bitmap = destinationBitmap } onDispose { job.cancel() } } Box( modifier = Modifier .background(pdfViewerBg) .aspectRatio(1f / sqrt(2f)) .fillMaxWidth() ) } else { val request = ImageRequest.Builder(context) .size(width, height) .memoryCacheKey(cacheKey) .data(bitmap) .build() val painter = rememberImagePainter(request) painter.state.painter?.intrinsicSize?.let { it1 -&gt; zoomState.setContentSize( it1 ) } Card( elevation = 4.dp, contentColor = Color.Transparent, shape = RectangleShape, modifier = Modifier .zoomable(zoomState) ) { Box(Modifier.fillMaxSize().aspectRatio(sqrt(2f) / 1f)) { Image( modifier = Modifier .background(Color.White) .aspectRatio(sqrt(2f) / 1f) .pointerInput(Unit) { forEachGesture { awaitPointerEventScope { awaitFirstDown() do { val event = awaitPointerEvent() scale *= event.calculateZoom() val offset = event.calculatePan() offsetX += offset.x offsetY += offset.y } while (event.changes.any { it.pressed }) } } } .graphicsLayer( scaleX = scale, scaleY = scale, translationX = offsetX, translationY = offsetY ) .fillMaxWidth(), contentScale = ContentScale.FillBounds, painter = painter, contentDescription = "Page ${index + 1} of $pageCount" ) Text(text = "Page ${index + 1} of $pageCount", modifier = Modifier.align( Alignment.BottomCenter).padding(bottom = 4.dp).fillMaxWidth().background( white), color = black1, fontSize = 8.sp, fontFamily = NotoSans, fontWeight = FontWeight.Normal, textAlign = TextAlign.Center) } } // ZoomableImage(request = request, modifier = Modifier) } } item { Spacer(modifier = Modifier.height(8.dp)) } } }*/</ID>
    <ID>MaxLineLength:PoorDidiListDao.kt$PoorDidiListDao$@Query("Select * from $POOR_DIDI_TABLE where villageId = :villageId and activeStatus = 1 ORDER BY localCreatedDate DESC")</ID>
    <ID>MaxLineLength:ProgressScreen.kt$/* AnimatedVisibility(visible = !isResendOTPEnable.value, exit = fadeOut(), enter = fadeIn()) { Row( horizontalArrangement = Arrangement.End, modifier = Modifier.fillMaxWidth(), ) { val countDownTimer = object : CountDownTimer(OTP_RESEND_DURATION, 1000) { @SuppressLint("SimpleDateFormat") override fun onTick(millisUntilFinished: Long) { val dateTimeFormat= SimpleDateFormat("00:ss") formattedTime.value=dateTimeFormat.format(Date(millisUntilFinished)) } override fun onFinish() { isResendOTPEnable.value = true isResendOTPVisible = !isResendOTPVisible } } DisposableEffect(key1 = !isResendOTPEnable.value) { countDownTimer.start() onDispose { countDownTimer.cancel() } } Text( text = stringResource( id = R.string.expiry_login_verify_otp, formattedTime.value ), color = textColorDark, fontSize = 14.sp, fontFamily = NotoSans, fontWeight = FontWeight.SemiBold, textAlign = TextAlign.Start, modifier = Modifier .fillMaxWidth() .padding(horizontal = dimensionResource(id = R.dimen.dp_8)) .background(Color.Transparent) ) } } Row( horizontalArrangement = Arrangement.Center, modifier = Modifier.fillMaxWidth() ) { Text( text = stringResource(id = R.string.resend_otp), color = if (isResendOTPEnable.value) greenOnline else placeholderGrey, fontSize = 14.sp, fontFamily = NotoSans, fontWeight = FontWeight.SemiBold, textAlign = TextAlign.Center, textDecoration = TextDecoration.Underline, modifier = Modifier.clickable(enabled = isResendOTPEnable.value) { RetryHelper.generateOtp() { success, message, mobileNumber -&gt; snackState.addMessage( message = context.getString(R.string.otp_resend_to_mobile_number_message_for_relogin).replace("{MOBILE_NUMBER}", mobileNumber, true), isSuccess = true, isCustomIcon = false) } formattedTime.value = SEC_30_STRING isResendOTPEnable.value = false } ) }*/</ID>
    <ID>MaxLineLength:ProgressScreen.kt$Icon(painter = painterResource(id = R.drawable.sarathi_logo_mini), contentDescription = "app bar icon", tint = textColorDark,modifier= Modifier.size(26.dp))</ID>
    <ID>MaxLineLength:ProgressScreen.kt$Row</ID>
    <ID>MaxLineLength:ProgressScreen.kt$StepsBox(boxTitle = "TransectBox", subTitle = "10 Poor didis identified", stepNo = 1, index = 1, iconId = 1, onclick = {})</ID>
    <ID>MaxLineLength:ProgressScreen.kt$if</ID>
    <ID>MaxLineLength:ProgressScreen.kt$onNavigateToStep(villageId,step.id,index,(viewModel.stepList.value[index].isComplete == StepStatus.COMPLETED.ordinal))</ID>
    <ID>MaxLineLength:ProgressScreen.kt$shouldBeActive = isStepCompleted == StepStatus.INPROGRESS.ordinal || isStepCompleted == StepStatus.COMPLETED.ordinal</ID>
    <ID>MaxLineLength:ProgressScreen.kt$snackState.addMessage(message = message, isSuccess = false, isCustomIcon = false)</ID>
    <ID>MaxLineLength:ProgressScreen.kt$text = if (boxTitle.contains("pat ", true)) boxTitle.replace("pat ", "PAT ", true) else boxTitle</ID>
    <ID>MaxLineLength:ProgressScreen.kt$tint = if (shouldBeActive) { if (isCompleted) stepIconCompleted else stepIconEnableColor } else stepIconDisableColor</ID>
    <ID>MaxLineLength:ProgressScreen.kt$viewModel.isVoEndorsementComplete.value[villageId] = isStepCompleted == StepStatus.COMPLETED.ordinal</ID>
    <ID>MaxLineLength:ProgressScreenViewModel.kt$ProgressScreenViewModel$"callWorkFlowAPI -&gt; response: status: ${response.status}, message: ${response.message}, data: ${response.data.toString()}"</ID>
    <ID>MaxLineLength:ProgressScreenViewModel.kt$ProgressScreenViewModel$"callWorkFlowAPI -&gt; stepsListDao.updateNeedToPost after for stepId: $stepId, villageId: $villageId, needToPost: false"</ID>
    <ID>MaxLineLength:ProgressScreenViewModel.kt$ProgressScreenViewModel$"callWorkFlowAPI -&gt; stepsListDao.updateNeedToPost before for stepId: $stepId, villageId: $villageId, needToPost: false"</ID>
    <ID>MaxLineLength:ProgressScreenViewModel.kt$ProgressScreenViewModel$"callWorkFlowAPI -&gt; stepsListDao.updateWorkflowId after for stepId: $stepId, villageId: $villageId, workFlowId: ${it[0].id}"</ID>
    <ID>MaxLineLength:ProgressScreenViewModel.kt$ProgressScreenViewModel$"callWorkFlowAPI -&gt; stepsListDao.updateWorkflowId before for stepId: $stepId, workFlowId: ${it[0].id}"</ID>
    <ID>MaxLineLength:ProgressScreenViewModel.kt$ProgressScreenViewModel$&amp;&amp;</ID>
    <ID>MaxLineLength:ProgressScreenViewModel.kt$ProgressScreenViewModel$// selectedText.value = villageList[villageList.map { it.id }.indexOf(prefRepo.getSelectedVillage().id)].name</ID>
    <ID>MaxLineLength:ProgressScreenViewModel.kt$ProgressScreenViewModel$didiList.value.filter { it.wealth_ranking == WealthRank.POOR.rank &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal }.size</ID>
    <ID>MaxLineLength:QuestionScreen.kt$)</ID>
    <ID>MaxLineLength:QuestionScreen.kt$,</ID>
    <ID>MaxLineLength:QuestionScreen.kt$NudgeLogger.e("QuestionScreen", "LaunchedEffect(key1 = Unit, key2 = !questionList.isNullOrEmpty()) -&gt; exception", ex)</ID>
    <ID>MaxLineLength:QuestionScreen.kt$answerOptionModel = sortedOptionList[selectedIndex]</ID>
    <ID>MaxLineLength:QuestionScreen.kt$buttonTitle = "Q${if ((pagerState.currentPage + 2) &lt;= questionList.size) (pagerState.currentPage + 2) else (pagerState.currentPage + 1)}"</ID>
    <ID>MaxLineLength:QuestionScreen.kt$else</ID>
    <ID>MaxLineLength:QuestionScreen.kt$enteredAssetAmount = if (viewModel.enteredAmount.value.isNullOrEmpty()) "0" else viewModel.enteredAmount.value</ID>
    <ID>MaxLineLength:QuestionScreen.kt$enteredAssetAmount = if (viewModel.enteredAmount.value.isNullOrEmpty()) BLANK_STRING else viewModel.enteredAmount.value</ID>
    <ID>MaxLineLength:QuestionScreen.kt$if</ID>
    <ID>MaxLineLength:QuestionScreen.kt$showNextButton = (viewModel.prevButtonVisible.value &amp;&amp; !viewModel.nextButtonVisible.value)</ID>
    <ID>MaxLineLength:QuestionScreen.kt$summary = questionList[it].questionSummary ?: BLANK_STRING</ID>
    <ID>MaxLineLength:QuestionScreen.kt$}</ID>
    <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$enteredAmount.value="0"</ID>
    <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$nextCTAVisibility.value=(quesIndex &lt; questionList.value.size - 1 &amp;&amp; quesIndex&lt; answerList.value.size)</ID>
    <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val answerCount= repository.isQuestionAnswered(didiId = didiId, questionId = questionList.value[quesIndex].questionId?:0)</ID>
    <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val index = questionList.value[quesIndex].options.sortedBy { it.optionValue }.map { it.optionId }.indexOf(optionId)</ID>
    <ID>MaxLineLength:QuestionScreenViewModel.kt$QuestionScreenViewModel$val optionList = questionList.value[quesIndex].options.sortedBy { it.optionValue }.filter { it.optionType == BLANK_STRING }</ID>
    <ID>MaxLineLength:ReLoginScreen.kt$message</ID>
    <ID>MaxLineLength:RepositoryModule.kt$RepositoryModule$apiService: ApiService</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$.</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$/* it.selected.forEach { didi -&gt; var tolaName = BLANK_STRING var casteName = BLANK_STRING // val singleTola = tolaDao.fetchSingleTola(didi.cohortId) val singleCaste = castListDao?.getCaste(didi.castId,prefRepo?.getAppLanguageId()?:2) // singleTola?.let { // tolaName = it.name // } singleCaste?.let { casteName = it.casteName } // if (singleTola != null) { val wealthRanking = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.WEALTH_RANKING.name)) didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.WEALTH_RANKING.name)].status else WealthRank.NOT_RANKED.rank val patSurveyStatus = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.PAT_SURVEY.name)) PatSurveyStatus.toInt(didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.PAT_SURVEY.name)].status) else PatSurveyStatus.NOT_STARTED.ordinal val voEndorsementStatus = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.VO_ENDROSEMENT.name)) DidiEndorsementStatus.toInt(didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.PAT_SURVEY.name)].status) else DidiEndorsementStatus.NOT_STARTED.ordinal //TODO Create new table bpcSelectedDidiDao?.insertDidi( BpcSelectedDidiEntity( id = didi.id, serverId = didi.id, name = didi.name, address = didi.address, guardianName = didi.guardianName, relationship = didi.relationship, castId = didi.castId, castName = casteName, cohortId = didi.cohortId, villageId = villageId, cohortName = tolaName, needsToPost = false, wealth_ranking = */</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$/*DidiEndorsementStatus.ENDORSED.ordinal, section1Status = PatSurveyStatus.COMPLETED.ordinal, section2Status = PatSurveyStatus.COMPLETED.ordinal, createdDate = didi.createdDate, modifiedDate = didi.modifiedDate, beneficiaryProcessStatus = didi.beneficiaryProcessStatus, shgFlag = SHGFlag.NOT_MARKED.value, transactionId = "", bpcScore = didi.bpcScore, bpcComment = didi.bpcComment, crpComment = didi.crpComment, crpScore = didi.crpScore ) ) } it.not_selected.forEach { didi -&gt; var `tolaName = BLANK_STRING var casteName = BLANK_STRING // val singleTola = tolaDao.fetchSingleTola(didi.cohortId) val singleCaste = castListDao?.getCaste(didi.castId, prefRepo?.getAppLanguageId()?:2) // singleTola?.let { // tolaName = it.name // } singleCaste?.let { casteName = it.casteName } // if (singleTola != null) { val wealthRanking = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.WEALTH_RANKING.name)) didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.WEALTH_RANKING.name)].status else WealthRank.NOT_RANKED.rank val patSurveyStatus = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.PAT_SURVEY.name)) PatSurveyStatus.toInt(didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.PAT_SURVEY.name)].status) else PatSurveyStatus.NOT_STARTED.ordinal val voEndorsementStatus = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.VO_ENDROSEMENT.name)) DidiEndorsementStatus.toInt(didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.PAT_SURVEY.name)].status) else DidiEndorsementStatus.NOT_STARTED.ordinal bpcNonSelectedDidiDao?.insertNonSelectedDidi( BpcNonSelectedDidiEntity( id = didi.id, serverId = didi.id, name = didi.name, address = didi.address, guardianName = didi.guardianName, relationship = didi.relationship, castId = didi.castId, castName = casteName, cohortId = didi.cohortId, villageId = villageId, cohortName = tolaName, needsToPost = false, wealth_ranking = */</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$/*voEndorsementStatus*/</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$DidiEndorsementStatus</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$OtpRequest(mobileNumber = prefRepo?.getMobileNumber() ?: "", otp = if (otpNumber.value == "") autoReadOtp.value else otpNumber.value)</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$PatSurveyStatus</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$QUESTION_FLAG_WEIGHT</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$answerValue</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$castListDao?.getCaste(didi.castId, prefRepo?.getAppLanguageId()?:2)</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$didi.beneficiaryProcessStatus</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$if</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$optionValue</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$val ex = ApiResponseFailException(poorDidiList?.message ?: "Poor Didi Ranking list error")</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$val localAnswersForDidi = answerDao?.isQuestionAnswered(sectionAnswerEntity.didiId, sectionAnswerEntity.questionId) ?: 0</ID>
    <ID>MaxLineLength:RetryHelper.kt$RetryHelper$val localNumericAnswer = numericAnswerDao?.isNumericQuestionAnswered(numericAnswerEntity.questionId, numericAnswerEntity.optionId, numericAnswerEntity.didiId)</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$ScoreItem(didiEntity = didiEntity, itemName = stringResource(R.string.bpc_score_text), itemType = BPC_USER_TYPE, modifier = Modifier.weight(1f))</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$ScoreItem(didiEntity = didiEntity, itemName = stringResource(R.string.crp_score_text), itemType = CRP_USER_TYPE, modifier = Modifier.weight(1f))</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$append(if (filterdDidiList.value.size &gt; 1) stringResource(R.string.result_text_plural) else stringResource(R.string.result_text_singular))</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$exclusionResponse = viewModel.exclusionListResponse[didiEntity.id] ?: ""</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$if</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$navController.navigate("bpc_pat_complete_didi_summary_screen/${didiEntity.id}/${ARG_FROM_PAT_SUMMARY_SCREEN}")</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$painter = painterResource(id = R.drawable.ic_baseline_keyboard_arrow_down_24)</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$text = stringResource(id = if (count &gt; 1) R.string.comparison_screen_heading_plural else R.string.comparison_screen_heading_singular).replace("{COUNT}", count.toString(), true)</ID>
    <ID>MaxLineLength:ScoreComparisionScreen.kt$val colorTransistion = updateTransition(targetState = passPercentage.value &gt; viewModel.minMatchPercentage, label = "colorTransistion")</ID>
    <ID>MaxLineLength:ScoreComparisonViewModel.kt$ScoreComparisonViewModel$exclusionResponse = "${exclusionResponse}${questionList[questionList.map { it.questionId }.indexOf(it.questionId)].questionSummary}, "</ID>
    <ID>MaxLineLength:ScoreComparisonViewModel.kt$ScoreComparisonViewModel$val bpcScorePercentageForVillage = bpcScorePercentageDao.getBpcScorePercentageForState(prefRepo.getSelectedVillage().stateId)</ID>
    <ID>MaxLineLength:ScoreComparisonViewModel.kt$ScoreComparisonViewModel$val exclusionItems = answerDao.getAnswerForDidi(didiId = didi.id, actionType = TYPE_EXCLUSION).filter { it.optionValue == 1 }</ID>
    <ID>MaxLineLength:ScoreComparisonViewModel.kt$ScoreComparisonViewModel$val exclusionList = localDidList.filter { it.section1Status == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.section2Status == PatSurveyStatus.NOT_STARTED.ordinal }</ID>
    <ID>MaxLineLength:SettingRepository.kt$SettingRepository$EventName.REJECTED_PAT_SCORE</ID>
    <ID>MaxLineLength:SettingRepository.kt$SettingRepository$EventName.SAVE_WEALTH_RANKING</ID>
    <ID>MaxLineLength:SettingRepository.kt$SettingRepository$coreSharedPrefs.setBackupFileName(getDefaultBackUpFileName("regenerate_${it.id}_" + prefRepo.getMobileNumber()))</ID>
    <ID>MaxLineLength:SettingRepository.kt$SettingRepository$coreSharedPrefs.setImageBackupFileName(getDefaultImageBackUpFileName("regenerate_${it.id}_" + prefRepo.getMobileNumber()))</ID>
    <ID>MaxLineLength:SettingScreen.kt$"Speed Type: ${mainActivity?.connectionSpeedType?.value} Connection Speed: ${mainActivity?.connectionSpeed?.value}"</ID>
    <ID>MaxLineLength:SettingScreen.kt$/*Canvas( modifier = Modifier .fillMaxWidth() .height(24.dp) .padding(start = indicatorPadding, end = indicatorPadding) ) { // Background indicator drawLine( color = backgroundIndicatorColor, cap = StrokeCap.Round, strokeWidth = size.height, start = Offset(x = 0f, y = 0f), end = Offset(x = size.width, y = 0f) ) // Convert the downloaded percentage into progress (width of foreground indicator) val progress = (animateNumber.value / 100) * size.width // size.width returns the width of the canvas // Foreground indicator drawLine( brush = Brush.linearGradient( colors = gradientColors ), cap = StrokeCap.Round, strokeWidth = size.height, start = Offset(x = 0f, y = 0f), end = Offset(x = progress, y = 0f) ) }*/</ID>
    <ID>MaxLineLength:SettingScreen.kt$if</ID>
    <ID>MaxLineLength:SettingScreen.kt$text = " ${BuildConfig.FLAVOR.uppercase(Locale.getDefault())} v${BuildConfig.VERSION_NAME} (${BuildConfig.VERSION_CODE})"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$" &amp;&amp; fetchAllDidiNeedToDeleteList.isEmpty() -&gt; ${fetchAllDidiNeedToDeleteList.isEmpty()}\n"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$" &amp;&amp; fetchAllDidiNeedToUpdateList.isEmpty() -&gt; ${fetchAllDidiNeedToUpdateList.isEmpty()}\n"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$" &amp;&amp; fetchAllPendingDidiNeedToDeleteList.isEmpty() -&gt; ${fetchAllPendingDidiNeedToDeleteList.isEmpty()}\n"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$" &amp;&amp; fetchAllPendingDidiNeedToUpdateList.isEmpty() -&gt; ${fetchAllPendingDidiNeedToUpdateList.isEmpty()}"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$" fetchAllDidiNeedToPostList.isEmpty() -&gt; ${fetchAllDidiNeedToPostList.isEmpty()}\n"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$"\n\n fetchAllDidiNeedToDeleteList -&gt; ${fetchAllDidiNeedToDeleteList.json()};; \n\n fetchAllPendingDidiNeedToDeleteList -&gt; ${fetchAllPendingDidiNeedToDeleteList.json()};; "</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$"\n\n fetchAllDidiNeedToUpdateList -&gt; ${fetchAllDidiNeedToUpdateList.json()};; \n\n fetchAllPendingDidiNeedToUpdateList -&gt; ${fetchAllPendingDidiNeedToUpdateList.json()}"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$"isBPCDidiSynced: villageId -&gt; ${village.id} isBpcDidiListSyncedForVillage: $isBpcDidiListSyncedForVillage"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$"isFifthStepNeedToBeSync -&gt; getAllNeedToPostVoDidis.isEmpty() -&gt; ${getAllNeedToPostVoDidis.isEmpty()};;"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$"isFormNeedToBeUpload: village.id -&gt; ${village.id}, isFormUploadedForVillage -&gt; $isFormUploadedForVillage"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$"isFourthStepNeedToBeSync -&gt; fetchPATSurveyDidiList.isEmpty() -&gt; ${fetchPATSurveyDidiList.isEmpty()};;"</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$"isSecondStepNeedToBeSync -&gt; fetchAllDidiNeedToPostList -&gt; ${fetchAllDidiNeedToPostList.json()};; \n\n fetchPendingDidiList -&gt; ${fetchPendingDidiList.json()};; "</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$.</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$File("${context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${FORM_A_PDF_NAME}_${villageId}.pdf")</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$File("${context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${FORM_B_PDF_NAME}_${villageId}.pdf")</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$File("${context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${FORM_C_PDF_NAME}_${villageId}.pdf")</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$URL("https://sarathi.lokos.in/write-api/file/view?fileName=25882_shibani%20Nama%20_CRP_2023-12-10.png").openConnection()</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$didiDetailList = didiList.filter { it.forVoEndorsement == 1 &amp;&amp; it.section2Status == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal &amp;&amp; !it.patEdit }</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$didiDetailList = didiList.filter { it.forVoEndorsement == 1 &amp;&amp; it.section2Status == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal &amp;&amp; it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal }</ID>
    <ID>MaxLineLength:SettingViewModel.kt$SettingViewModel$if</ID>
    <ID>MaxLineLength:SharedPrefs.kt$SharedPrefs$return Gson().fromJson(prefs.getString(PREF_KEY_SELECTED_VILLAGE, Gson().toJson(defaultVillageEntity)), VillageEntity::class.java)</ID>
    <ID>MaxLineLength:SharedPrefs.kt$SharedPrefs$val defaultVillageEntity= VillageEntity(id = 0, languageId = 2, name = BLANK_STRING, federationName = BLANK_STRING, stateId = 0, steps_completed = listOf(), needsToPost = false, localVillageId = 0)</ID>
    <ID>MaxLineLength:SingleQuestionScreen.kt$)</ID>
    <ID>MaxLineLength:SingleQuestionScreen.kt$,</ID>
    <ID>MaxLineLength:SingleQuestionScreen.kt$answerOptionModel =sortedOptionList[selectedIndex]</ID>
    <ID>MaxLineLength:SingleQuestionScreen.kt$else</ID>
    <ID>MaxLineLength:SingleQuestionScreen.kt$enteredAssetAmount = if (viewModel.enteredAmount.value.isNullOrEmpty()) BLANK_STRING else viewModel.enteredAmount.value</ID>
    <ID>MaxLineLength:SingleQuestionScreen.kt$if</ID>
    <ID>MaxLineLength:SingleQuestionScreen.kt$summary = questionList[it].questionSummary ?: BLANK_STRING</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$&amp;&amp;</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$)</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$Text</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$else</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$fun</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$if</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$if (count &lt; 2) R.string.didi_conirmation_text_singular else R.string.didi_conirmation_text_plural</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$mutableStateOf(didi.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal || didi.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal)</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$navController.navigate("pat_complete_didi_summary_screen/${didi.id}/${ARG_FROM_PAT_DIDI_LIST_SCREEN}")</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$navController.navigate("yes_no_question_screen/${didi.id}/$TYPE_EXCLUSION/$quesIndex")</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$newFilteredTolaDidiList[didiKey]?.filter { it.wealth_ranking == WealthRank.POOR.rank }</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$positiveButtonText</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$showToast(context, context.getString(R.string.previous_step_not_complete_messgae_text))</ID>
    <ID>MaxLineLength:SocialMappingDidiListScreen.kt$}</ID>
    <ID>MaxLineLength:SplashScreen.kt$NudgeLogger.d("SplashScreen", "LaunchedEffect(key1 = true) -&gt; !(context as MainActivity).isOnline.value = false")</ID>
    <ID>MaxLineLength:SplashScreen.kt$NudgeLogger.d("SplashScreen", "LaunchedEffect(key1 = true) -&gt; !(context as MainActivity).isOnline.value = true")</ID>
    <ID>MaxLineLength:SplashScreen.kt$NudgeLogger.d("SplashScreen", "LaunchedEffect(key1 = true) -&gt; fetchLanguageDetails callback: -&gt; isLoggedIn = false")</ID>
    <ID>MaxLineLength:SplashScreen.kt$NudgeLogger.d("SplashScreen", "LaunchedEffect(key1 = true) -&gt; fetchLanguageDetails callback: -&gt; isLoggedIn = true")</ID>
    <ID>MaxLineLength:SplashScreen.kt$NudgeLogger.d("SplashScreen", "LaunchedEffect(key1 = true) -&gt; fetchLanguageDetails callback: -&gt; it: $it")</ID>
    <ID>MaxLineLength:StepListEntity.kt$StepListEntity$return StepListEntity(stepId = stepId, id = id, orderNumber = orderNumber, name = name, status = newStep.status, isComplete = if (StepStatus.getStepFromOrdinal(isComplete) != newStep.status &amp;&amp; !needToPost) StepStatus.getOrdinalFromStep(newStep.status) else isComplete , needToPost = needToPost, villageId = villageId, programId = programId, workFlowId = newStep.workFlowId, localModifiedDate = localModifiedDate)</ID>
    <ID>MaxLineLength:StepListEntity.kt$StepListEntity.Companion$name = step.name</ID>
    <ID>MaxLineLength:StepsListDao.kt$StepsListDao$@Query("SELECT * FROM $STEPS_LIST_TABLE WHERE villageId = :villageId AND isComplete = :isComplete ORDER BY orderNumber DESC LIMIT 1")</ID>
    <ID>MaxLineLength:StepsListDao.kt$StepsListDao$@Query("SELECT count(*) FROM $STEPS_LIST_TABLE WHERE villageId = :villageId and id= :stepId ORDER BY orderNumber ASC")</ID>
    <ID>MaxLineLength:StepsListDao.kt$StepsListDao$@Query("UPDATE $STEPS_LIST_TABLE SET isComplete = :inProgress where orderNumber = :orderNumber AND villageId = :villageId")</ID>
    <ID>MaxLineLength:StepsListDao.kt$StepsListDao$@Query("UPDATE $STEPS_LIST_TABLE SET needToPost = :needsToPost WHERE orderNumber =:orderNumber and villageId = :villageId")</ID>
    <ID>MaxLineLength:StepsListDao.kt$StepsListDao$@Query("UPDATE $STEPS_LIST_TABLE SET status = :status, workFlowId = :workflowId where id = :stepId AND villageId = :villageId")</ID>
    <ID>MaxLineLength:SurveySummary.kt$&amp;&amp;</ID>
    <ID>MaxLineLength:SurveySummary.kt$// stringResource(R.string.pat_completed_for_didi_plural).replace("{COUNT}", count.toString())</ID>
    <ID>MaxLineLength:SurveySummary.kt$// stringResource(R.string.pat_completion_dialog_message_plural).replace("{COUNT}", count.toString())</ID>
    <ID>MaxLineLength:SurveySummary.kt$DidiEndorsementStatus.ENDORSED.ordinal -&gt; stringResource(R.string.vo_summary_endorsed_empty_text)</ID>
    <ID>MaxLineLength:SurveySummary.kt$DidiEndorsementStatus.REJECTED.ordinal -&gt; stringResource(R.string.vo_summary_rejected_empty_text)</ID>
    <ID>MaxLineLength:SurveySummary.kt$Pair((context as MainActivity).isBackFromSummary.value, surveySummaryViewModel.baseSummarySecond.value)</ID>
    <ID>MaxLineLength:SurveySummary.kt$PatSurveyStatus.COMPLETED.ordinal -&gt; stringResource(R.string.pat_summary_completed_empty_text)</ID>
    <ID>MaxLineLength:SurveySummary.kt$PatSurveyStatus.NOT_AVAILABLE.ordinal, PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal -&gt; stringResource(R.string.pat_summary_not_available_empty_text)</ID>
    <ID>MaxLineLength:SurveySummary.kt$R.string.didi_not_available_text_singular</ID>
    <ID>MaxLineLength:SurveySummary.kt$boxTitle</ID>
    <ID>MaxLineLength:SurveySummary.kt$context.getString(R.string.pat_completed_for_didi_plural,surveySummaryViewModel.totalPatDidiCount.value)</ID>
    <ID>MaxLineLength:SurveySummary.kt$context.getString(R.string.pat_completed_for_didi_singular,surveySummaryViewModel.totalPatDidiCount.value,surveySummaryViewModel.notAvailableDidiCount.value,surveySummaryViewModel.voEndorseDidiCount.value)</ID>
    <ID>MaxLineLength:SurveySummary.kt$context.getString(R.string.pat_success_message_singular).replace("{TOTAL_COUNT}", totalCount.toString())</ID>
    <ID>MaxLineLength:SurveySummary.kt$count</ID>
    <ID>MaxLineLength:SurveySummary.kt$didids.value</ID>
    <ID>MaxLineLength:SurveySummary.kt$didids.value.filter { it.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal }</ID>
    <ID>MaxLineLength:SurveySummary.kt$didids.value.filter { it.patSurveyStatus == showDidiListForStatus.second &amp;&amp; it.wealth_ranking == WealthRank.POOR.rank }</ID>
    <ID>MaxLineLength:SurveySummary.kt$didids.value.filter { it.voEndorsementStatus == DidiEndorsementStatus.REJECTED.ordinal }.size</ID>
    <ID>MaxLineLength:SurveySummary.kt$didids.value.filter { it.voEndorsementStatus == showDidiListForStatus.second }</ID>
    <ID>MaxLineLength:SurveySummary.kt$didids.value.filter { it.wealth_ranking == WealthRank.POOR.rank &amp;&amp; (it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal || it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal) }</ID>
    <ID>MaxLineLength:SurveySummary.kt$didids.value.filter { it.wealth_ranking == WealthRank.POOR.rank &amp;&amp; it.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal }.size</ID>
    <ID>MaxLineLength:SurveySummary.kt$else</ID>
    <ID>MaxLineLength:SurveySummary.kt$id</ID>
    <ID>MaxLineLength:SurveySummary.kt$id = if (didids.value.filter { it.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal }.size &lt;= 1) R.string.didi_endorsed_text_singula else R.string.didi_endorsed_text_plural</ID>
    <ID>MaxLineLength:SurveySummary.kt$if</ID>
    <ID>MaxLineLength:SurveySummary.kt$isVoEndorsementComplete = surveySummaryViewModel.isVOEndorsementComplete.value</ID>
    <ID>MaxLineLength:SurveySummary.kt$it.forVoEndorsement == 1 &amp;&amp; it.section2Status == PatSurveyStatus.COMPLETED.ordinal</ID>
    <ID>MaxLineLength:SurveySummary.kt$it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal</ID>
    <ID>MaxLineLength:SurveySummary.kt$list = if(fromScreen == ARG_FROM_PAT_SURVEY) surveySummaryViewModel.didiCountList.value else emptyList()</ID>
    <ID>MaxLineLength:SurveySummary.kt$navController.navigate("vo_endorsement_summary_screen/${didi.id}/${didi.voEndorsementStatus}")</ID>
    <ID>MaxLineLength:SurveySummary.kt$stringResource(id = R.string.vo_endorsement_completion_dialog_message_plural).replace("{COUNT}", count.toString())</ID>
    <ID>MaxLineLength:SurveySummary.kt$stringResource(id = R.string.vo_endorsement_completion_dialog_message_singular).replace("{COUNT}", count.toString())</ID>
    <ID>MaxLineLength:SurveySummary.kt$surveySummaryViewModel.repository.prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + surveySummaryViewModel.repository.prefRepo.getSelectedVillage().id, false)</ID>
    <ID>MaxLineLength:SurveySummary.kt$text = stringResource(id = if (fromScreen == ARG_FROM_PAT_SURVEY) R.string.pat_survey else R.string.vo_endorsement)</ID>
    <ID>MaxLineLength:SurveySummary.kt$val</ID>
    <ID>MaxLineLength:SurveySummary.kt$||</ID>
    <ID>MaxLineLength:SurveySummaryRepository.kt$SurveySummaryRepository$NudgeLogger.d("SurveySummaryRepository","updateDidiRanking Request=&gt; ${Gson().toJson(didiWealthRankingRequest)}")</ID>
    <ID>MaxLineLength:SurveySummaryRepository.kt$SurveySummaryRepository$return villageListDao.fetchVillageDetailsForLanguage(villageId, prefRepo.getAppLanguageId() ?: 2) ?: villageListDao.getVillage(villageId)</ID>
    <ID>MaxLineLength:SurveySummaryRepository.kt$SurveySummaryRepository$suspend</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$"calculateDidiScore: for Flag FLAG_RATIO totalWightWithoutNumQue += newScore -&gt; $totalWightWithoutNumQue"</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$"callWorkFlowAPI -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()} \n"</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$CheckDBStatus(this@SurveySummaryViewModel)</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$NudgeLogger.d("AddDidiViewModel", "callWorkFlowAPI -&gt; stepsListDao.updateNeedToPost after for inProgressStepResponse")</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$NudgeLogger.d("AddDidiViewModel", "callWorkFlowAPI -&gt; stepsListDao.updateNeedToPost before for inProgressStepResponse")</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$NudgeLogger.d("SurveySummaryViewModel", "callWorkFlowAPI -&gt; inProgressStepRequest = $inProgressStepRequest")</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$NudgeLogger.d("SurveySummaryViewModel", "callWorkFlowAPI -&gt; inProgressStepResponse = FAIL")</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$NudgeLogger.d("SurveySummaryViewModel", "callWorkFlowAPI -&gt; inProgressStepResponse: status = ${inProgressStepResponse.status}, message = ${inProgressStepResponse.message}, data = ${inProgressStepResponse.data.toString()}")</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$NudgeLogger.d("SurveySummaryViewModel", "callWorkFlowAPI -&gt; stepsListDao.updateNeedToPost after: for primaryWorkFlowResponse\n")</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$NudgeLogger.d("SurveySummaryViewModel", "callWorkFlowAPI -&gt; stepsListDao.updateNeedToPost before: for primaryWorkFlowResponse\n")</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$callBack(stepList.sortedBy { it.orderNumber }[currentStepIndex - 1].isComplete == StepStatus.COMPLETED.ordinal)</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$didiNotAvailableCountBPC</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$else</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$if</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$list.add(context.getString(R.string.pat_didi_sent_to_bpm_approval_singular,voEndorseDidiCount.value))</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$list.add(context.getString(R.string.pat_didi_sent_to_vo_endorsement_plural,voEndorseDidiCount.value))</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$notAvailableDidiCount.value= didiList.value.filter {(it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE.ordinal || it.patSurveyStatus == PatSurveyStatus.NOT_AVAILABLE_WITH_CONTINUE.ordinal) &amp;&amp; it.patEdit }.size</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$programsProcessId</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$repository.prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + repository.prefRepo.getSelectedVillage().id, false)</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$repository.prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + repository.prefRepo.getSelectedVillage().id, true)</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$repository.prefRepo.savePref(PREF_PAT_COMPLETION_DATE_ + repository.prefRepo.getSelectedVillage().id, currentTime)</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$result</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$return if (didiList.isNotEmpty() &amp;&amp; matchedCount != 0) ((matchedCount.toFloat()/didiList.size.toFloat()) * 100).toInt() else 0</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$totalPatDidiCount.value= didiList.value.filter { it.wealth_ranking == WealthRank.POOR.rank &amp;&amp; it.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.patEdit}.size</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$val matchPercentage = calculateMatchPercentage(didiList.value.filter { it.patSurveyStatus == PatSurveyStatus.COMPLETED.ordinal }, passingScore)</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$voEndorseDidiCount.value = didiList.value.filter { it.forVoEndorsement ==1 &amp;&amp; it.section2Status == PatSurveyStatus.COMPLETED.ordinal &amp;&amp; it.patEdit }.size</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$||</ID>
    <ID>MaxLineLength:SurveySummaryViewModel.kt$SurveySummaryViewModel$}</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$"calculateDidiScore: for Flag FLAG_RATIO totalWightWithoutNumQue += newScore -&gt; $totalWightWithoutNumQue"</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$"callWorkFlowAPI ApiResponseFailException"</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$"callWorkFlowAPI response: status: ${responseForStepUpdation.status}, message: ${responseForStepUpdation.message}, data: ${responseForStepUpdation.data} \n\n"</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$"callWorkFlowAPI stepsListDao.updateOnlyWorkFlowId before stepId: $step.stepId, it[0].id: ${it[0].id}, villageId: $step.villageId"</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$// prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + prefRepo.getSelectedVillage().id, false)</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer", "savePATSummeryToServer -&gt; !saveAPIResponse.data?.get(0)?.transactionId.isNullOrEmpty()")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer", "savePATSummeryToServer -&gt; saveAPIResponse.data?.get(0)?.transactionId.isNullOrEmpty()")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer", "savePATSummeryToServer Save: ${didi.id} :: ${didi.patSurveyStatus}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer", "savePATSummeryToServer answeredDidiList Request: ${answeredDidiList.json()}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer", "savePATSummeryToServer patSummarySaveRequest: $patSummarySaveRequest")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer", "savePATSummeryToServer updateDidiScore Request=&gt;: ${scoreDidiList.json()}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer", "updateBpcPatStatusToNetwork -&gt; didiRequestList: ${didiRequestList.json()}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer","addWorkFlow Request=&gt; ${Gson().toJson(Collections.unmodifiableList(addWorkFlowRequest))}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer","editWorkFlow Request=&gt; ${Gson().toJson(requestForStepUpdation)}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer","sendBpcMatchScore saveMatchSummary Request=&gt; ${requestList.json()}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer","sendBpcMatchScore saveMatchSummary saveMatchSummaryResponse=&gt; ${saveMatchSummaryResponse.json()}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.d("SyncBPCDataOnServer","updateBpcPatStatusToNetwork updatedPatResponse=&gt; ${updatedPatResponse.json()}")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$NudgeLogger.e("SyncHelper","callWorkFlowAPI response: status: ${addWorkFlowResponse.status}, message: ${addWorkFlowResponse.message}, data: ${addWorkFlowResponse.data} \n\n")</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$if</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + saveMatchSummaryResponse.villageId, true)</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$private</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$result</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$return if (didiList.isNotEmpty() &amp;&amp; matchedCount != 0) ((matchedCount.toFloat()/didiList.size.toFloat()) * 100).toInt() else 0</ID>
    <ID>MaxLineLength:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$||</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$"calculateDidiScore: for Flag FLAG_RATIO totalWightWithoutNumQue += newScore -&gt; $totalWightWithoutNumQue"</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$"calculateDidiScore: totalWightWithoutNumQue += newScore -&gt; $totalWightWithoutNumQue"</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$"callWorkFlowAPI response: status: ${responseForStepUpdation.status}, message: ${responseForStepUpdation.message}, data: ${responseForStepUpdation.data?.json()} \n\n"</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$"callWorkFlowAPI stepsListDao.updateOnlyWorkFlowId before stepId: $step.stepId, it[0].id: ${it[0].id}"</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$"updateWealthRankingToNetwork updateDidiRanking updateWealthRankResponse=&gt; ${updateWealthRankResponse.json()}"</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper", "checkAddDidiStatus checkAddDidiStatusRequest request =&gt; ${checkAddDidiStatusRequest.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper", "checkAddDidiStatus checkAddDidiStatusRequest response =&gt; ${response.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper", "checkTolaDeleteStatus checkTolaDeleteStatusRequest response=&gt; ${response.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper", "savePATSummeryToServer Save: ${didi.id} :: ${didi.patSurveyStatus}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper","addWorkFlow Request=&gt; ${Gson().toJson(Collections.unmodifiableList(addWorkFlowRequest))}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper","callWorkFlowAPI response: status: ${addWorkFlowResponse.status}, message: ${addWorkFlowResponse.message}, data: ${addWorkFlowResponse.data?.json()} \n\n")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper","checkDidiPatStatus checkDidiPatStatusRequest request=&gt; ${checkDidiPatStatusRequest.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper","checkTolaAddStatus checkTolaAddStatusRequest request=&gt; ${checkTolaAddStatusRequest.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper","checkTolaDeleteStatus checkTolaDeleteStatusRequest request=&gt; ${checkTolaDeleteStatusRequest.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper","checkTolaUpdateStatus checkTolaUpdateStatusRequest request=&gt; ${checkTolaUpdateStatusRequest.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper","checkTolaUpdateStatus checkTolaUpdateStatusRequest response=&gt; ${response.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$NudgeLogger.d("SyncHelper","savePATSummeryToServer patSummarySaveRequest response=&gt; ${saveAPIResponse.json()}")</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$PREF_SOCIAL_MAPPING_COMPLETION_DATE_+prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$PREF_TRANSECT_WALK_COMPLETION_DATE_+prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$PREF_VO_ENDORSEMENT_COMPLETION_DATE_+prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$PREF_WEALTH_RANKING_COMPLETION_DATE_+prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$didiDao.updateDidiDetailAfterSync(id = didi.id, serverId = didi.serverId, needsToPost = false, transactionId = "", createdDate = didi.createdDate?:0, modifiedDate = didi.modifiedDate?:0)</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$didiDao.updateDidiDetailAfterSync(id = didiEntity.id, serverId = didiEntity.serverId, needsToPost = false, transactionId = "", createdDate = didiEntity.createdDate?:0, modifiedDate = didiEntity.modifiedDate?:0)</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$didiRequestList</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$if</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$private</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$result</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$settingViewModel.onCatchError(ApiResponseFailException(addWorkFlowResponse.message), ApiType.ADD_WORK_FLOW_API)</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$settingViewModel.onCatchError(ApiResponseFailException(responseForStepUpdation.message), ApiType.WORK_FLOW_API)</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$val localDidiListForTola = didiDao.getDidisForTola(if (tola.serverId == 0) tola.id else tola.serverId)</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$val tolaList = didiDao.getAllNeedToPostPATDidi(needsToPostPAT = true, villageId = prefRepo.getSelectedVillage().id)</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$val userType=if((prefRepo.getPref(PREF_KEY_TYPE_NAME, "") ?: "").equals(BPC_USER_TYPE, true)) USER_BPC else USER_CRP</ID>
    <ID>MaxLineLength:SyncHelper.kt$SyncHelper$||</ID>
    <ID>MaxLineLength:TolaDao.kt$TolaDao$@Query("SELECT * from $TOLA_TABLE where needsToPost = :needsToPost and transactionId = :transactionId and serverId != :serverId")</ID>
    <ID>MaxLineLength:TolaDao.kt$TolaDao$@Query("SELECT * from $TOLA_TABLE where needsToPost = :needsToPost and transactionId = :transactionId and serverId = :serverId")</ID>
    <ID>MaxLineLength:TolaDao.kt$TolaDao$@Query("Update $TOLA_TABLE SET serverId = :serverId, needsToPost = :needsToPost, transactionId = :transactionId, createdDate = :createdDate, modifiedDate =:modifiedDate where id = :id")</ID>
    <ID>MaxLineLength:TolaDao.kt$TolaDao$fun</ID>
    <ID>MaxLineLength:TolaEntity.kt$TolaEntity$return TolaEntity(id, localUniqueId, tolaEntity.id, tolaEntity.name, type, tolaEntity.latitude, tolaEntity.longitude, villageId, status, createdDate, modifiedDate, localCreatedDate, localModifiedDate, needsToPost, transactionId)</ID>
    <ID>MaxLineLength:TransectWalkRepository.kt$TransectWalkRepository$suspend</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"addTolasToNetwork: response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"addTolasToNetwork: updateTolaTransactionId after for tola: ${tolaList[i]}, transactionId: $it1"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"addTolasToNetwork: updateTolaTransactionId before for tola: ${tolaList[i]}, transactionId: $it1"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"callWorkFlowAPI -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"checkTolaAddStatus response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"checkTolaDeleteStatus: response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"checkTolaUpdateStatus: response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"deleteTolaToNetwork: response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"deleteTolaToNetwork: tolaDao.updateTolaTransactionId after for tola: ${tolaList[i]}, transactionId: $it1"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"deleteTolaToNetwork: tolaDao.updateTolaTransactionId before for tola: ${tolaList[i]}, transactionId: $it1"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"markStepAsCompleteOrInProgress -&gt; stepsListDao.markStepAsCompleteOrInProgress($stepId, StepStatus.COMPLETED.ordinal, $villageId)"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"markStepAsCompleteOrInProgress -&gt; stepsListDao.markStepAsInProgress($nextStepId, StepStatus.INPROGRESS.ordinal, $villageId)"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"markTransectWalkIncomplete -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"markTransectWalkIncomplete -&gt; stepsListDao.markStepAsCompleteOrInProgress($stepId, StepStatus.INPROGRESS.ordinal, $villageId)"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"markTransectWalkIncomplete -&gt; stepsListDao.markStepAsCompleteOrInProgress(${newStep.id}, StepStatus.INPROGRESS.ordinal, $villageId)"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"updateTola -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"updateTolasToNetwork: response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"updateTolasToNetwork: tolaDao.updateTolaTransactionId after for tola: ${tolaList[i]}, transactionId: $it1"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$"updateTolasToNetwork: tolaDao.updateTolaTransactionId before for tola: ${tolaList[i]}, transactionId: $it1"</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$NudgeLogger.d("TransectWalkViewModel", "callWorkFlowAPI -&gt; inProgressStepRequest = $inProgressStepRequest")</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$NudgeLogger.d("TransectWalkViewModel", "callWorkFlowAPI -&gt; inProgressStepResponse: status = ${inProgressStepResponse.status}, message = ${inProgressStepResponse.message}, data = ${inProgressStepResponse.data.toString()}")</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$NudgeLogger.d("TransectWalkViewModel", "callWorkFlowAPI -&gt; primaryWorkFlowRequest = $primaryWorkFlowRequest")</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$transectWalkRepository.getDidisForTola(if (localTola.serverId == 0) localTola.id else localTola.serverId)</ID>
    <ID>MaxLineLength:TransectWalkViewModel.kt$TransectWalkViewModel$val</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$/*viewModel.markTransectWalkIncomplete(stepId, villageId, object : NetworkCallbackListener{ override fun onSuccess() { } override fun onFailed() { // showCustomToast(context, SYNC_FAILED) } })*/</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$// showCustomToast(context,context.getString(R.string.tola_deleted).replace("{TOLA_NAME}", tola.name))</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$&lt;no name provided&gt;$showCustomToast(context,context.getString(R.string.tola_already_exist))</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$&lt;no name provided&gt;$showCustomToast(context,context.getString(R.string.tola_deleted).replace("{TOLA_NAME}", tola.name))</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$&lt;no name provided&gt;.&lt;no name provided&gt;$NudgeLogger.d("TransectWalkScreen", "completeTolaAdditionClicked callWorkFlowAPI -&gt; onFailed")</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$if</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$isLocationAvailable = (tolaToBeEdited.location.lat != null &amp;&amp; tolaToBeEdited.location.long != null)</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$isTransectWalkCompleted = (viewModel.isTransectWalkComplete.value &amp;&amp; !tola.needsToPost)</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$positiveButtonText</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$showAddTolaBox</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$showCustomToast(context,context.getString(R.string.tola_updated).replace("{TOLA_NAME}", newName))</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$val totalCountWithoutEmptyTola = tolaList.filter { it.status == TolaStatus.TOLA_ACTIVE.ordinal &amp;&amp; it.name != EMPTY_TOLA_NAME }.size</ID>
    <ID>MaxLineLength:TransetWalkScreen.kt$viewModel</ID>
    <ID>MaxLineLength:Utils.kt$/*VideoItem( id = 24, title = "Video 1", description = "Introducing Chromecast. The easiest way to enjoy online video and music on your TV. For \$35. Find out more at google.com/chromecast.", url = "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4", thumbUrl = "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/images/ForBiggerJoyrides.jpg" ), VideoItem( id = 25, title = "Video 2", description = "Supporting description", url = "https://storage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4", thumbUrl = "https://storage.googleapis.com/gtv-videos-bucket/sample/images/ElephantsDream.jpg" ), VideoItem( id = 26, title = "Video 3", description = "Supporting description", url = "https://storage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4", thumbUrl = "https://storage.googleapis.com/gtv-videos-bucket/sample/images/ForBiggerBlazes.jpg" ), VideoItem( id = 27, title = "Video 4", description = "Supporting description", url = "https://storage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4", thumbUrl = "https://storage.googleapis.com/gtv-videos-bucket/sample/images/ForBiggerEscapes.jpg" ),*/</ID>
    <ID>MaxLineLength:Utils.kt$EventName.DELETE_DIDI</ID>
    <ID>MaxLineLength:Utils.kt$fun</ID>
    <ID>MaxLineLength:Utils.kt$if</ID>
    <ID>MaxLineLength:Utils.kt$return File("${context.getExternalFilesDir(if (fileType == FileType.VIDEO) Environment.DIRECTORY_MOVIES else if (fileType == FileType.IMAGE) Environment.DIRECTORY_DCIM else Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${videoItemId}.mp4")</ID>
    <ID>MaxLineLength:Utils.kt$return if (didiList.isNotEmpty() &amp;&amp; matchedCount != 0) ((matchedCount.toFloat() / didiList.size.toFloat()) * 100).toInt() else 0</ID>
    <ID>MaxLineLength:Utils.kt$url = "https://nudgetrainingdata.blob.core.windows.net/recordings/Videos/M9DigitalFormBAndSubmitForVOEndorsement.mp4"</ID>
    <ID>MaxLineLength:Utils.kt$val</ID>
    <ID>MaxLineLength:Utils.kt$val path =File("${activity.getExternalFilesDir(Environment.DIRECTORY_PICTURES)?.absolutePath}",filename).absolutePath</ID>
    <ID>MaxLineLength:VideDetailPlayerViewModel.kt$VideDetailPlayerViewModel$.</ID>
    <ID>MaxLineLength:VideDetailPlayerViewModel.kt$VideDetailPlayerViewModel$Log.d("VideDetailPlayerViewModel", "${context.getExternalFilesDir(Environment.DIRECTORY_MOVIES)?.absolutePath}/$id.mp4")</ID>
    <ID>MaxLineLength:VideoDetailPlayerScreen.kt$onClick = { if (isLandscape) exitFullscreen() else navController.popBackStack() }</ID>
    <ID>MaxLineLength:VideoListScreen.kt$ShowDialog</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"bpcSummaryDao.insert(BpcSummaryEntity(0, 0, 0, 0, 0, 0, villageId = village.id))"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"bpcSummaryResponse status = ${bpcSummaryResponse.status}, message = ${bpcSummaryResponse.message}, data = ${bpcSummaryResponse.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"calculateDidiScore: for Flag FLAG_RATIO totalWightWithoutNumQue += newScore -&gt; $totalWightWithoutNumQue"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"callWorkFlowAPI response: status: ${responseForStepUpdation.status}, message: ${responseForStepUpdation.message}, data: ${responseForStepUpdation.data} \n\n"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"callWorkFlowAPI stepsListDao.updateOnlyWorkFlowId before stepId: $step.stepId, it[0].id: ${it[0].id}, villageId: $step.villageId"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"cohortResponse status = ${cohortResponse.status}, message = ${cohortResponse.message}, data = ${cohortResponse.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"didiResponse status = ${didiResponse.status}, message = ${didiResponse.message}, data = ${didiResponse.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"poorDidiList status = ${poorDidiList.status}, message = ${poorDidiList.message}, data = ${poorDidiList.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$"response status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$.</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$// NudgeLogger.d("VillageSelectionRepository", "fetchDataForBpc finally -&gt; viewModel.showLoader.value = false")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$?.</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("SyncHelper", "savePATSummeryToServer Save: ${didi.id} :: ${didi.patSurveyStatus}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "calculateDidiScore totalWightWithoutNumQue: $totalWightWithoutNumQue")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "fetchUserAndVillageDetails -&gt; response: ${response.json()}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList request -&gt; village.id = ${village.id}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "savePATSummeryToServer -&gt; !saveAPIResponse.data?.get(0)?.transactionId.isNullOrEmpty()")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "savePATSummeryToServer -&gt; saveAPIResponse.data?.get(0)?.transactionId.isNullOrEmpty()")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "savePATSummeryToServer Save: ${didi.id} :: ${didi.patSurveyStatus}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "savePATSummeryToServer answeredDidiList: ${answeredDidiList.json()}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "savePATSummeryToServer patSummarySaveRequest: $patSummarySaveRequest")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository", "savePATSummeryToServer syncAndFetchDidiForBpc scoreDidiList: ${scoreDidiList.json()}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","addWorkFlow Request=&gt; ${Gson().toJson(Collections.unmodifiableList(addWorkFlowRequest))}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","savePATSurveyToServer Request=&gt;${answeredDidiList.json()}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","sendBpcMatchScore saveMatchSummary Request=&gt; ${requestList.json()}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","updateBpcPatStatusToNetwork Request=&gt; ${Gson().toJson(didiRequestList)}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","updateBpcStepsToServer editWorkFlow Request=&gt; ${Gson().toJson(requestForStepUpdation)}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","updateDidiToNetworkForCrp updateDidis Request=&gt; ${didiRequestList.json()}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","updateStepsToServer editWorkFlow Request=&gt; ${Gson().toJson(requestForStepUpdation)}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","updateVoStatusToNetwork Request=&gt; ${Gson().toJson(didiRequestList)}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionRepository","updateWealthRankingToNetwork Request=&gt; ${Gson().toJson(didiStepRequestList)}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionScreen", "fetchUserDetails catch (ex: Exception) -&gt; viewModel.showLoader.value = false")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionScreen", "fetchUserDetails else 1 -&gt; viewModel.showLoader.value = false")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionScreen", "fetchUserDetails response.status.equals(FAIL, true) -&gt; viewModel.showLoader.value = false")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectionViewModel", "fetchUserDetails -&gt; response.status: ${response.status}, message: ${response.message}")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.d("VillageSelectorViewModel", "downloadAuthorizedImageItem -&gt; onDownloadFailed")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$NudgeLogger.e("SyncHelper","callWorkFlowAPI response: status: ${addWorkFlowResponse.status}, message: ${addWorkFlowResponse.message}, data: ${addWorkFlowResponse.data} \n\n")</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_PAT_COMPLETION_DATE_ +village.id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_SOCIAL_MAPPING_COMPLETION_DATE_ +village.id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_SOCIAL_MAPPING_COMPLETION_DATE_+prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_TRANSECT_WALK_COMPLETION_DATE_ +village.id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_TRANSECT_WALK_COMPLETION_DATE_+prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_VO_ENDORSEMENT_COMPLETION_DATE_ +village.id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_VO_ENDORSEMENT_COMPLETION_DATE_+prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_WEALTH_RANKING_COMPLETION_DATE_ +village.id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$PREF_WEALTH_RANKING_COMPLETION_DATE_+prefRepo.getSelectedVillage().id</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$QUESTION_FLAG_WEIGHT</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$UserAndVillageDetailsModel(true, getEmitLanguageList(defaultLanguageVillageList, localVillageList, prefRepo.getAppLanguageId() ?: 2), stateId)</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$ableBodiedFlag = AbleBodiedFlag.fromSting(intToString(didi.ableBodiedFlag) ?: AbleBodiedFlag.NOT_MARKED.name).value</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$answerValue</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$didi.beneficiaryProcessStatus</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$didiDao.updateDidiDetailAfterSync(id = didi.id, serverId = didi.serverId, needsToPost = false, transactionId = "", createdDate = didi.createdDate?:0, modifiedDate = didi.modifiedDate?:0)</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$didiDao.updateDidiDetailAfterSync(id = didiEntity.id, serverId = didiEntity.serverId, needsToPost = false, transactionId = "", createdDate = didiEntity.createdDate?:0, modifiedDate = didiEntity.modifiedDate?:0)</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$didiRequestList</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$downloadAuthorizedImageItem(didi.id,didi.crpUploadedImage?: BLANK_STRING, prefRepo = prefRepo )</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$fun</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$if</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$if (prefRepo.isUserBPC()) ApiType.PAT_BPC_QUESTION_API else ApiType.PAT_CRP_QUESTION_API</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$optionValue</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$private</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$private suspend</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$result</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$return if (didiList.isNotEmpty() &amp;&amp; matchedCount != 0) ((matchedCount.toFloat()/didiList.size.toFloat()) * 100).toInt() else 0</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$saveUserDetailsInPref(UserDetailsModel(it.username ?: "", it.name ?: "", it.email ?: "", it.identityNumber ?: "", it.profileImage ?: "", it.roleName ?: "", it.typeName ?: ""))</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$tempStepList</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$tempStepList.remove(it.stepList.sortedBy { it.orderNumber }[it.stepList.map { it.id }.indexOf(localStep.id)])</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$tempStepList.remove(localStepListForVillage.sortedBy { it.orderNumber }[localStepListForVillage.map { it.id }.indexOf(remoteStep.id)])</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$updatedStepList.add(step.getUpdatedStep(it.stepList[it.stepList.map { it.id }.indexOf(step.id)]))</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$val existingSummaryDataForVillage = bpcSummaryDao.getBpcSummaryForVillage(villageId = village.id)</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$val localDidiListForTola = didiDao.getDidisForTola(if (tola.serverId == 0) tola.id else tola.serverId)</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$val stateId = if (it.villageList?.isNotEmpty() == true) it.villageList?.get(0)?.stateId?:1 else -1</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$val userType=if((prefRepo.getPref(PREF_KEY_TYPE_NAME, "") ?: "").equals(BPC_USER_TYPE, true)) USER_BPC else USER_CRP</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$weight</ID>
    <ID>MaxLineLength:VillageSelectionRepository.kt$VillageSelectionRepository$||</ID>
    <ID>MaxLineLength:VillageSelectionScreen.kt$0,2 -&gt; showCustomToast(context, context.getString(R.string.village_is_not_vo_endorsed_right_now))</ID>
    <ID>MaxLineLength:VillageSelectionScreen.kt$Log.d("TAG", "VillageAndVoBoxForBottomSheet IconCaes: ${fetchBorderColorForVillage(stepId,statusId)}")</ID>
    <ID>MaxLineLength:VillageSelectionScreen.kt$if (statusId == StepStatus.COMPLETED.ordinal) R.string.bpc_verification_completed_village_banner_text else R.string.vo_endorsement_completed_village_banner_text</ID>
    <ID>MaxLineLength:VillageSelectionScreen.kt$if (viewModel.prefRepo.isUserBPC()) viewModel.refreshBpcData(context) else viewModel.refreshCrpData(context)</ID>
    <ID>MaxLineLength:VillageSelectionScreen.kt$isVoEndorsementComplete</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$" StepType.WEALTH_RANKING.name, ResultType.POOR.name"</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$"bpcSummaryDao.insert(BpcSummaryEntity(0, 0, 0, 0, 0, 0, villageId = village.id))"</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$"bpcSummaryResponse status = ${bpcSummaryResponse.status}, message = ${bpcSummaryResponse.message}, data = ${bpcSummaryResponse.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$"cohortResponse status = ${cohortResponse.status}, message = ${cohortResponse.message}, data = ${cohortResponse.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$"didiResponse status = ${didiResponse.status}, message = ${didiResponse.message}, data = ${didiResponse.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$"poorDidiList status = ${poorDidiList.status}, message = ${poorDidiList.message}, data = ${poorDidiList.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$"response status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}"</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$)</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$.</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$// NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc finally -&gt; viewModel.showLoader.value = false")</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$// PREF_WEALTH_RANKING_COMPLETION_DATE, steps.localModifiedDate?: BLANK_STRING)</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$?.</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$NudgeLogger</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList request -&gt; village.id = ${village.id}")</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$NudgeLogger.d("VillageSelectionScreen", "fetchUserDetails catch (ex: Exception) -&gt; viewModel.showLoader.value = false")</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$NudgeLogger.d("VillageSelectionScreen", "fetchUserDetails else 1 -&gt; viewModel.showLoader.value = false")</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$NudgeLogger.d("VillageSelectionScreen", "fetchUserDetails response.status.equals(FAIL, true) -&gt; viewModel.showLoader.value = false")</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$NudgeLogger.d("VillageSelectionViewModel", "fetchUserDetails -&gt; response.status: ${response.status}, message: ${response.message}")</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$PREF_PAT_COMPLETION_DATE_+village.id</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$PREF_SOCIAL_MAPPING_COMPLETION_DATE_+village.id</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$PREF_TRANSECT_WALK_COMPLETION_DATE_+village.id</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$PREF_VO_ENDORSEMENT_COMPLETION_DATE_+village.id</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$PREF_WEALTH_RANKING_COMPLETION_DATE_+village.id</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$QUESTION_FLAG_WEIGHT</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$ableBodiedFlag = AbleBodiedFlag.fromSting(didi.ableBodiedFlag ?: AbleBodiedFlag.NOT_MARKED.name).value</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$ableBodiedFlag = AbleBodiedFlag.fromSting(intToString(didi.ableBodiedFlag) ?: AbleBodiedFlag.NOT_MARKED.name).value</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$answerValue</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$casteListDao.getCaste(didi.castId, prefRepo?.getAppLanguageId()?:2)</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$didi.beneficiaryProcessStatus</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$downloadAuthorizedImageItem(didi.id,didi.crpUploadedImage?: BLANK_STRING, prefRepo = prefRepo )</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$if</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$if (prefRepo.isUserBPC()) ApiType.PAT_BPC_QUESTION_API else ApiType.PAT_CRP_QUESTION_API</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$isVoEndorsementComplete.value[village.id] = (stepList.sortedBy { it.orderNumber }[4].isComplete == StepStatus.COMPLETED.ordinal)</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$optionValue</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$optionValue = optionItem?.optionValue ?: 0</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$return File("${context.getExternalFilesDir(if (fileType == FileType.VIDEO) Environment.DIRECTORY_MOVIES else if (fileType == FileType.IMAGE) Environment.DIRECTORY_DCIM else Environment.DIRECTORY_DOCUMENTS)?.absolutePath}/${videoItemId}.mp4")</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$shgFlag = SHGFlag.fromSting(didi.shgFlag ?: SHGFlag.NOT_MARKED.name).value</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$shgFlag = SHGFlag.fromSting(intToString(didi.shgFlag)?: SHGFlag.NOT_MARKED.name).value</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$totalAssetAmount</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$val</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$val ex = ApiResponseFailException(poorDidiList.message ?: "Poor Didi Ranking list error")</ID>
    <ID>MaxLineLength:VillageSelectionViewModel.kt$VillageSelectionViewModel$weight</ID>
    <ID>MaxLineLength:VoEndorsementScreen.kt$color = if (didi.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal) acceptEndorsementTextColor else rejectEndorsementTextColor</ID>
    <ID>MaxLineLength:VoEndorsementScreen.kt$didiList</ID>
    <ID>MaxLineLength:VoEndorsementScreen.kt$if</ID>
    <ID>MaxLineLength:VoEndorsementScreen.kt$navController.navigate("vo_endorsement_summary_screen/${didi.id}/${didi.voEndorsementStatus}")</ID>
    <ID>MaxLineLength:VoEndorsementScreen.kt$newFilteredDidiList.value.filter { it.voEndorsementStatus == DidiEndorsementStatus.NOT_STARTED.ordinal }.size</ID>
    <ID>MaxLineLength:VoEndorsementScreen.kt$text = stringResource(id = if (didi.voEndorsementStatus == DidiEndorsementStatus.ENDORSED.ordinal) R.string.endorsed else R.string.rejected)</ID>
    <ID>MaxLineLength:VoEndorsementScreen.kt$viewModel.repository.prefRepo.savePref(PREF_KEY_VO_SUMMARY_OPEN_FROM,PageFrom.VO_ENDORSEMENT_LIST_PAGE.ordinal)</ID>
    <ID>MaxLineLength:VoEndorsementSummaryScreen.kt$&amp;&amp;</ID>
    <ID>MaxLineLength:VoEndorsementSummaryScreen.kt$AnimatedVisibility</ID>
    <ID>MaxLineLength:VoEndorsementSummaryScreen.kt$NudgeLogger.e("VoEndorsementSummaryScreen", "LaunchedEffect(key1 = Unit, key2 = !voDidiList.isNullOrEmpty()) -&gt; exception", ex)</ID>
    <ID>MaxLineLength:VoEndorsementSummaryScreen.kt$if</ID>
    <ID>MaxLineLength:VoEndorsementSummaryScreen.kt$viewModel.updateVoEndorsementStatus(voDidiList[pagerState.currentPage].id, DidiEndorsementStatus.ENDORSED.ordinal)</ID>
    <ID>MaxLineLength:VoEndorsementSummaryScreen.kt$viewModel.updateVoEndorsementStatus(voDidiList[pagerState.currentPage].id, DidiEndorsementStatus.REJECTED.ordinal)</ID>
    <ID>MaxLineLength:VoEndorsementSummaryViewModel.kt$VoEndorsementSummaryViewModel$"updateVoEndorsementStatus -&gt; didiDao.updateNeedToPostVO before: didiId = $didiId, villageId: $villageId, needsToPostVo = true"</ID>
    <ID>MaxLineLength:VoEndorsementSummaryViewModel.kt$VoEndorsementSummaryViewModel$"updateVoEndorsementStatus -&gt; didiDao.updateVOEndorsementStatus before: villageId = $villageId, didiId = $didiId"</ID>
    <ID>MaxLineLength:VoEndorsementSummaryViewModel.kt$VoEndorsementSummaryViewModel$NudgeLogger.e("VoEndorsementSummaryViewModel", "onServerError -&gt; errorMessage: ${errorModel?.message}, api: ${errorModel?.apiName}")</ID>
    <ID>MaxLineLength:WealthRankingScreen.kt$if</ID>
    <ID>MaxLineLength:WealthRankingScreen.kt$text</ID>
    <ID>MaxLineLength:WealthRankingScreen.kt$val count = newFilteredDidiList.value.filter { it.wealth_ranking == WealthRank.NOT_RANKED.rank }.size</ID>
    <ID>MaxLineLength:WealthRankingScreen.kt$viewModel.onCardArrowClicked(didis[nextIndex].id,coroutineScope, listState,nextIndex)</ID>
    <ID>MaxLineLength:WealthRankingSurveyRepository.kt$WealthRankingSurveyRepository$NudgeLogger.d("WealthRankingSurveyRepository","getPendingStatus Request=&gt; ${Gson().toJson(transactionIdRequest)}")</ID>
    <ID>MaxLineLength:WealthRankingSurveyRepository.kt$WealthRankingSurveyRepository$NudgeLogger.d("WealthRankingSurveyRepository","updateDidiRanking Request=&gt; ${Gson().toJson(didiWealthRankingRequest)}")</ID>
    <ID>MaxLineLength:WealthRankingSurveyRepository.kt$WealthRankingSurveyRepository$suspend</ID>
    <ID>MaxLineLength:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$"callWorkFlowAPI -&gt; inProgressStepResponse: status = ${inProgressStepResponse.status}, "</ID>
    <ID>MaxLineLength:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$"callWorkFlowAPI -&gt; response: status = ${response.status}, message = ${response.message}, data = ${response.data.toString()} \n"</ID>
    <ID>MaxLineLength:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$"callWorkFlowAPI -&gt; stepsListDao.updateWorkflowId before stepId: ${step.id}, workflowId: ${step.workFlowId}, status: ${it[0].status}"</ID>
    <ID>MaxLineLength:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$"message = ${inProgressStepResponse.message}, data = ${inProgressStepResponse.data.toString()} \n"</ID>
    <ID>MaxLineLength:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$"updateWealthRankingToNetwork -&gt; response: status = ${updateWealthRankResponse.status}, message = ${updateWealthRankResponse.message}, data = ${updateWealthRankResponse.data.toString()}"</ID>
    <ID>MaxLineLength:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$NudgeLogger.d("WealthRankingSurveyViewModel", "callWorkFlowAPI -&gt; stepsListDao.updateNeedToPost after")</ID>
    <ID>MaxLineLength:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$callBack(stepList.sortedBy { it.orderNumber }[currentStepIndex - 1].isComplete == StepStatus.COMPLETED.ordinal)</ID>
    <ID>MaxLineLength:WealthRankingViewModel.kt$WealthRankingViewModel$NudgeLogger.d("WealthRankingViewModel","updateDidiRankInDb -&gt; didiEntity: $didiEntity, rank: $rank, didiEntity.serverId: ${didiEntity.serverId}")</ID>
    <ID>MaxLineLength:WealthRankingViewModel.kt$WealthRankingViewModel$fun</ID>
    <ID>MayBeConst:AppConstants.kt$val GENERIC_ERROR_MSG = "Oops! An error has occurred on our server. Please check internet connection and try to playback again!"</ID>
    <ID>MayBeConst:AppConstants.kt$val UNAUTHORISED_MESSAGE = "401 Unauthorized"</ID>
    <ID>MayBeConst:AppConstants.kt$val UNREACHABLE_ERROR_MSG = "There seems to be a problem accessing details on this screen. Please try again."</ID>
    <ID>MayBeConst:PdfUtils.kt$PdfUtils$private val marginBottom: UInt = 40u</ID>
    <ID>MayBeConst:PdfUtils.kt$PdfUtils$private val margins: UInt = 20u</ID>
    <ID>ModifierMissing:AddTola.kt$ShowDialogForTolaLocation</ID>
    <ID>ModifierMissing:BugLogggingMechanismScreen.kt$BugLogggingMechanismScreen</ID>
    <ID>ModifierMissing:BugLogggingMechanismScreen.kt$DropDownView</ID>
    <ID>ModifierMissing:ComposableUtils.kt$showCustomDialog</ID>
    <ID>ModifierMissing:ComposableUtils.kt$showDidiImageDialog</ID>
    <ID>ModifierMissing:DigitalFormAScreen.kt$DidiVillageItem</ID>
    <ID>ModifierMissing:FormPictureScreen.kt$formLinkView</ID>
    <ID>ModifierMissing:HomeNavScreen.kt$AddItem</ID>
    <ID>ModifierMissing:HomeNavScreen.kt$BottomBar</ID>
    <ID>ModifierMissing:HomeNavScreen.kt$HomeNavScreen</ID>
    <ID>ModifierMissing:HomeVillageScreen.kt$HomeVillageScreen</ID>
    <ID>ModifierMissing:LanguageSelectorScreen.kt$LanguageItem</ID>
    <ID>ModifierMissing:NavHomeGraph.kt$NavHomeGraph</ID>
    <ID>ModifierMissing:OtpInputField.kt$OtpInputField</ID>
    <ID>ModifierMissing:OtpInputField.kt$OtpInputFieldForDialog</ID>
    <ID>ModifierMissing:ParticipatoryWealthRankingSurvey.kt$ShowDialog</ID>
    <ID>ModifierMissing:SettingScreen.kt$SettingCard</ID>
    <ID>ModifierMissing:SettingScreen.kt$showBPCSyncDialog</ID>
    <ID>ModifierMissing:SettingScreen.kt$showSyncDialog</ID>
    <ID>ModifierMissing:SocialMappingActivity.kt$PendingTolaCard</ID>
    <ID>ModifierMissing:SocialMappingActivity.kt$SocialMappingScreen</ID>
    <ID>ModifierMissing:Utils.kt$ShowLoadingDialog</ID>
    <ID>ModifierMissing:VideoDetailPlayerScreen.kt$FullscreenView</ID>
    <ID>ModifierMissing:VoEndorsementSummaryScreen.kt$ShowAcceptRejectDialog</ID>
    <ID>ModifierMissing:VoEndorsementSummaryScreen.kt$VoEndorsementSummaryScreen</ID>
    <ID>ModifierMissing:WealthRankingScreen.kt$CardArrow</ID>
    <ID>ModifierMissing:WealthRankingScreen.kt$CardTitle</ID>
    <ID>ModifierMissing:WealthRankingScreen.kt$ExpandableCard</ID>
    <ID>ModifierMissing:WealthRankingScreen.kt$ExpandableContent</ID>
    <ID>ModifierReused:QuestionScreen.kt$Column( modifier = modifier.padding(horizontal = 16.dp), verticalArrangement = Arrangement.SpaceBetween ) { Row(modifier=Modifier.wrapContentWidth(Alignment.Start)) { if(viewModel.sectionType.value.equals(TYPE_INCLUSION,true)) { ButtonArrowNegative(buttonTitle = stringResource(id = R.string.go_back_to_section_1_summary)) { navigateToSummeryOnePage(navController,didiId,viewModel) } } } VOAndVillageBoxView( prefRepo = viewModel.repository.prefRepo, modifier = Modifier .fillMaxWidth(), startPadding = 0.dp ) Column( modifier = Modifier .fillMaxSize() .weight(1f) .padding(horizontal = 5.dp) ) { SurveyHeader( modifier = Modifier, didiName = viewModel.didiName.value, questionCount = viewModel.maxQuesCount.value, currentQuestion = pagerState.currentPage + 1, answeredCount = answerList.size, partNumber = if (sectionType.equals(TYPE_EXCLUSION, true)) 1 else 2, viewModel = viewModel ) answeredQuestion.value = answerList.size viewModel.findListTypeSelectedAnswer(pagerState.currentPage, didiId) eventToPageChange.value = false HorizontalPager( pageCount = questionList.size, state = pagerState, userScrollEnabled = false ) { Log.d("TAG", "QuestionScreen: State1 $it") Column(modifier = Modifier.fillMaxWidth()) { Spacer(modifier = Modifier.height(10.dp)) if (questionList[it].questionImageUrl?.isNotEmpty() == true) { val quesImage: File? = questionList[it].questionImageUrl?.let { it1 -&gt; getImagePath( context, it1 ) } if (quesImage?.extension.equals(EXTENSION_WEBP, true)) { if (quesImage?.exists() == true) { GlideImage( model = quesImage, contentDescription = "Question Image", modifier = Modifier .fillMaxWidth() .width(/*dimensionResource(id = R.dimen.ques_image_width)*/ 60.dp ) .height(/*dimensionResource(id = R.dimen.ques_image_width)*/ 60.dp ), ) } } else { if (quesImage?.exists() == true) { GlideImage( model = quesImage, contentDescription = "Question Image", modifier = Modifier .fillMaxWidth() .width(/*dimensionResource(id = R.dimen.ques_image_width)*/ 60.dp ) .height(/*dimensionResource(id = R.dimen.ques_image_width)*/ 60.dp ), ) } } } Spacer(modifier = Modifier.height(10.dp)) if (questionList[it].type == QuestionType.RadioButton.name) { val sortedOptionList = questionList[it].options?.sortedBy { it?.optionValue } var selectedOption = -1 answerList.forEach { answer -&gt; if (questionList[it].questionId == answer.questionId) { selectedOption = answer.optionValue ?: -1 } } RadioButtonTypeQuestion( modifier = modifier, questionNumber = (it + 1), question = questionList[it].questionDisplay ?: "", selectedOptionIndex = selectedOption, optionList = sortedOptionList, isLastIndex = (it == questionList.size - 1), isAnswerSelected = viewModel.isAnswerSelected.value ) { selectedIndex, nextButtonClick -&gt; viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.isAnswerSelected.value = true viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = sortedOptionList?.get(selectedIndex)!!, assetAmount = 0.0, quesType = QuestionType.RadioButton.name, summary = questionList[it].questionSummary ?: BLANK_STRING, selIndex = selectedIndex, enteredAssetAmount = "0", questionFlag = BLANK_STRING ) { if (viewModel.repository.prefRepo.questionScreenOpenFrom() != PageFrom.DIDI_LIST_PAGE.ordinal) { if (!nextButtonClick) viewModel.updateDidiQuesSection( didiId, PatSurveyStatus.INPROGRESS.ordinal ) } coroutineScope.launch { delay(250) if (answeredQuestion.value &lt; (questionList.size)) { selQuesIndex.value = selQuesIndex.value + 1 answeredQuestion.value = answeredQuestion.value + 1 val nextPageIndex = pagerState.currentPage + 1 coroutineScope.launch { delay(150) eventToPageChange.value = true } pagerState.animateScrollToPage( nextPageIndex ) viewModel.isAnswerSelected.value = false } else { navigateToSummeryPage( navController, didiId, viewModel ) } } } } } else if (questionList[it].type == QuestionType.List.name) { val sortedOptionList = questionList[it].options.sortedBy {it.optionValue} ListTypeQuestion( modifier = modifier, questionNumber = (it + 1), index = viewModel.selIndValue.collectAsState().value, question = questionList[it].questionDisplay ?: "", selectedIndex = viewModel.selIndValue.collectAsState().value, optionList = sortedOptionList, isAnswerSelected = viewModel.isAnswerSelected.value ) { selectedOptionId,selectedIndex -&gt; viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.repository.prefRepo.saveNeedQuestionToScroll(true) viewModel.isAnswerSelected.value = true if (viewModel.repository.prefRepo.questionScreenOpenFrom() != PageFrom.DIDI_LIST_PAGE.ordinal) viewModel.updateDidiQuesSection( didiId, PatSurveyStatus.INPROGRESS.ordinal ) viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = sortedOptionList[selectedIndex] /*questionList[it].options[questionList[it].options.map {it.optionId }.indexOf(selectedOptionId)]*/, assetAmount = 0.0, quesType = QuestionType.List.name, summary = questionList[it].questionSummary ?: BLANK_STRING, selIndex = viewModel.listTypeAnswerIndex.value, enteredAssetAmount = "0", questionFlag = BLANK_STRING ) { coroutineScope.launch { delay(250) if (answeredQuestion.value &lt; (questionList.size)) { selQuesIndex.value = selQuesIndex.value + 1 answeredQuestion.value = answeredQuestion.value + 1 val nextPageIndex = pagerState.currentPage + 1 viewModel.findListTypeSelectedAnswer( pagerState.currentPage, didiId ) coroutineScope.launch { delay(150) eventToPageChange.value = true } pagerState.animateScrollToPage( nextPageIndex ) viewModel.isAnswerSelected.value = false } else { navigateToSummeryPage( navController, didiId, viewModel ) } } } } } else if (questionList[it].type == QuestionType.Numeric_Field.name) { NumericFieldTypeQuestion( modifier = modifier, questionNumber = (it + 1), question = questionList[it].questionDisplay ?: "", didiId = didiId, questionId = questionList[it].questionId ?: 0, optionList = questionList[it].options, viewModel = viewModel, showNextButton = (viewModel.prevButtonVisible.value &amp;&amp; !viewModel.nextButtonVisible.value), questionFlag = questionList[it].questionFlag ?: QUESTION_FLAG_WEIGHT, totalValueTitle = questionList[it].headingProductAssetValue ?: BLANK_STRING, pagerState = pagerState ) { value -&gt; val newAnswerOptionModel = OptionsItem( display = (if (questionList[it].questionFlag?.equals( QUESTION_FLAG_RATIO, true ) == true ) viewModel.totalAmount.value.toString() else (viewModel.totalAmount.value + stringToDouble(viewModel.enteredAmount.value)).toString()), 0, 0, 0, BLANK_STRING ) viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = newAnswerOptionModel, assetAmount = if (questionList[it].questionFlag.equals( QUESTION_FLAG_RATIO, true ) ) viewModel.totalAmount.value else (viewModel.totalAmount.value + stringToDouble( viewModel.enteredAmount.value )), quesType = QuestionType.Numeric_Field.name, summary = questionList[it].questionSummary ?: BLANK_STRING/*(questionList[it].questionSummary?: BLANK_STRING) + " " + if (questionList[it].questionFlag?.equals(QUESTION_FLAG_RATIO, true) == true) context.getString(R.string.total_productive_asset_value_for_ratio,viewModel.totalAmount.value.toString()) else context.getString(R.string.total_productive_asset_value,(viewModel.totalAmount.value + stringToDouble(viewModel.enteredAmount.value)).toString())*/, selIndex = -1, enteredAssetAmount = if (viewModel.enteredAmount.value.isNullOrEmpty()) BLANK_STRING else viewModel.enteredAmount.value, questionFlag = questionList[it].questionFlag ?: QUESTION_FLAG_WEIGHT ) { if (value == 1) { viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.repository.prefRepo.saveNeedQuestionToScroll(true) coroutineScope.launch { delay(250) if (answeredQuestion.value &lt; (questionList.size)) { selQuesIndex.value = selQuesIndex.value + 1 answeredQuestion.value = answeredQuestion.value + 1 val nextPageIndex = pagerState.currentPage + 1 viewModel.findListTypeSelectedAnswer( pagerState.currentPage, didiId ) pagerState.animateScrollToPage( nextPageIndex ) viewModel.isQuestionChange.value = true eventToPageChange.value = true } else { navigateToSummeryPage( navController, didiId, viewModel ) } } } } } } } } } }</ID>
    <ID>ModifierReused:QuestionScreen.kt$ListTypeQuestion( modifier = modifier, questionNumber = (it + 1), index = viewModel.selIndValue.collectAsState().value, question = questionList[it].questionDisplay ?: "", selectedIndex = viewModel.selIndValue.collectAsState().value, optionList = sortedOptionList, isAnswerSelected = viewModel.isAnswerSelected.value ) { selectedOptionId,selectedIndex -&gt; viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.repository.prefRepo.saveNeedQuestionToScroll(true) viewModel.isAnswerSelected.value = true if (viewModel.repository.prefRepo.questionScreenOpenFrom() != PageFrom.DIDI_LIST_PAGE.ordinal) viewModel.updateDidiQuesSection( didiId, PatSurveyStatus.INPROGRESS.ordinal ) viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = sortedOptionList[selectedIndex] /*questionList[it].options[questionList[it].options.map {it.optionId }.indexOf(selectedOptionId)]*/, assetAmount = 0.0, quesType = QuestionType.List.name, summary = questionList[it].questionSummary ?: BLANK_STRING, selIndex = viewModel.listTypeAnswerIndex.value, enteredAssetAmount = "0", questionFlag = BLANK_STRING ) { coroutineScope.launch { delay(250) if (answeredQuestion.value &lt; (questionList.size)) { selQuesIndex.value = selQuesIndex.value + 1 answeredQuestion.value = answeredQuestion.value + 1 val nextPageIndex = pagerState.currentPage + 1 viewModel.findListTypeSelectedAnswer( pagerState.currentPage, didiId ) coroutineScope.launch { delay(150) eventToPageChange.value = true } pagerState.animateScrollToPage( nextPageIndex ) viewModel.isAnswerSelected.value = false } else { navigateToSummeryPage( navController, didiId, viewModel ) } } } }</ID>
    <ID>ModifierReused:QuestionScreen.kt$NumericFieldTypeQuestion( modifier = modifier, questionNumber = (it + 1), question = questionList[it].questionDisplay ?: "", didiId = didiId, questionId = questionList[it].questionId ?: 0, optionList = questionList[it].options, viewModel = viewModel, showNextButton = (viewModel.prevButtonVisible.value &amp;&amp; !viewModel.nextButtonVisible.value), questionFlag = questionList[it].questionFlag ?: QUESTION_FLAG_WEIGHT, totalValueTitle = questionList[it].headingProductAssetValue ?: BLANK_STRING, pagerState = pagerState ) { value -&gt; val newAnswerOptionModel = OptionsItem( display = (if (questionList[it].questionFlag?.equals( QUESTION_FLAG_RATIO, true ) == true ) viewModel.totalAmount.value.toString() else (viewModel.totalAmount.value + stringToDouble(viewModel.enteredAmount.value)).toString()), 0, 0, 0, BLANK_STRING ) viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = newAnswerOptionModel, assetAmount = if (questionList[it].questionFlag.equals( QUESTION_FLAG_RATIO, true ) ) viewModel.totalAmount.value else (viewModel.totalAmount.value + stringToDouble( viewModel.enteredAmount.value )), quesType = QuestionType.Numeric_Field.name, summary = questionList[it].questionSummary ?: BLANK_STRING/*(questionList[it].questionSummary?: BLANK_STRING) + " " + if (questionList[it].questionFlag?.equals(QUESTION_FLAG_RATIO, true) == true) context.getString(R.string.total_productive_asset_value_for_ratio,viewModel.totalAmount.value.toString()) else context.getString(R.string.total_productive_asset_value,(viewModel.totalAmount.value + stringToDouble(viewModel.enteredAmount.value)).toString())*/, selIndex = -1, enteredAssetAmount = if (viewModel.enteredAmount.value.isNullOrEmpty()) BLANK_STRING else viewModel.enteredAmount.value, questionFlag = questionList[it].questionFlag ?: QUESTION_FLAG_WEIGHT ) { if (value == 1) { viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.repository.prefRepo.saveNeedQuestionToScroll(true) coroutineScope.launch { delay(250) if (answeredQuestion.value &lt; (questionList.size)) { selQuesIndex.value = selQuesIndex.value + 1 answeredQuestion.value = answeredQuestion.value + 1 val nextPageIndex = pagerState.currentPage + 1 viewModel.findListTypeSelectedAnswer( pagerState.currentPage, didiId ) pagerState.animateScrollToPage( nextPageIndex ) viewModel.isQuestionChange.value = true eventToPageChange.value = true } else { navigateToSummeryPage( navController, didiId, viewModel ) } } } } }</ID>
    <ID>ModifierReused:QuestionScreen.kt$RadioButtonTypeQuestion( modifier = modifier, questionNumber = (it + 1), question = questionList[it].questionDisplay ?: "", selectedOptionIndex = selectedOption, optionList = sortedOptionList, isLastIndex = (it == questionList.size - 1), isAnswerSelected = viewModel.isAnswerSelected.value ) { selectedIndex, nextButtonClick -&gt; viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.isAnswerSelected.value = true viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = sortedOptionList?.get(selectedIndex)!!, assetAmount = 0.0, quesType = QuestionType.RadioButton.name, summary = questionList[it].questionSummary ?: BLANK_STRING, selIndex = selectedIndex, enteredAssetAmount = "0", questionFlag = BLANK_STRING ) { if (viewModel.repository.prefRepo.questionScreenOpenFrom() != PageFrom.DIDI_LIST_PAGE.ordinal) { if (!nextButtonClick) viewModel.updateDidiQuesSection( didiId, PatSurveyStatus.INPROGRESS.ordinal ) } coroutineScope.launch { delay(250) if (answeredQuestion.value &lt; (questionList.size)) { selQuesIndex.value = selQuesIndex.value + 1 answeredQuestion.value = answeredQuestion.value + 1 val nextPageIndex = pagerState.currentPage + 1 coroutineScope.launch { delay(150) eventToPageChange.value = true } pagerState.animateScrollToPage( nextPageIndex ) viewModel.isAnswerSelected.value = false } else { navigateToSummeryPage( navController, didiId, viewModel ) } } } }</ID>
    <ID>ModifierReused:RadioButtonTypeQuestion.kt$Column(modifier = modifier. constrainAs(questionBox){ top.linkTo(parent.top) start.linkTo(parent.start) end.linkTo(parent.end) }) { HtmlText( modifier = Modifier .border( BorderStroke(1.dp, lightGray2), shape = RoundedCornerShape(6.dp) ) .padding(14.dp) .fillMaxWidth(), text = buildAnnotatedString { withStyle( style = SpanStyle( color = textColorDark, fontSize = 14.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ) ) { append("$questionNumber.") } append(" $question") }.toString(), style = TextStyle( fontFamily = NotoSans, fontWeight = FontWeight.SemiBold, fontSize = 14.sp, color = textColorDark ), //color = textColorDark ) Row( horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier .fillMaxWidth() .padding(top = 20.dp) ) { LazyVerticalGrid( modifier = Modifier.fillMaxWidth(), columns = GridCells.Fixed(2), state = rememberLazyGridState() ) { itemsIndexed(optionList ?: emptyList()) { index, option -&gt; RadioButtonOptionCard( buttonTitle = option?.display ?: BLANK_STRING, index = index, optionValue = option?.optionValue ?: 0, selectedIndex = selectedIndex ) { if(!isAnswerSelected) { selectedIndex = it onAnswerSelection(index,false) } } } } } }</ID>
    <ID>ModifierReused:RadioButtonTypeQuestion.kt$ConstraintLayout( modifier = modifier .fillMaxSize() .align(Alignment.TopCenter) ) { val (questionBox, submitBox) = createRefs() Column(modifier = modifier. constrainAs(questionBox){ top.linkTo(parent.top) start.linkTo(parent.start) end.linkTo(parent.end) }) { HtmlText( modifier = Modifier .border( BorderStroke(1.dp, lightGray2), shape = RoundedCornerShape(6.dp) ) .padding(14.dp) .fillMaxWidth(), text = buildAnnotatedString { withStyle( style = SpanStyle( color = textColorDark, fontSize = 14.sp, fontWeight = FontWeight.Normal, fontFamily = NotoSans ) ) { append("$questionNumber.") } append(" $question") }.toString(), style = TextStyle( fontFamily = NotoSans, fontWeight = FontWeight.SemiBold, fontSize = 14.sp, color = textColorDark ), //color = textColorDark ) Row( horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier .fillMaxWidth() .padding(top = 20.dp) ) { LazyVerticalGrid( modifier = Modifier.fillMaxWidth(), columns = GridCells.Fixed(2), state = rememberLazyGridState() ) { itemsIndexed(optionList ?: emptyList()) { index, option -&gt; RadioButtonOptionCard( buttonTitle = option?.display ?: BLANK_STRING, index = index, optionValue = option?.optionValue ?: 0, selectedIndex = selectedIndex ) { if(!isAnswerSelected) { selectedIndex = it onAnswerSelection(index,false) } } } } } } Row( modifier = Modifier .fillMaxWidth() .visible(selectedOptionIndex != -1 &amp;&amp; isLastIndex) .padding(horizontal = 5.dp) .padding(top = 20.dp) .padding(bottom = 8.dp) .constrainAs(submitBox) { start.linkTo(parent.start) bottom.linkTo(parent.bottom) } ) { ButtonPositive( buttonTitle = stringResource(id = R.string.next), isArrowRequired = false, isActive = true, modifier = Modifier.height(45.dp) ) { if(!isAnswerSelected) onAnswerSelection(selectedIndex,true) } } }</ID>
    <ID>ModifierReused:SingleQuestionScreen.kt$Column( modifier = modifier.padding(horizontal = 16.dp), verticalArrangement = Arrangement.SpaceBetween ) { Row(modifier=Modifier.wrapContentWidth(Alignment.Start)) { if(viewModel.sectionType.value.equals(TYPE_INCLUSION,true)) { ButtonArrowNegative(buttonTitle = stringResource(id = R.string.go_back_to_section_1_summary)) { navigateToSummeryOnePage(navController,didiId,viewModel) } } } VOAndVillageBoxView( prefRepo = viewModel.repository.prefRepo, modifier = Modifier .fillMaxWidth(), startPadding = 0.dp ) Column( modifier = Modifier .fillMaxSize() .weight(1f) .padding(horizontal = 5.dp) ) { SurveyHeader( modifier = Modifier, didiName = viewModel.didiName.value, questionCount = viewModel.maxQuesCount.value, currentQuestion = viewModel.answerList.value.size, answeredCount = answerList.size, partNumber = if (sectionType.equals(TYPE_EXCLUSION, true)) 1 else 2, viewModel = viewModel ) answeredQuestion.value = answerList.size viewModel.findListTypeSelectedAnswer(questionIndex, didiId) eventToPageChange.value = false if(!questionList.isNullOrEmpty()) { questionIndex?.let { Column(modifier = Modifier.fillMaxWidth()) { Spacer(modifier = Modifier.height(10.dp)) if (questionList[it].questionImageUrl?.isNotEmpty() == true) { val quesImage: File? = questionList[it].questionImageUrl?.let { it1 -&gt; getImagePath( context, it1 ) } if (quesImage?.extension.equals(EXTENSION_WEBP, true)) { if (quesImage?.exists() == true) { GlideImage( model = quesImage, contentDescription = "Question Image", modifier = Modifier .fillMaxWidth() .width(/*dimensionResource(id = R.dimen.ques_image_width)*/ 60.dp ) .height(/*dimensionResource(id = R.dimen.ques_image_width)*/ 60.dp ), ) } } else { if (quesImage?.exists() == true) { GlideImage( model = quesImage, contentDescription = "Question Image", modifier = Modifier .fillMaxWidth() .width(/*dimensionResource(id = R.dimen.ques_image_width)*/ 60.dp ) .height(/*dimensionResource(id = R.dimen.ques_image_width)*/ 60.dp ), ) } } } Spacer(modifier = Modifier.height(10.dp)) if (questionList[it].type == QuestionType.RadioButton.name) { val sortedOptionList = questionList[it].options?.sortedBy { it?.optionValue } var selectedOption = -1 answerList.forEach { answer -&gt; if (questionList[it].questionId == answer.questionId) { selectedOption = answer.optionValue ?: -1 } } RadioButtonTypeQuestion( modifier = modifier, questionNumber = (it + 1), question = questionList[it].questionDisplay ?: "", selectedOptionIndex = selectedOption, optionList = sortedOptionList, isLastIndex = (it == questionList.size - 1), isAnswerSelected = viewModel.isAnswerSelected.value ) { selectedIndex, nextButtonClick -&gt; viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.isAnswerSelected.value = true viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = sortedOptionList?.get(selectedIndex)!!, assetAmount = 0.0, quesType = QuestionType.RadioButton.name, summary = questionList[it].questionSummary ?: BLANK_STRING, selIndex = selectedIndex, enteredAssetAmount = "0", questionFlag = BLANK_STRING ) { if (viewModel.repository.prefRepo.questionScreenOpenFrom() != PageFrom.DIDI_LIST_PAGE.ordinal) { if (!nextButtonClick) viewModel.updateDidiQuesSection( didiId, PatSurveyStatus.INPROGRESS.ordinal ) } coroutineScope.launch { delay(250) navigateToSummeryPage( navController, didiId, viewModel ) } } } } else if (questionList[it].type == QuestionType.List.name) { val sortedOptionList = questionList[it].options.sortedBy {it.optionValue} ListTypeQuestion( modifier = modifier, questionNumber = (it + 1), index = viewModel.selIndValue.collectAsState().value, question = questionList[it].questionDisplay ?: "", selectedIndex = viewModel.selIndValue.collectAsState().value, optionList = sortedOptionList, isAnswerSelected = viewModel.isAnswerSelected.value ) { selectedOptionId,selectedIndex -&gt; viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.repository.prefRepo.saveNeedQuestionToScroll(true) viewModel.isAnswerSelected.value = true if (viewModel.repository.prefRepo.questionScreenOpenFrom() != PageFrom.DIDI_LIST_PAGE.ordinal) viewModel.updateDidiQuesSection( didiId, PatSurveyStatus.INPROGRESS.ordinal ) viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel =sortedOptionList[selectedIndex] /*questionList[it].options[questionList[it].options.map {it.optionId }.indexOf(selectedOptionId)]*/, assetAmount = 0.0, quesType = QuestionType.List.name, summary = questionList[it].questionSummary ?: BLANK_STRING, selIndex = viewModel.listTypeAnswerIndex.value, enteredAssetAmount = "0", questionFlag = BLANK_STRING ) { coroutineScope.launch { delay(250) navigateToSummeryPage( navController, didiId, viewModel ) } } } } else if (questionList[it].type == QuestionType.Numeric_Field.name) { NumericFieldTypeQuestion( modifier = modifier, questionNumber = (it + 1), question = questionList[it].questionDisplay ?: "", didiId = didiId, questionId = questionList[it].questionId ?: 0, optionList = questionList[it].options, viewModel = viewModel, showNextButton = true, isEditPAT = true, questionFlag = questionList[it].questionFlag ?: QUESTION_FLAG_WEIGHT, totalValueTitle = questionList[it].headingProductAssetValue ?: BLANK_STRING, pagerState = null ) { value -&gt; val newAnswerOptionModel = OptionsItem( display = (if (questionList[it].questionFlag?.equals( QUESTION_FLAG_RATIO, true ) == true ) viewModel.totalAmount.value.toString() else (viewModel.totalAmount.value + stringToDouble(viewModel.enteredAmount.value)).toString()), 0, 0, 0, BLANK_STRING ) viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = newAnswerOptionModel, assetAmount = if (questionList[it].questionFlag.equals( QUESTION_FLAG_RATIO, true ) ) viewModel.totalAmount.value else (viewModel.totalAmount.value + stringToDouble( viewModel.enteredAmount.value )), quesType = QuestionType.Numeric_Field.name, summary = questionList[it].questionSummary ?: BLANK_STRING/*(questionList[it].questionSummary?: BLANK_STRING) + " " + if (questionList[it].questionFlag?.equals(QUESTION_FLAG_RATIO, true) == true) context.getString(R.string.total_productive_asset_value_for_ratio,viewModel.totalAmount.value.toString()) else context.getString(R.string.total_productive_asset_value,(viewModel.totalAmount.value + stringToDouble(viewModel.enteredAmount.value)).toString())*/, selIndex = -1, enteredAssetAmount = if (viewModel.enteredAmount.value.isNullOrEmpty()) BLANK_STRING else viewModel.enteredAmount.value, questionFlag = questionList[it].questionFlag ?: QUESTION_FLAG_WEIGHT ) { if (value == 1) { viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.repository.prefRepo.saveNeedQuestionToScroll(true) coroutineScope.launch { delay(250) navigateToSummeryPage( navController, didiId, viewModel ) } } } } } } // } } } } }</ID>
    <ID>ModifierReused:SingleQuestionScreen.kt$ListTypeQuestion( modifier = modifier, questionNumber = (it + 1), index = viewModel.selIndValue.collectAsState().value, question = questionList[it].questionDisplay ?: "", selectedIndex = viewModel.selIndValue.collectAsState().value, optionList = sortedOptionList, isAnswerSelected = viewModel.isAnswerSelected.value ) { selectedOptionId,selectedIndex -&gt; viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.repository.prefRepo.saveNeedQuestionToScroll(true) viewModel.isAnswerSelected.value = true if (viewModel.repository.prefRepo.questionScreenOpenFrom() != PageFrom.DIDI_LIST_PAGE.ordinal) viewModel.updateDidiQuesSection( didiId, PatSurveyStatus.INPROGRESS.ordinal ) viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel =sortedOptionList[selectedIndex] /*questionList[it].options[questionList[it].options.map {it.optionId }.indexOf(selectedOptionId)]*/, assetAmount = 0.0, quesType = QuestionType.List.name, summary = questionList[it].questionSummary ?: BLANK_STRING, selIndex = viewModel.listTypeAnswerIndex.value, enteredAssetAmount = "0", questionFlag = BLANK_STRING ) { coroutineScope.launch { delay(250) navigateToSummeryPage( navController, didiId, viewModel ) } } }</ID>
    <ID>ModifierReused:SingleQuestionScreen.kt$NumericFieldTypeQuestion( modifier = modifier, questionNumber = (it + 1), question = questionList[it].questionDisplay ?: "", didiId = didiId, questionId = questionList[it].questionId ?: 0, optionList = questionList[it].options, viewModel = viewModel, showNextButton = true, isEditPAT = true, questionFlag = questionList[it].questionFlag ?: QUESTION_FLAG_WEIGHT, totalValueTitle = questionList[it].headingProductAssetValue ?: BLANK_STRING, pagerState = null ) { value -&gt; val newAnswerOptionModel = OptionsItem( display = (if (questionList[it].questionFlag?.equals( QUESTION_FLAG_RATIO, true ) == true ) viewModel.totalAmount.value.toString() else (viewModel.totalAmount.value + stringToDouble(viewModel.enteredAmount.value)).toString()), 0, 0, 0, BLANK_STRING ) viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = newAnswerOptionModel, assetAmount = if (questionList[it].questionFlag.equals( QUESTION_FLAG_RATIO, true ) ) viewModel.totalAmount.value else (viewModel.totalAmount.value + stringToDouble( viewModel.enteredAmount.value )), quesType = QuestionType.Numeric_Field.name, summary = questionList[it].questionSummary ?: BLANK_STRING/*(questionList[it].questionSummary?: BLANK_STRING) + " " + if (questionList[it].questionFlag?.equals(QUESTION_FLAG_RATIO, true) == true) context.getString(R.string.total_productive_asset_value_for_ratio,viewModel.totalAmount.value.toString()) else context.getString(R.string.total_productive_asset_value,(viewModel.totalAmount.value + stringToDouble(viewModel.enteredAmount.value)).toString())*/, selIndex = -1, enteredAssetAmount = if (viewModel.enteredAmount.value.isNullOrEmpty()) BLANK_STRING else viewModel.enteredAmount.value, questionFlag = questionList[it].questionFlag ?: QUESTION_FLAG_WEIGHT ) { if (value == 1) { viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.repository.prefRepo.saveNeedQuestionToScroll(true) coroutineScope.launch { delay(250) navigateToSummeryPage( navController, didiId, viewModel ) } } } }</ID>
    <ID>ModifierReused:SingleQuestionScreen.kt$RadioButtonTypeQuestion( modifier = modifier, questionNumber = (it + 1), question = questionList[it].questionDisplay ?: "", selectedOptionIndex = selectedOption, optionList = sortedOptionList, isLastIndex = (it == questionList.size - 1), isAnswerSelected = viewModel.isAnswerSelected.value ) { selectedIndex, nextButtonClick -&gt; viewModel.prevButtonVisible.value = false viewModel.nextButtonVisible.value = false viewModel.isAnswerSelected.value = true viewModel.setAnswerToQuestion( didiId = didiId, questionId = questionList[it].questionId ?: 0, answerOptionModel = sortedOptionList?.get(selectedIndex)!!, assetAmount = 0.0, quesType = QuestionType.RadioButton.name, summary = questionList[it].questionSummary ?: BLANK_STRING, selIndex = selectedIndex, enteredAssetAmount = "0", questionFlag = BLANK_STRING ) { if (viewModel.repository.prefRepo.questionScreenOpenFrom() != PageFrom.DIDI_LIST_PAGE.ordinal) { if (!nextButtonClick) viewModel.updateDidiQuesSection( didiId, PatSurveyStatus.INPROGRESS.ordinal ) } coroutineScope.launch { delay(250) navigateToSummeryPage( navController, didiId, viewModel ) } } }</ID>
    <ID>ModifierReused:SocialMappingDidiListScreen.kt$Column( modifier = modifier .fillMaxSize(), horizontalAlignment = Alignment.CenterHorizontally ) { VOAndVillageBoxView( prefRepo = didiViewModel.addDidiRepository.prefRepo, modifier = Modifier.fillMaxWidth(), ) val count = didiList.value.filter { it.activeStatus == DidiStatus.DIDI_ACTIVE.ordinal }.size if (showLoader.value) { Box( modifier = Modifier .fillMaxWidth() .height(48.dp) .padding(top = 30.dp) ) { CircularProgressIndicator( color = blueDark, modifier = Modifier .size(28.dp) .align(Alignment.Center) ) } } else { ModuleAddedSuccessView( completeAdditionClicked = completeTolaAdditionClicked, message = stringResource( if (count &lt; 2) R.string.didi_conirmation_text_singular else R.string.didi_conirmation_text_plural, count ), modifier = Modifier.padding(vertical = (screenHeight / 4).dp) ) var listState = rememberLazyListState() if (didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) { listState = rememberForeverLazyListState(key = PAT_SURVEY) } LazyColumn( modifier = Modifier .fillMaxWidth() .background(color = white) .weight(1f) .padding( bottom = if (!didiViewModel.addDidiRepository.prefRepo .getFromPage() .equals(ARG_FROM_HOME, true) ) { 0.dp } else { 50.dp } ), contentPadding = PaddingValues(bottom = 10.dp, start = 20.dp, end = 20.dp), verticalArrangement = Arrangement.spacedBy(10.dp), state = listState ) { item { Row( verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.SpaceAround, modifier = Modifier ) { val title = if (didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) stringResource(R.string.pat_survey_title) else if (!didiViewModel.getFromPage() .equals(ARG_FROM_HOME, true) ) stringResource(R.string.social_mapping) else stringResource(R.string.didis_item_text_plural) MainTitle(title, Modifier.weight(1f)) Spacer(modifier = Modifier.padding(14.dp)) if (!didiViewModel.getFromPage() .equals(ARG_FROM_HOME, true) &amp;&amp; !didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) { // if (!didiViewModel.isVoEndorsementComplete.value) { ButtonOutline( modifier = Modifier .weight(0.9f) .height(45.dp), buttonTitle = stringResource(id = R.string.add_didi), ) { didiViewModel.resetAllFields() navController.navigate("add_didi_graph/$ADD_DIDI_BLANK_ID") { launchSingleTop = true } } /*BlueButtonWithIconWithFixedWidth( modifier = Modifier .weight(0.5f), buttonText = stringResource(id = R.string.add_didi), icon = Icons.Default.Add ) { didiViewModel.resetAllFields() navController.navigate("add_didi_graph/$ADD_DIDI_BLANK_ID") { launchSingleTop = true } }*/ // } } } } item { SearchWithFilterView(placeholderString = stringResource(id = R.string.search_didis), modifier = Modifier, filterSelected = filterSelected, onFilterSelected = { if (didiList.value.isNotEmpty()) { filterSelected = !it (context as MainActivity).isFilterApplied.value = !it didiViewModel.filterList() } }, onSearchValueChange = { didiViewModel.performQuery(it, filterSelected) }) } item { AnimatedVisibility( visible = !filterSelected, modifier = Modifier.fillMaxWidth() ) { Text( text = buildAnnotatedString { withStyle( style = SpanStyle( color = greenOnline, fontSize = 14.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ) ) { append( if (!didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) "${newFilteredDidiList.size}" else "${didiViewModel.pendingDidiCount.value}" ) } append( " ${ if (!didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) pluralStringResource( id = R.plurals.didis_added, newFilteredDidiList.size ) else { pluralStringResource( id = R.plurals.poor_didis_pending_text, count = didiViewModel.pendingDidiCount.value ) } }" ) }, style = TextStyle( color = textColorDark, fontSize = 14.sp, fontWeight = FontWeight.SemiBold, fontFamily = NotoSans ), modifier = Modifier .align(Alignment.Start) ) } } if (filterSelected) { itemsIndexed( newFilteredTolaDidiList.keys.toList() ) { index, didiKey -&gt; ShowDidisFromTola(navController = navController, prefRepo = didiViewModel.addDidiRepository.prefRepo, addDidiViewModel = didiViewModel, didiTola = didiKey, answerDao = didiViewModel.addDidiRepository.answerDao, questionListDao = didiViewModel.addDidiRepository.questionListDao, didiList = if (didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) newFilteredTolaDidiList[didiKey]?.filter { it.wealth_ranking == WealthRank.POOR.rank } ?: emptyList() else newFilteredTolaDidiList[didiKey] ?: emptyList(), modifier = modifier, expandedIds = expandedIds, onExpendClick = { _, didiDetailModel -&gt; if (expandedIds.contains(didiDetailModel.id)) { expandedIds.remove(didiDetailModel.id) } else { expandedIds.add(didiDetailModel.id) } }, onNavigate = { if (!didiViewModel.getFromPage().equals( ARG_FROM_PAT_SURVEY, true ) &amp;&amp; !didiViewModel.isSocialMappingComplete.value ) { navController.navigate("add_didi_graph/${it.id}") { launchSingleTop = true } } else if (didiViewModel.getFromPage().equals( ARG_FROM_HOME, true ) ) { navController.navigate("add_didi_graph/${it.id}") { launchSingleTop = true } } }, onDeleteClicked = { didi -&gt; didiViewModel.deleteDidiOffline( didi, isFilterSelected = true, isOnline = (context as MainActivity).isOnline.value ?: false, networkCallbackListener = object : NetworkCallbackListener { override fun onSuccess() { showCustomToast( context, "Didi Deleted Successfully" ) } override fun onFailed() { TODO("Not yet implemented") } } ) }, onCircularImageClick = { didiEntity -&gt; didiViewModel.dialogDidiEntity.value = didiEntity didiViewModel.showDidiImageDialog.value = true } ) if (index &lt; newFilteredTolaDidiList.keys.size - 1) { Divider( color = borderGreyLight, thickness = 1.dp, modifier = Modifier.padding( top = 22.dp, bottom = 1.dp ) ) } } if (!didiViewModel.isSocialMappingComplete.value) item { Spacer(modifier = Modifier.height(bottomPadding)) } } else { itemsIndexed( if (didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) newFilteredDidiList.filter { it.wealth_ranking == WealthRank.POOR.rank } else newFilteredDidiList) { index, didi -&gt; if (didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) { DidiItemCardForPat( navController = navController, prefRepo = didiViewModel.addDidiRepository.prefRepo, didi = didi, answerDao = didiViewModel.addDidiRepository.answerDao, questionListDao = didiViewModel.addDidiRepository.questionListDao, expanded = expandedIds.contains(didi.id), modifier = modifier, onExpendClick = { _, _ -&gt; }, onNotAvailableClick = { didiEntity -&gt; didiViewModel.setDidiAsUnavailable(didiEntity.id) }, onItemClick = {} ,onCircularImageClick = { didi-&gt; didiViewModel.dialogDidiEntity.value =didi didiViewModel.showDidiImageDialog.value =true } ) } else { DidiItemCard(navController, didiViewModel, didi, expandedIds.contains(didi.id), modifier, onExpendClick = { _, didiDetailModel -&gt; if (expandedIds.contains(didiDetailModel.id)) { expandedIds.remove(didiDetailModel.id) } else { expendedDidiIndex = index expandedIds.add(didiDetailModel.id) coroutineScope.launch { delay(EXPANSTION_TRANSITION_DURATION.toLong() - 100) listState.animateScrollToItem(index + 3) } } }, onItemClick = { didi -&gt; if (!didiViewModel.getFromPage().equals( ARG_FROM_PAT_SURVEY, true ) &amp;&amp; !didiViewModel.isSocialMappingComplete.value ) { navController.navigate("add_didi_graph/${didi.id}") { launchSingleTop = true } } else if (didiViewModel.getFromPage().equals( ARG_FROM_HOME, true ) ) { navController.navigate("add_didi_graph/${didi.id}") { launchSingleTop = true } } }, onDeleteClicked = { didi -&gt; didiViewModel.deleteDidiOffline( didi, isOnline = (context as MainActivity).isOnline.value ?: false, networkCallbackListener = object : NetworkCallbackListener { override fun onSuccess() { showCustomToast( context, "Didi Deleted Successfully" ) } override fun onFailed() { TODO("Not yet implemented") } }) }, onCircularImageClick = { didi-&gt; didiViewModel.dialogDidiEntity.value =didi didiViewModel.showDidiImageDialog.value =true } ) } } if (!didiViewModel.isSocialMappingComplete.value) item { Spacer(modifier = Modifier.height(bottomPadding)) } } } } }</ID>
    <ID>ModifierReused:SocialMappingDidiListScreen.kt$DidiItemCard(navController, didiViewModel, didi, expandedIds.contains(didi.id), modifier, onExpendClick = { _, didiDetailModel -&gt; if (expandedIds.contains(didiDetailModel.id)) { expandedIds.remove(didiDetailModel.id) } else { expendedDidiIndex = index expandedIds.add(didiDetailModel.id) coroutineScope.launch { delay(EXPANSTION_TRANSITION_DURATION.toLong() - 100) listState.animateScrollToItem(index + 3) } } }, onItemClick = { didi -&gt; if (!didiViewModel.getFromPage().equals( ARG_FROM_PAT_SURVEY, true ) &amp;&amp; !didiViewModel.isSocialMappingComplete.value ) { navController.navigate("add_didi_graph/${didi.id}") { launchSingleTop = true } } else if (didiViewModel.getFromPage().equals( ARG_FROM_HOME, true ) ) { navController.navigate("add_didi_graph/${didi.id}") { launchSingleTop = true } } }, onDeleteClicked = { didi -&gt; didiViewModel.deleteDidiOffline( didi, isOnline = (context as MainActivity).isOnline.value ?: false, networkCallbackListener = object : NetworkCallbackListener { override fun onSuccess() { showCustomToast( context, "Didi Deleted Successfully" ) } override fun onFailed() { TODO("Not yet implemented") } }) }, onCircularImageClick = { didi-&gt; didiViewModel.dialogDidiEntity.value =didi didiViewModel.showDidiImageDialog.value =true } )</ID>
    <ID>ModifierReused:SocialMappingDidiListScreen.kt$DidiItemCardForPat( navController = navController, prefRepo = didiViewModel.addDidiRepository.prefRepo, didi = didi, answerDao = didiViewModel.addDidiRepository.answerDao, questionListDao = didiViewModel.addDidiRepository.questionListDao, expanded = expandedIds.contains(didi.id), modifier = modifier, onExpendClick = { _, _ -&gt; }, onNotAvailableClick = { didiEntity -&gt; didiViewModel.setDidiAsUnavailable(didiEntity.id) }, onItemClick = {} ,onCircularImageClick = { didi-&gt; didiViewModel.dialogDidiEntity.value =didi didiViewModel.showDidiImageDialog.value =true } )</ID>
    <ID>ModifierReused:SocialMappingDidiListScreen.kt$ShowDidisFromTola(navController = navController, prefRepo = didiViewModel.addDidiRepository.prefRepo, addDidiViewModel = didiViewModel, didiTola = didiKey, answerDao = didiViewModel.addDidiRepository.answerDao, questionListDao = didiViewModel.addDidiRepository.questionListDao, didiList = if (didiViewModel.getFromPage() .equals(ARG_FROM_PAT_SURVEY, true) ) newFilteredTolaDidiList[didiKey]?.filter { it.wealth_ranking == WealthRank.POOR.rank } ?: emptyList() else newFilteredTolaDidiList[didiKey] ?: emptyList(), modifier = modifier, expandedIds = expandedIds, onExpendClick = { _, didiDetailModel -&gt; if (expandedIds.contains(didiDetailModel.id)) { expandedIds.remove(didiDetailModel.id) } else { expandedIds.add(didiDetailModel.id) } }, onNavigate = { if (!didiViewModel.getFromPage().equals( ARG_FROM_PAT_SURVEY, true ) &amp;&amp; !didiViewModel.isSocialMappingComplete.value ) { navController.navigate("add_didi_graph/${it.id}") { launchSingleTop = true } } else if (didiViewModel.getFromPage().equals( ARG_FROM_HOME, true ) ) { navController.navigate("add_didi_graph/${it.id}") { launchSingleTop = true } } }, onDeleteClicked = { didi -&gt; didiViewModel.deleteDidiOffline( didi, isFilterSelected = true, isOnline = (context as MainActivity).isOnline.value ?: false, networkCallbackListener = object : NetworkCallbackListener { override fun onSuccess() { showCustomToast( context, "Didi Deleted Successfully" ) } override fun onFailed() { TODO("Not yet implemented") } } ) }, onCircularImageClick = { didiEntity -&gt; didiViewModel.dialogDidiEntity.value = didiEntity didiViewModel.showDidiImageDialog.value = true } )</ID>
    <ID>ModifierWithoutDefault:AddDidiScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:BpcAddMoreDidiScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:ButtonsUtil.kt$modifier</ID>
    <ID>ModifierWithoutDefault:CardArrow.kt$modifier</ID>
    <ID>ModifierWithoutDefault:CircularProgressView.kt$modifier</ID>
    <ID>ModifierWithoutDefault:ComposableUtils.kt$modifier</ID>
    <ID>ModifierWithoutDefault:ComposeableUtils.kt$modifier</ID>
    <ID>ModifierWithoutDefault:CustomProgressBar.kt$modifier</ID>
    <ID>ModifierWithoutDefault:DropDownWithTitle.kt$modifier</ID>
    <ID>ModifierWithoutDefault:EditTextWithTitle.kt$modifier</ID>
    <ID>ModifierWithoutDefault:IncrementDecrementButton.kt$modifier</ID>
    <ID>ModifierWithoutDefault:ListTypeQuestion.kt$modifier</ID>
    <ID>ModifierWithoutDefault:LoginScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:MainTitle.kt$modifier</ID>
    <ID>ModifierWithoutDefault:Media.kt$modifier</ID>
    <ID>ModifierWithoutDefault:NumericFieldTypeQuestion.kt$modifier</ID>
    <ID>ModifierWithoutDefault:ParticipatoryWealthRankingSurvey.kt$modifier</ID>
    <ID>ModifierWithoutDefault:PatDidiSummaryScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:PatSurvaySectionOneSummary.kt$modifier</ID>
    <ID>ModifierWithoutDefault:PatSurvaySectionTwoSummary.kt$modifier</ID>
    <ID>ModifierWithoutDefault:PatSurveyCompleteSummary.kt$modifier</ID>
    <ID>ModifierWithoutDefault:PdfViewer.kt$modifier</ID>
    <ID>ModifierWithoutDefault:QuestionScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:RadioButtonTypeQuestion.kt$modifier</ID>
    <ID>ModifierWithoutDefault:SingleQuestionScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:SocialMappingDidiListScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:SurveyHeader.kt$modifier</ID>
    <ID>ModifierWithoutDefault:VOAndVillageBoxView.kt$modifier</ID>
    <ID>ModifierWithoutDefault:VideoListScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:VoEndorsementScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:WealthRankingScreen.kt$modifier</ID>
    <ID>ModifierWithoutDefault:YesNoQuestion.kt$modifier</ID>
    <ID>MutableParams:BpcPrgressScreen.kt$stepListData</ID>
    <ID>MutableParams:FormPictureScreen.kt$pageList</ID>
    <ID>MutableParams:OtpInputField.kt$autoReadOtp</ID>
    <ID>MutableParams:SettingScreen.kt$isBPCDataNeedToBeSynced</ID>
    <ID>MutableParams:SettingScreen.kt$isDataNeedToBeSynced</ID>
    <ID>MutableParams:SettingScreen.kt$showBPCSyncDialog</ID>
    <ID>MutableParams:SettingScreen.kt$showSyncDialogStatus</ID>
    <ID>MutableParams:SettingScreen.kt$syncBPCStatus</ID>
    <ID>NestedBlockDepth:AddDidiViewModel.kt$AddDidiViewModel$@SuppressLint("SuspiciousIndentation") fun performQuery(query: String, isTolaFilterSelected: Boolean)</ID>
    <ID>NestedBlockDepth:BpcAddMoreDidiViewModel.kt$BpcAddMoreDidiViewModel$fun performQuery(query: String, isTolaFilterSelected: Boolean)</ID>
    <ID>NestedBlockDepth:BpcDidiListViewModel.kt$BpcDidiListViewModel$fun performQuery(query: String, isTolaFilterSelected: Boolean)</ID>
    <ID>NestedBlockDepth:ControllerState.kt$ControllerState$fun seekTo(positionMs: Long)</ID>
    <ID>NestedBlockDepth:DeviceInfoUtils.kt$DeviceInfoUtils$fun getConnectionType(context: Context): String</ID>
    <ID>NestedBlockDepth:DeviceInfoUtils.kt$DeviceInfoUtils$fun getIPAddress(useIPv4: Boolean): String</ID>
    <ID>NestedBlockDepth:DeviceInfoUtils.kt$DeviceInfoUtils$fun hasNetwork(context: Context): Boolean</ID>
    <ID>NestedBlockDepth:DeviceInfoUtils.kt$DeviceInfoUtils$private fun getMACAddress(interfaceName: String?): String</ID>
    <ID>NestedBlockDepth:DidiScreen.kt$@SuppressLint("StateFlowValueCalledInComposition") @Composable fun DidiScreen( navController: NavHostController, modifier: Modifier = Modifier, didiViewModel: AddDidiViewModel, villageId:Int, stepId:Int, onNavigateToAddDidi:()-&gt; Unit, onNavigateToSummary:()-&gt; Unit )</ID>
    <ID>NestedBlockDepth:LocationUtil.kt$LocationUtil$fun getLocation(context: Activity): LocationCoordinates?</ID>
    <ID>NestedBlockDepth:NudgeLogger.kt$LogWriter$fun cleanup(checkForSize: Boolean)</ID>
    <ID>NestedBlockDepth:PATSummarySaveRequest.kt$AnswerDetailDTOListItem.Companion$fun getAnswerDetailDtoListItem( sectionAnswerEntityList: List&lt;SectionAnswerEntity&gt;, numericAnswerEntityList: List&lt;NumericAnswerEntity&gt; ): List&lt;AnswerDetailDTOListItem&gt;</ID>
    <ID>NestedBlockDepth:ParticipatoryWealthRankingSurvey.kt$fun getLatestStatusTextForWealthRankingCard(context: Context, didi: DidiEntity): String</ID>
    <ID>NestedBlockDepth:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$fun getOptionForLanguage(questionId : Int,optionId : Int, answerValue:String) : String</ID>
    <ID>NestedBlockDepth:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$private suspend fun calculateDidiScore(didiId: Int)</ID>
    <ID>NestedBlockDepth:SettingScreen.kt$@Composable fun SettingScreen( viewModel: SettingViewModel, navController: NavController, modifier: Modifier = Modifier )</ID>
    <ID>NestedBlockDepth:SocialMappingDidiListScreen.kt$fun getLatestStatusText(context: Context, didi: DidiEntity): String</ID>
    <ID>NestedBlockDepth:SurveySummaryViewModel.kt$SurveySummaryViewModel$private fun calculateDidiScore(didiId: Int)</ID>
    <ID>NestedBlockDepth:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$private fun calculateDidiScore(didiId: Int)</ID>
    <ID>NestedBlockDepth:SyncHelper.kt$SyncHelper$private fun calculateDidiScore(didiId: Int)</ID>
    <ID>NestedBlockDepth:Utils.kt$fun calculateScore(list: List&lt;WeightageRatioModal&gt;,totalAmount:Double,isRatio:Boolean):Double</ID>
    <ID>NestedBlockDepth:VillageSelectionRepository.kt$VillageSelectionRepository$private fun calculateDidiScore(didiId: Int, prefRepo: PrefRepo)</ID>
    <ID>NestedBlockDepth:VillageSelectionRepository.kt$VillageSelectionRepository$private suspend fun FetchTolaForBpc(villageId: Int)</ID>
    <ID>NestedBlockDepth:VillageSelectionRepository.kt$VillageSelectionRepository$private suspend fun updateBpcPatStatusToNetwork(networkCallbackListener: NetworkCallbackListener, prefRepo: PrefRepo)</ID>
    <ID>NestedBlockDepth:VoEndorsementScreenViewModel.kt$VoEndorsementScreenViewModel$fun performQuery(query: String, isTolaFilterSelected: Boolean)</ID>
    <ID>NestedBlockDepth:VoEndorsementSummaryViewModel.kt$VoEndorsementSummaryViewModel$fun getOptionForLanguage(questionId : Int,optionId : Int, answerValue:String) : String</ID>
    <ID>NestedBlockDepth:WealthRankingViewModel.kt$WealthRankingViewModel$fun performQuery(query: String, isTolaFilterSelected: Boolean)</ID>
    <ID>PackageNaming:AddTola.kt$package com.patsurvey.nudge.activities.ui.transect_walk</ID>
    <ID>PackageNaming:BPCDidiListRepository.kt$package com.patsurvey.nudge.activities.ui.bpc.bpc_didi_list_screens</ID>
    <ID>PackageNaming:BPCProgressScreenRepository.kt$package com.patsurvey.nudge.activities.ui.bpc.progress_screens</ID>
    <ID>PackageNaming:BpcAddMoreDidiScreen.kt$package com.patsurvey.nudge.activities.ui.bpc.bpc_add_more_did_screens</ID>
    <ID>PackageNaming:BpcAddMoreDidiViewModel.kt$package com.patsurvey.nudge.activities.ui.bpc.bpc_add_more_did_screens</ID>
    <ID>PackageNaming:BpcDidiListScreen.kt$package com.patsurvey.nudge.activities.ui.bpc.bpc_didi_list_screens</ID>
    <ID>PackageNaming:BpcDidiListViewModel.kt$package com.patsurvey.nudge.activities.ui.bpc.bpc_didi_list_screens</ID>
    <ID>PackageNaming:BpcPrgressScreen.kt$package com.patsurvey.nudge.activities.ui.bpc.progress_screens</ID>
    <ID>PackageNaming:BpcProgressScreenViewModel.kt$package com.patsurvey.nudge.activities.ui.bpc.progress_screens</ID>
    <ID>PackageNaming:BpcVillageScreenViewModel.kt$package com.patsurvey.nudge.activities.ui.bpc.bpc_village_screen</ID>
    <ID>PackageNaming:BpcVillageSelectionScreen.kt$package com.patsurvey.nudge.activities.ui.bpc.bpc_village_screen</ID>
    <ID>PackageNaming:DigitalFormAScreen.kt$package com.patsurvey.nudge.activities.ui.digital_forms</ID>
    <ID>PackageNaming:DigitalFormBScreen.kt$package com.patsurvey.nudge.activities.ui.digital_forms</ID>
    <ID>PackageNaming:DigitalFormCScreen.kt$package com.patsurvey.nudge.activities.ui.digital_forms</ID>
    <ID>PackageNaming:DigitalFormRepository.kt$package com.patsurvey.nudge.activities.ui.digital_forms</ID>
    <ID>PackageNaming:DigitalFormViewModel.kt$package com.patsurvey.nudge.activities.ui.digital_forms</ID>
    <ID>PackageNaming:FormPictureScreen.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:FormPictureScreenRepository.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:FormPictureScreenViewModel.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:ImageViewer.kt$package com.patsurvey.nudge.activities.ui.digital_forms</ID>
    <ID>PackageNaming:ImageViewerViewModel.kt$package com.patsurvey.nudge.activities.ui.digital_forms</ID>
    <ID>PackageNaming:PdfViewer.kt$package com.patsurvey.nudge.activities.ui.digital_forms</ID>
    <ID>PackageNaming:ScoreComparisionScreen.kt$package com.patsurvey.nudge.activities.ui.bpc.score_comparision</ID>
    <ID>PackageNaming:ScoreComparisonViewModel.kt$package com.patsurvey.nudge.activities.ui.bpc.score_comparision</ID>
    <ID>PackageNaming:TransectWalkRepository.kt$package com.patsurvey.nudge.activities.ui.transect_walk</ID>
    <ID>PackageNaming:TransectWalkViewModel.kt$package com.patsurvey.nudge.activities.ui.transect_walk</ID>
    <ID>PackageNaming:TransetWalkScreen.kt$package com.patsurvey.nudge.activities.ui.transect_walk</ID>
    <ID>PackageNaming:VoEndorsementScreen.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:VoEndorsementScreenRepository.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:VoEndorsementScreenViewModel.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:VoEndorsementStepScreen.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:VoEndorsementSummaryRepository.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:VoEndorsementSummaryScreen.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PackageNaming:VoEndorsementSummaryViewModel.kt$package com.patsurvey.nudge.activities.ui.vo_endorsement</ID>
    <ID>PrintStackTrace:BpcAddMoreDidiViewModel.kt$BpcAddMoreDidiViewModel$ex</ID>
    <ID>PrintStackTrace:BpcDidiListViewModel.kt$BpcDidiListViewModel$ex</ID>
    <ID>PrintStackTrace:Utils.kt$e</ID>
    <ID>PrintStackTrace:Utils.kt$exception</ID>
    <ID>PrintStackTrace:VoEndorsementScreenViewModel.kt$VoEndorsementScreenViewModel$ex</ID>
    <ID>RememberMissing:ComposeableUtils.kt$mutableStateOf(true)</ID>
    <ID>RememberMissing:LanguageSelectorScreen.kt$mutableStateOf(true)</ID>
    <ID>RememberMissing:OtpView.kt$derivedStateOf { otpValue.length == 6 }</ID>
    <ID>ReturnCount:AddDidiRepository.kt$AddDidiRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>ReturnCount:BPCDidiListRepository.kt$BPCDidiListRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>ReturnCount:BaseRepository.kt$BaseRepository$fun &lt;T&gt; createWorkflowEvent( eventItem: T, stepStatus: StepStatus, eventName: EventName, eventType: EventType, prefRepo: PrefRepo ): Events?</ID>
    <ID>ReturnCount:BaseRepository.kt$BaseRepository$suspend fun &lt;T&gt; safeApiCall(apiCall:suspend ()-&gt;Response&lt;T&gt;):NetworkResult&lt;T&gt;</ID>
    <ID>ReturnCount:CasteEntity.kt$CasteEntity.Companion$fun getDefaultCasteListForLanguage(languageId: Int): List&lt;CasteEntity&gt;</ID>
    <ID>ReturnCount:DeviceInfoUtils.kt$DeviceInfoUtils$fun getIPAddress(useIPv4: Boolean): String</ID>
    <ID>ReturnCount:DeviceInfoUtils.kt$DeviceInfoUtils$private fun getMACAddress(interfaceName: String?): String</ID>
    <ID>ReturnCount:LocationUtil.kt$LocationUtil$fun getLocation(context: Activity): LocationCoordinates?</ID>
    <ID>ReturnCount:NetworkHelper.kt$fun isInternetAvailable(context: Context): Boolean</ID>
    <ID>ReturnCount:NudgeCore.kt$NudgeCore$fun preRequestCheck(): Boolean</ID>
    <ID>ReturnCount:PatSectionSummaryRepository.kt$PatSectionSummaryRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>ReturnCount:SettingRepository.kt$SettingRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>ReturnCount:SettingViewModel.kt$SettingViewModel$fun isBPCDidiSynced(): Boolean</ID>
    <ID>ReturnCount:StepListEntity.kt$StepListEntity.Companion$fun same(l1: List&lt;StepListEntity&gt;, l2: List&lt;StepListEntity&gt;, ignoreIds: Boolean = false): Boolean</ID>
    <ID>ReturnCount:SurveySummaryRepository.kt$SurveySummaryRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>ReturnCount:TolaEntity.kt$TolaEntity.Companion$fun same(l1: List&lt;TolaEntity&gt;, l2: List&lt;GetCohortResponseModel&gt;, ignoreIds: Boolean = false): Boolean</ID>
    <ID>ReturnCount:TransectWalkRepository.kt$TransectWalkRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>ReturnCount:Utils.kt$fun findImageLocationFromPath(uri:String):List&lt;String&gt;</ID>
    <ID>ReturnCount:VoEndorsementSummaryRepository.kt$VoEndorsementSummaryRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>ReturnCount:WealthRankingSurveyRepository.kt$WealthRankingSurveyRepository$override suspend fun &lt;T&gt; createEvent( eventItem: T, eventName: EventName, eventType: EventType ): Events?</ID>
    <ID>SwallowedException:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$ex: Exception</ID>
    <ID>SwallowedException:DeviceInfoUtils.kt$DeviceInfoUtils$ex: Exception</ID>
    <ID>SwallowedException:LanguageViewModel.kt$LanguageViewModel$ex: Exception</ID>
    <ID>SwallowedException:NudgeLogger.kt$LogWriter$ex: Exception</ID>
    <ID>SwallowedException:ServerErrorHandler.kt$ServerErrorHandler$e: Exception</ID>
    <ID>SwallowedException:ServerErrorHandler.kt$e: Exception</ID>
    <ID>SwallowedException:SettingViewModel.kt$SettingViewModel.&lt;no name provided&gt;$exception: Exception</ID>
    <ID>SwallowedException:Utils.kt$ex:Exception</ID>
    <ID>SwallowedException:VillageSelectionRepository.kt$VillageSelectionRepository$ex: Exception</ID>
    <ID>SwallowedException:VillageSelectionViewModel.kt$VillageSelectionViewModel$ex: Exception</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:Media.kt$IllegalStateException()</ID>
    <ID>TooGenericExceptionCaught:AddDidiViewModel.kt$AddDidiViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:AnalyticsHelper.kt$AnalyticsHelper$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:BaseRepository.kt$BaseRepository$e:Exception</ID>
    <ID>TooGenericExceptionCaught:BaseRepository.kt$BaseRepository$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:BpcAddMoreDidiViewModel.kt$BpcAddMoreDidiViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:BpcDidiListViewModel.kt$BpcDidiListViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ConfigViewModel.kt$ConfigViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:CurlLoggingInterceptor.kt$CurlLoggingInterceptor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeviceInfoUtils.kt$DeviceInfoUtils$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:DigitalFormViewModel.kt$DigitalFormViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ExportHelper.kt$ExportHelper$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$ex:Exception</ID>
    <ID>TooGenericExceptionCaught:LanguageSelectorScreen.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:LanguageViewModel.kt$LanguageViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:LocationUtil.kt$LocationUtil$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MyApplication.kt$MyApplication.Companion$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:NetworkModule.kt$NetworkModule$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:NudgeCore.kt$NudgeCore$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:NudgeDatabase.kt$NudgeDatabase.Companion$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:NudgeLogger.kt$LogWriter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NudgeLogger.kt$LogWriter$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:NudgeLogger.kt$LogWriter$fault: Exception</ID>
    <ID>TooGenericExceptionCaught:NudgeLogger.kt$LogWriter$fault: Throwable</ID>
    <ID>TooGenericExceptionCaught:NugdePrefs.kt$NugdePrefs$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ProgressScreenViewModel.kt$ProgressScreenViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:QuestionScreen.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:QuestionScreenViewModel.kt$QuestionScreenViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:QuestionScreenViewModel.kt$QuestionScreenViewModel$ex:Exception</ID>
    <ID>TooGenericExceptionCaught:RetryHelper.kt$RetryHelper$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ServerErrorHandler.kt$ServerErrorHandler$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ServerErrorHandler.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingRepository.kt$SettingRepository$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingViewModel.kt$SettingViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingViewModel.kt$SettingViewModel$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingViewModel.kt$SettingViewModel.&lt;no name provided&gt;$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:SingleQuestionScreen.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:StepListEntity.kt$StepListEntity.Companion$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SurveySummaryViewModel.kt$SurveySummaryViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SurveySummaryViewModel.kt$SurveySummaryViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SurveySummaryViewModel.kt$SurveySummaryViewModel$ex:Exception</ID>
    <ID>TooGenericExceptionCaught:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$ex:Exception</ID>
    <ID>TooGenericExceptionCaught:SyncHelper.kt$SyncHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncHelper.kt$SyncHelper$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncHelper.kt$SyncHelper$ex:Exception</ID>
    <ID>TooGenericExceptionCaught:TolaEntity.kt$TolaEntity.Companion$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:TransectWalkViewModel.kt$TransectWalkViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:Utils.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:Utils.kt$ex:Exception</ID>
    <ID>TooGenericExceptionCaught:VideoListViewModel.kt$VideoListViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:VillageSelectionRepository.kt$VillageSelectionRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VillageSelectionRepository.kt$VillageSelectionRepository$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:VillageSelectionRepository.kt$VillageSelectionRepository$ex:Exception</ID>
    <ID>TooGenericExceptionCaught:VillageSelectionViewModel.kt$VillageSelectionViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:VoEndorsementScreenViewModel.kt$VoEndorsementScreenViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:VoEndorsementScreenViewModel.kt$VoEndorsementScreenViewModel$ex:Exception</ID>
    <ID>TooGenericExceptionCaught:VoEndorsementSummaryScreen.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel.&lt;no name provided&gt;$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WealthRankingViewModel.kt$WealthRankingViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionThrown:NetworkModule.kt$NetworkModule$throw RuntimeException(ex)</ID>
    <ID>TooManyFunctions:AddDidiRepository.kt$AddDidiRepository : BaseRepository</ID>
    <ID>TooManyFunctions:AddDidiViewModel.kt$AddDidiViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:AnswerDao.kt$AnswerDao</ID>
    <ID>TooManyFunctions:ApiService.kt$ApiService</ID>
    <ID>TooManyFunctions:BPCDidiListRepository.kt$BPCDidiListRepository : BaseRepository</ID>
    <ID>TooManyFunctions:BPCProgressScreenRepository.kt$BPCProgressScreenRepository : BaseRepository</ID>
    <ID>TooManyFunctions:BaseRepository.kt$BaseRepository</ID>
    <ID>TooManyFunctions:BpcDidiListViewModel.kt$BpcDidiListViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:BpcVillageScreenViewModel.kt$BpcVillageScreenViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:ButtonsUtil.kt$com.patsurvey.nudge.utils.ButtonsUtil.kt</ID>
    <ID>TooManyFunctions:DatabaseModule.kt$DatabaseModule</ID>
    <ID>TooManyFunctions:DidiDao.kt$DidiDao</ID>
    <ID>TooManyFunctions:FormPictureScreenRepository.kt$FormPictureScreenRepository : BaseRepository</ID>
    <ID>TooManyFunctions:FormPictureScreenViewModel.kt$FormPictureScreenViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:MainActivity.kt$MainActivity : ComponentActivityOnLocaleChangedListener</ID>
    <ID>TooManyFunctions:NudgeDatabase.kt$NudgeDatabase : RoomDatabase</ID>
    <ID>TooManyFunctions:NugdePrefs.kt$NugdePrefs</ID>
    <ID>TooManyFunctions:NumericAnswerDao.kt$NumericAnswerDao</ID>
    <ID>TooManyFunctions:ParticipatoryWealthRankingSurvey.kt$com.patsurvey.nudge.activities.ui.socialmapping.ParticipatoryWealthRankingSurvey.kt</ID>
    <ID>TooManyFunctions:PatDidiSummaryViewModel.kt$PatDidiSummaryViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:PatSectionSummaryRepository.kt$PatSectionSummaryRepository : BaseRepository</ID>
    <ID>TooManyFunctions:PatSectionSummaryViewModel.kt$PatSectionSummaryViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:PdfUtils.kt$PdfUtils</ID>
    <ID>TooManyFunctions:PlayerState.kt$PlayerStateImpl$&lt;no name provided&gt; : Listener</ID>
    <ID>TooManyFunctions:PrefRepo.kt$PrefRepo</ID>
    <ID>TooManyFunctions:ProgressScreenRepository.kt$ProgressScreenRepository : BaseRepository</ID>
    <ID>TooManyFunctions:ProgressScreenViewModel.kt$ProgressScreenViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:QuestionScreenRepository.kt$QuestionScreenRepository : BaseRepository</ID>
    <ID>TooManyFunctions:QuestionScreenViewModel.kt$QuestionScreenViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:RetryHelper.kt$RetryHelper</ID>
    <ID>TooManyFunctions:SettingRepository.kt$SettingRepository : BaseRepository</ID>
    <ID>TooManyFunctions:SettingViewModel.kt$SettingViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:SharedPrefs.kt$SharedPrefs : PrefRepo</ID>
    <ID>TooManyFunctions:SocialMappingDidiListScreen.kt$com.patsurvey.nudge.activities.SocialMappingDidiListScreen.kt</ID>
    <ID>TooManyFunctions:StepsListDao.kt$StepsListDao</ID>
    <ID>TooManyFunctions:SurveySummaryRepository.kt$SurveySummaryRepository : BaseRepository</ID>
    <ID>TooManyFunctions:SurveySummaryViewModel.kt$SurveySummaryViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:SyncBPCDataOnServer.kt$SyncBPCDataOnServer</ID>
    <ID>TooManyFunctions:SyncHelper.kt$SyncHelper</ID>
    <ID>TooManyFunctions:TolaDao.kt$TolaDao</ID>
    <ID>TooManyFunctions:TransectWalkRepository.kt$TransectWalkRepository : BaseRepository</ID>
    <ID>TooManyFunctions:TransectWalkViewModel.kt$TransectWalkViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:Utils.kt$com.patsurvey.nudge.utils.Utils.kt</ID>
    <ID>TooManyFunctions:VillageListDao.kt$VillageListDao</ID>
    <ID>TooManyFunctions:VillageSelectionRepository.kt$VillageSelectionRepository : BaseRepository</ID>
    <ID>TooManyFunctions:VillageSelectionViewModel.kt$VillageSelectionViewModel : BaseViewModel</ID>
    <ID>TooManyFunctions:WealthRankingSurveyRepository.kt$WealthRankingSurveyRepository : BaseRepository</ID>
    <ID>TooManyFunctions:WealthRankingSurveyViewModel.kt$WealthRankingSurveyViewModel : BaseViewModel</ID>
    <ID>UnusedParameter:AddDidiRepository.kt$AddDidiRepository$serverId: Int</ID>
    <ID>UnusedParameter:AddDidiRepository.kt$AddDidiRepository$status: Int</ID>
    <ID>UnusedParameter:AddDidiScreen.kt$navController: NavHostController</ID>
    <ID>UnusedParameter:AndroidDownloader.kt$AndroidDownloader$context: Context</ID>
    <ID>UnusedParameter:BaseRepository.kt$BaseRepository$eventType: EventType</ID>
    <ID>UnusedParameter:BpcAddMoreDidiScreen.kt$didi: DidiEntity</ID>
    <ID>UnusedParameter:BpcDidiListScreen.kt$villageId: Int</ID>
    <ID>UnusedParameter:BpcPrgressScreen.kt$iconId: Int</ID>
    <ID>UnusedParameter:BpcPrgressScreen.kt$navController: NavHostController</ID>
    <ID>UnusedParameter:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel$context: Context</ID>
    <ID>UnusedParameter:BpcVillageScreenViewModel.kt$BpcVillageScreenViewModel$context: Context</ID>
    <ID>UnusedParameter:BpcVillageSelectionScreen.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:ButtonsUtil.kt$iconTintColor: Color = Color.White</ID>
    <ID>UnusedParameter:ButtonsUtil.kt$textColor: Color = Color.White</ID>
    <ID>UnusedParameter:CameraView.kt$executor: Executor</ID>
    <ID>UnusedParameter:CameraView.kt$fileNameFormat: String</ID>
    <ID>UnusedParameter:CameraView.kt$viewModel: PatDidiSummaryViewModel</ID>
    <ID>UnusedParameter:CircularProgressView.kt$minProgress: Int = 0</ID>
    <ID>UnusedParameter:CircularProgressView.kt$modifier: Modifier</ID>
    <ID>UnusedParameter:ComposableUtils.kt$isFromNotAvailableCard:Boolean?=false</ID>
    <ID>UnusedParameter:ComposableUtils.kt$onItemClick: (DidiEntity) -&gt; Unit</ID>
    <ID>UnusedParameter:ComposeableUtils.kt$navController: NavHostController</ID>
    <ID>UnusedParameter:CustomSnackBarView.kt$containerColor: Color</ID>
    <ID>UnusedParameter:CustomSnackBarView.kt$contentColor: Color</ID>
    <ID>UnusedParameter:CustomSnackBarView.kt$icon: Int</ID>
    <ID>UnusedParameter:DataDumpRequestParts.kt$DataDumpRequestParts.Companion$context: Context</ID>
    <ID>UnusedParameter:DigitalFormViewModel.kt$DigitalFormViewModel$viewModel: DigitalFormViewModel</ID>
    <ID>UnusedParameter:DropDownWithTitle.kt$dropDownBackground: Color = white</ID>
    <ID>UnusedParameter:DropDownWithTitle.kt$dropDownBorder: Color = borderGrey</ID>
    <ID>UnusedParameter:DropDownWithTitle.kt$listTypeTola:Boolean = false</ID>
    <ID>UnusedParameter:FinalStepCompletion.kt$navController: NavController</ID>
    <ID>UnusedParameter:FormPictureScreen.kt$context: Activity</ID>
    <ID>UnusedParameter:FormPictureScreen.kt$deleteButtonClicked: (index: Int) -&gt; Unit</ID>
    <ID>UnusedParameter:FormPictureScreen.kt$formName: String</ID>
    <ID>UnusedParameter:FormPictureScreen.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:FormPictureScreen.kt$navController: NavController</ID>
    <ID>UnusedParameter:HomeScreen.kt$navController: NavHostController</ID>
    <ID>UnusedParameter:HomeUserScreen.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:IncrementDecrementButton.kt$modifier: Modifier</ID>
    <ID>UnusedParameter:MoreScreen.kt$navController: NavHostController</ID>
    <ID>UnusedParameter:NetworkModule.kt$NetworkModule$context: Context</ID>
    <ID>UnusedParameter:OtpInputField.kt$isShowWarning: Boolean</ID>
    <ID>UnusedParameter:OtpInputField.kt$modifier: Modifier=Modifier</ID>
    <ID>UnusedParameter:ParticipatoryWealthRankingSurvey.kt$onItemClick: (DidiEntity) -&gt; Unit</ID>
    <ID>UnusedParameter:PatDidiSummaryScreen.kt$onNavigation: () -&gt; Unit</ID>
    <ID>UnusedParameter:PatSurvaySectionOneSummary.kt$isOnline: Boolean = true</ID>
    <ID>UnusedParameter:Pat_image_preview_screen.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:PdfViewer.kt$verticalArrangement: Arrangement.Vertical = Arrangement.spacedBy(8.dp)</ID>
    <ID>UnusedParameter:ProfileScreen.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:ProgressScreen.kt$context: Context</ID>
    <ID>UnusedParameter:ProgressScreen.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:ProgressScreen.kt$positiveButtonClicked: () -&gt; Unit</ID>
    <ID>UnusedParameter:ProgressScreen.kt$setShowDialog: (Boolean) -&gt; Unit</ID>
    <ID>UnusedParameter:ProgressScreen.kt$snackState: CustomSnackBarViewState</ID>
    <ID>UnusedParameter:ProgressScreen.kt$stepsNavHostController: NavHostController</ID>
    <ID>UnusedParameter:ProgressScreen.kt$viewModel: BaseViewModel</ID>
    <ID>UnusedParameter:ProgressScreen.kt$viewModel: ProgressScreenViewModel?=null</ID>
    <ID>UnusedParameter:QuestionScreen.kt$questionIndex:Int</ID>
    <ID>UnusedParameter:QuestionScreenViewModel.kt$QuestionScreenViewModel$index: Int</ID>
    <ID>UnusedParameter:QuestionScreenViewModel.kt$QuestionScreenViewModel$selIndex: Int</ID>
    <ID>UnusedParameter:ReLoginScreen.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:RetryHelper.kt$RetryHelper$error: ErrorModel?</ID>
    <ID>UnusedParameter:RetryHelper.kt$RetryHelper$languageListDao: LanguageListDao</ID>
    <ID>UnusedParameter:ScoreComparisionScreen.kt$didiEntity: DidiEntity</ID>
    <ID>UnusedParameter:ScoreComparisionScreen.kt$exclusionResponse: String</ID>
    <ID>UnusedParameter:ScoreComparisionScreen.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:ServerErrorHandler.kt$ServerErrorHandler$method: String</ID>
    <ID>UnusedParameter:SettingScreen.kt$context: Context</ID>
    <ID>UnusedParameter:SettingScreen.kt$navController: NavController</ID>
    <ID>UnusedParameter:SettingViewModel.kt$SettingViewModel$cxt: Context</ID>
    <ID>UnusedParameter:SocialMappingActivity.kt$isOnline: Boolean</ID>
    <ID>UnusedParameter:SocialMappingActivity.kt$onItemclick: () -&gt; Unit</ID>
    <ID>UnusedParameter:SocialMappingActivity.kt$title: String</ID>
    <ID>UnusedParameter:StepCompetionScreen.kt$navController: NavController</ID>
    <ID>UnusedParameter:SurveyHeader.kt$currentQuestion: Int</ID>
    <ID>UnusedParameter:SurveyHeader.kt$questionCount: Int</ID>
    <ID>UnusedParameter:SurveySummaryViewModel.kt$SurveySummaryViewModel$stepId: Int</ID>
    <ID>UnusedParameter:SyncHelper.kt$SyncHelper$stepOneMutableString : MutableState&lt;String&gt;</ID>
    <ID>UnusedParameter:Theme.kt$darkTheme: Boolean = isSystemInDarkTheme()</ID>
    <ID>UnusedParameter:TransectWalkViewModel.kt$TransectWalkViewModel$stepStatus: StepStatus</ID>
    <ID>UnusedParameter:VillageScreen.kt$modifier: Modifier = Modifier.fillMaxSize()</ID>
    <ID>UnusedParameter:VillageSelectionRepository.kt$VillageSelectionRepository$prefRepo: PrefRepo</ID>
    <ID>UnusedParameter:VillageSelectionRepository.kt$VillageSelectionRepository$villageId: Int</ID>
    <ID>UnusedParameter:VillageSelectionViewModel.kt$VillageSelectionViewModel$context: Context</ID>
    <ID>UnusedParameter:VoEndorsementScreen.kt$navController: NavHostController</ID>
    <ID>UnusedParameter:VoEndorsementScreen.kt$viewModel: VoEndorsementScreenViewModel</ID>
    <ID>UnusedParameter:WealthRankingScreen.kt$villageId: Int</ID>
    <ID>UnusedParameter:WealthRankingViewModel.kt$WealthRankingViewModel$cardId: Int</ID>
    <ID>UnusedParameter:WealthRankingViewModel.kt$WealthRankingViewModel$isOnline: Boolean</ID>
    <ID>UnusedPrivateMember:AndroidDownloader.kt$AndroidDownloader$private fun getOutputDirectory(activity: MainActivity): File</ID>
    <ID>UnusedPrivateMember:BpcDidiListViewModel.kt$BpcDidiListViewModel$private fun updateStepStatusInVillage()</ID>
    <ID>UnusedPrivateMember:BugLogggingMechanismScreen.kt$@Preview(showBackground = true) @Composable private fun bugLoggingMechPreview()</ID>
    <ID>UnusedPrivateMember:ExportHelper.kt$ExportHelper$private suspend fun uploadFileToFirebase(context: Context, filePaths: List&lt;String&gt;)</ID>
    <ID>UnusedPrivateMember:NetworkModule.kt$NetworkModule$private fun getOkHttpBuilder(): OkHttpClient.Builder</ID>
    <ID>UnusedPrivateMember:PatSectionSummaryRepository.kt$PatSectionSummaryRepository$private fun getAllNumericAnswersForDidi(didiId: Int): List&lt;NumericAnswerEntity&gt;</ID>
    <ID>UnusedPrivateMember:ProgressScreenViewModel.kt$ProgressScreenViewModel$private fun checkAndUpdateCompletedStepsForVillage()</ID>
    <ID>UnusedPrivateMember:RetryHelper.kt$RetryHelper$private fun setLanuageDao(mLanguageListDao: LanguageListDao)</ID>
    <ID>UnusedPrivateMember:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$private fun isBPCDidiNeedToBeReplaced() : Boolean</ID>
    <ID>UnusedPrivateMember:Utils.kt$private fun getRealPathFromURI(contentURI: String, activity: Context): String?</ID>
    <ID>UnusedPrivateMember:VideDetailPlayerViewModel.kt$VideDetailPlayerViewModel$private fun getOutputDirectory(activity: MainActivity): File</ID>
    <ID>UnusedPrivateMember:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchDidiForCrp(prefRepo: PrefRepo, villageId: Int)</ID>
    <ID>UnusedPrivateMember:VillageSelectionRepository.kt$VillageSelectionRepository$private fun fetchPatSurveyFromServerForBpc(villageId: Int, prefRepo: PrefRepo)</ID>
    <ID>UnusedPrivateMember:VillageSelectionRepository.kt$VillageSelectionRepository$private fun preserveOldRecord(oldVillageList: List&lt;VillageEntity&gt;)</ID>
    <ID>UnusedPrivateMember:VillageSelectionRepository.kt$VillageSelectionRepository$private fun syncCrpData(prefRepo: PrefRepo, networkCallbackListener: NetworkCallbackListener)</ID>
    <ID>UnusedPrivateProperty:AddDidiViewModel.kt$AddDidiViewModel$val selectedTolaEntity = addDidiRepository.fetchSingleTolaFromServerId(selectedTola.value.first)</ID>
    <ID>UnusedPrivateProperty:AddTola.kt$val activity = LocalContext.current as Activity</ID>
    <ID>UnusedPrivateProperty:AddTola.kt$val activity = context as Activity</ID>
    <ID>UnusedPrivateProperty:AppConstants.kt$private val ExtendedFabIconPadding = 12.dp</ID>
    <ID>UnusedPrivateProperty:AppConstants.kt$private val ExtendedFabTextPadding = 20.dp</ID>
    <ID>UnusedPrivateProperty:AppConstants.kt$private val FabSize = 56.dp</ID>
    <ID>UnusedPrivateProperty:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$val awaitDiff = CoroutineScope(Dispatchers.IO + exceptionHandler).async { try { try { NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getStepsList request -&gt; village.id = ${village.id}" ) val response = apiService.getStepsList(village.id) NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getStepsList " + "response status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}" ) if (response.status.equals(SUCCESS, true)) { response.data?.let { if (it.stepList.isNotEmpty()) { it.stepList.forEach { steps -&gt; steps.villageId = village.id steps.isComplete = findCompleteValue(steps.status).ordinal if (steps.id == 40) { prefRepo.savePref( PREF_TRANSECT_WALK_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 41) { prefRepo.savePref( PREF_SOCIAL_MAPPING_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 46) { prefRepo.savePref( PREF_WEALTH_RANKING_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 43) { prefRepo.savePref( PREF_PAT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 44) { prefRepo.savePref( PREF_VO_ENDORSEMENT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } if (steps.id == 45) { prefRepo.savePref( PREF_BPC_PAT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } // if(steps.id == 44){ // prefRepo.savePref( // PREF_WEALTH_RANKING_COMPLETION_DATE, steps.localModifiedDate?: BLANK_STRING) // } } NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getStepsList " + "stepsListDao.insertAll(it.stepList) before" ) // stepsListDao.insertAll(it.stepList) stepsListDao.updateStepListForVillage(forceRefresh, village.id, it.stepList) NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getStepsList " + "stepsListDao.insertAll(it.stepList) after" ) val bpcStepId = it.stepList.sortedBy { stepEntity -&gt; stepEntity.orderNumber } .last().id if (it.stepList[it.stepList.map { it.id } .indexOf(bpcStepId)].status == StepStatus.NOT_STARTED.name ) stepsListDao.markStepAsCompleteOrInProgress( bpcStepId, StepStatus.INPROGRESS.ordinal, village.id ) } prefRepo.savePref( PREF_PROGRAM_NAME, it.programName ) } } else { val ex = ApiResponseFailException(response.message) /* if (!RetryHelper.retryApiList.contains(ApiType.STEP_LIST_API)) RetryHelper.retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id)*/ onCatchError(ex, ApiType.STEP_LIST_API) } } catch (ex: Exception) { /*if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.STEP_LIST_API)) RetryHelper.retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) }*/ onCatchError(ex, ApiType.STEP_LIST_API) networkCallbackListener.onFailed() } try { NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getCohortFromNetwork " + "request village.id = ${village.id}" ) val cohortResponse = apiService.getCohortFromNetwork(villageId = village.id) NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getCohortFromNetwork " + "cohortResponse status = ${cohortResponse.status}, message = ${cohortResponse.message}, data = ${cohortResponse.data.toString()}" ) if (cohortResponse.status.equals(SUCCESS, true)) { cohortResponse.data?.let {remoteTolaList-&gt; NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getCohortFromNetwork " + "tolaDao.insertAll(it) before" ) if (remoteTolaList.isNotEmpty()) { for (tola in remoteTolaList) { tola.serverId = tola.id } } // tolaDao.insertAll(it) tolaDao.updateTolaData(forceRefresh, village.id, remoteTolaList) NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getCohortFromNetwork " + "tolaDao.insertAll(it) after" ) } } else { val ex = ApiResponseFailException(cohortResponse.message) /*if (!RetryHelper.retryApiList.contains(ApiType.TOLA_LIST_API)) RetryHelper.retryApiList.add( ApiType.TOLA_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id)*/ onCatchError(ex, ApiType.TOLA_LIST_API) networkCallbackListener.onFailed() } } catch (ex: Exception) { /*if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.TOLA_LIST_API)) RetryHelper.retryApiList.add( ApiType.TOLA_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) }*/ onCatchError(ex, ApiType.TOLA_LIST_API) networkCallbackListener.onFailed() } try { NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getDidiForBpcFromNetwork " + "request village.id = ${village.id}" ) val didiResponse = apiService.getDidiForBpcFromNetwork(villageId = village.id) NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getDidiForBpcFromNetwork " + "didiResponse status = ${didiResponse.status}, message = ${didiResponse.message}, data = ${didiResponse.data.toString()}" ) if (didiResponse.status.equals(SUCCESS, true)) { didiResponse.data?.let { didiList -&gt; if (didiList.isNotEmpty()) { try { didiList.forEach { didi -&gt; var tolaName = BLANK_STRING var casteName = BLANK_STRING val singleTola = tolaDao.fetchSingleTola(didi.cohortId) val singleCaste = casteListDao.getCaste( didi.castId, prefRepo?.getAppLanguageId() ?: 2 ) singleTola?.let { tolaName = it.name } singleCaste?.let { casteName = it.casteName } // if (singleTola != null) { val wealthRanking = if (didi.beneficiaryProcessStatus?.map { it.name } ?.contains(StepType.WEALTH_RANKING.name) == true) didi.beneficiaryProcessStatus?.get( didi.beneficiaryProcessStatus!!.map { process -&gt; process.name } .indexOf(StepType.WEALTH_RANKING.name))?.status else WealthRank.NOT_RANKED.rank val patSurveyAcceptedRejected = if (didi.beneficiaryProcessStatus?.map { it.name } ?.contains(StepType.PAT_SURVEY.name) == true) didi.beneficiaryProcessStatus?.get( didi.beneficiaryProcessStatus!!.map { process -&gt; process.name } .indexOf(StepType.PAT_SURVEY.name))?.status else DIDI_REJECTED val voEndorsementStatus = if (didi.beneficiaryProcessStatus?.map { it.name } ?.contains(StepType.VO_ENDROSEMENT.name) == true) didi.beneficiaryProcessStatus!![didi.beneficiaryProcessStatus!!.map { process -&gt; process.name } .indexOf(StepType.VO_ENDROSEMENT.name)]?.let { DidiEndorsementStatus.toInt( it.status ) } else DidiEndorsementStatus.NOT_STARTED.ordinal /*didiDao.insertDidi( DidiEntity( id = didi.id, serverId = didi.id, name = didi.name, address = didi.address, guardianName = didi.guardianName, relationship = didi.relationship, castId = didi.castId, castName = casteName, cohortId = didi.cohortId, villageId = village.id, cohortName = tolaName, needsToPost = false, wealth_ranking = wealthRanking ?: BLANK_STRING, forVoEndorsement = if (patSurveyAcceptedRejected.equals( COMPLETED_STRING, true ) ) 1 else 0, voEndorsementStatus = voEndorsementStatus, needsToPostRanking = false, createdDate = didi.createdDate, modifiedDate = didi.modifiedDate, beneficiaryProcessStatus = didi.beneficiaryProcessStatus, shgFlag = SHGFlag.fromSting( intToString(didi.shgFlag) ?: SHGFlag.NOT_MARKED.name ).value, transactionId = "", localCreatedDate = didi.localCreatedDate, localModifiedDate = didi.localModifiedDate, score = didi.bpcScore ?: 0.0, comment = didi.bpcComment ?: BLANK_STRING, crpScore = didi.crpScore, crpComment = didi.crpComment, bpcScore = didi.bpcScore ?: 0.0, bpcComment = didi.bpcComment ?: BLANK_STRING, crpUploadedImage = didi.crpUploadedImage, needsToPostImage = false, rankingEdit = didi.rankingEdit, patEdit = didi.patEdit, voEndorsementEdit = didi.voEndorsementEdit, ableBodiedFlag = AbleBodiedFlag.fromSting( intToString(didi.ableBodiedFlag) ?: AbleBodiedFlag.NOT_MARKED.name ).value ) )*/ val didiEntity = DidiEntity( id = didi.id, serverId = didi.id, name = didi.name, address = didi.address, guardianName = didi.guardianName, relationship = didi.relationship, castId = didi.castId, castName = casteName, cohortId = didi.cohortId, villageId = village.id, cohortName = tolaName, needsToPost = false, wealth_ranking = wealthRanking ?: BLANK_STRING, forVoEndorsement = if (patSurveyAcceptedRejected.equals( COMPLETED_STRING, true ) ) 1 else 0, voEndorsementStatus = voEndorsementStatus, needsToPostRanking = false, createdDate = didi.createdDate, modifiedDate = didi.modifiedDate, beneficiaryProcessStatus = didi.beneficiaryProcessStatus, shgFlag = SHGFlag.fromSting( intToString(didi.shgFlag) ?: SHGFlag.NOT_MARKED.name ).value, transactionId = "", localCreatedDate = didi.localCreatedDate, localModifiedDate = didi.localModifiedDate, score = didi.bpcScore ?: 0.0, comment = didi.bpcComment ?: BLANK_STRING, crpScore = didi.crpScore, crpComment = didi.crpComment, bpcScore = didi.bpcScore ?: 0.0, bpcComment = didi.bpcComment ?: BLANK_STRING, crpUploadedImage = didi.crpUploadedImage, needsToPostImage = false, rankingEdit = didi.rankingEdit, patEdit = didi.patEdit, voEndorsementEdit = didi.voEndorsementEdit, ableBodiedFlag = AbleBodiedFlag.fromSting( intToString(didi.ableBodiedFlag) ?: AbleBodiedFlag.NOT_MARKED.name ).value ) didiDao.updateDidiAfterRefresh(forceRefresh, didi.id, didiEntity) // } if (!didi.crpUploadedImage.isNullOrEmpty()) { downloadAuthorizedImageItem( didi.id, didi.crpUploadedImage ?: BLANK_STRING, prefRepo = prefRepo ) } } } catch (ex: Exception) { onError( tag = "VillageSelectionViewModel", "Error : ${didiResponse.message}" ) networkCallbackListener.onFailed() } } } } else { val ex = ApiResponseFailException(didiResponse.message) /*if (!RetryHelper.retryApiList.contains(ApiType.BPC_DIDI_LIST_API)) RetryHelper.retryApiList.add( ApiType.BPC_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id)*/ onCatchError(ex, ApiType.BPC_DIDI_LIST_API) networkCallbackListener.onFailed() } } catch (ex: Exception) { /*if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.BPC_DIDI_LIST_API)) RetryHelper.retryApiList.add( ApiType.BPC_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) }*/ onCatchError(ex, ApiType.BPC_DIDI_LIST_API) networkCallbackListener.onFailed() } try { NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getDidisWithRankingFromNetwork " + "request -&gt; villageId = village.id, \"Category\", StepResultTypeRequest(\n" + " StepType.WEALTH_RANKING.name, ResultType.POOR.name" ) val poorDidiList = apiService.getDidisFromNetwork(village.id)/*apiService.getDidisWithRankingFromNetwork( villageId = village.id, "Category", StepResultTypeRequest( StepType.WEALTH_RANKING.name, ResultType.POOR.name ) )*/ NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getDidisWithRankingFromNetwork " + "poorDidiList status = ${poorDidiList.status}, message = ${poorDidiList.message}, data = ${poorDidiList.data.toString()}" ) if (poorDidiList.status.equals(SUCCESS, true)) { poorDidiList.data?.let { didiRank -&gt; if (didiRank.didiList.isNotEmpty()) { didiRank.didiList.forEach { poorDidis -&gt; poorDidis?.let { didi -&gt; var tolaName = BLANK_STRING var casteName = BLANK_STRING val singleTola = tolaDao.fetchSingleTola(didi.cohortId) val singleCaste = casteListDao.getCaste( didi.castId, prefRepo?.getAppLanguageId() ?: 2 ) singleTola?.let { tolaName = it.name } singleCaste?.let { casteName = it.casteName } // if (singleTola != null) { val wealthRanking = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.WEALTH_RANKING.name)) didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.WEALTH_RANKING.name)].status else WealthRank.NOT_RANKED.rank val patSurveyAcceptedRejected = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.PAT_SURVEY.name)) didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.PAT_SURVEY.name)].status else DIDI_REJECTED val voEndorsementStatus = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.VO_ENDROSEMENT.name)) DidiEndorsementStatus.toInt( didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.VO_ENDROSEMENT.name)].status) else DidiEndorsementStatus.NOT_STARTED.ordinal NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getDidisWithRankingFromNetwork " + "poorDidiListDao.insertPoorDidi() didiId = ${didi.id} before" ) /*poorDidiListDao.insertPoorDidi( PoorDidiEntity( id = didi.id, serverId = didi.id, name = didi.name, address = didi.address, guardianName = didi.guardianName, relationship = didi.relationship, castId = didi.castId, castName = casteName, cohortId = didi.cohortId, villageId = village.id, cohortName = tolaName, needsToPost = false, wealth_ranking = wealthRanking, forVoEndorsement = if (patSurveyAcceptedRejected.equals( COMPLETED_STRING, true ) ) 1 else 0, voEndorsementStatus = voEndorsementStatus, needsToPostRanking = false, createdDate = didi.createdDate, modifiedDate = didi.modifiedDate, beneficiaryProcessStatus = didi.beneficiaryProcessStatus, shgFlag = SHGFlag.fromSting( didi.shgFlag ?: SHGFlag.NOT_MARKED.name ).value, transactionId = "", localCreatedDate = didi.localCreatedDate, localModifiedDate = didi.localModifiedDate, score = didi.score, crpScore = didi.crpScore, crpComment = didi.crpComment, comment = didi.comment, crpUploadedImage = didi.crpUploadedImage, needsToPostImage = false, rankingEdit = didi.rankingEdit, patEdit = didi.patEdit ) )*/ val poorDidi = PoorDidiEntity( id = didi.id, serverId = didi.id, name = didi.name, address = didi.address, guardianName = didi.guardianName, relationship = didi.relationship, castId = didi.castId, castName = casteName, cohortId = didi.cohortId, villageId = village.id, cohortName = tolaName, needsToPost = false, wealth_ranking = wealthRanking, forVoEndorsement = if (patSurveyAcceptedRejected.equals( COMPLETED_STRING, true ) ) 1 else 0, voEndorsementStatus = voEndorsementStatus, needsToPostRanking = false, createdDate = didi.createdDate, modifiedDate = didi.modifiedDate, beneficiaryProcessStatus = didi.beneficiaryProcessStatus, shgFlag = SHGFlag.fromSting( didi.shgFlag ?: SHGFlag.NOT_MARKED.name ).value, transactionId = "", localCreatedDate = didi.localCreatedDate, localModifiedDate = didi.localModifiedDate, score = didi.score, crpScore = didi.crpScore, crpComment = didi.crpComment, comment = didi.comment, crpUploadedImage = didi.crpUploadedImage, needsToPostImage = false, rankingEdit = didi.rankingEdit, patEdit = didi.patEdit ) poorDidiListDao.updatePoorDidiAfterRefresh(forceRefresh, didi.id, poorDidi) NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc getDidisWithRankingFromNetwork " + "poorDidiListDao.insertPoorDidi() didiId = ${didi.id} after" ) } } } } } else { val ex = ApiResponseFailException( poorDidiList.message ?: "Poor Didi Ranking list error" ) /* if (!RetryHelper.retryApiList.contains(ApiType.BPC_POOR_DIDI_LIST_API)) RetryHelper.retryApiList.add( ApiType.BPC_POOR_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id)*/ onCatchError(ex, ApiType.BPC_POOR_DIDI_LIST_API) networkCallbackListener.onFailed() } } catch (ex: Exception) { /*if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.BPC_POOR_DIDI_LIST_API)) RetryHelper.retryApiList.add( ApiType.BPC_POOR_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) }*/ onCatchError(ex, ApiType.BPC_POOR_DIDI_LIST_API) networkCallbackListener.onFailed() } try { NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc fetchPATSurveyToServer " + "request -&gt; ${listOf(village.id)}" ) val answerApiResponse = apiService.fetchPATSurveyToServer( listOf(village.id) ) NudgeLogger.d( "VillageSelectionScreen", "fetchDataForBpc fetchPATSurveyToServer " + "response -&gt; status: ${answerApiResponse.status}" ) if (answerApiResponse.status.equals(SUCCESS, true)) { answerApiResponse.data?.let { val answerList: ArrayList&lt;SectionAnswerEntity&gt; = arrayListOf() val numAnswerList: ArrayList&lt;NumericAnswerEntity&gt; = arrayListOf() val didiIdList = mutableListOf&lt;Int&gt;() it.forEach { item -&gt; if (item.userType.equals(USER_BPC, true)) { didiIdList.add(item.beneficiaryId!!) didiDao.updatePATProgressStatus( patSurveyStatus = item.patSurveyStatus ?: 0, section1Status = item.section1Status ?: 0, section2Status = item.section2Status ?: 0, didiId = item.beneficiaryId ?: 0, shgFlag = item.shgFlag ?: -1, patExclusionStatus = item.patExclusionStatus ?: 0 ) if (item?.answers?.isNotEmpty() == true) { item?.answers?.forEach { answersItem -&gt; val quesDetails = questionListDao.getQuestionForLanguage( answersItem?.questionId ?: 0, prefRepo.getAppLanguageId() ?: 2 ) if (answersItem?.questionType?.equals( QuestionType.Numeric_Field.name ) == true ) { if ((prefRepo.getPref( PREF_KEY_TYPE_NAME, "" ) ?: "").equals( BPC_USER_TYPE, true ) ) { answerList.add( SectionAnswerEntity( id = 0, optionId = 0, didiId = item.beneficiaryId ?: 0, questionId = answersItem?.questionId ?: 0, villageId = item.villageId ?: 0, actionType = answersItem?.section ?: TYPE_EXCLUSION, weight = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.weight) else 0, summary = answersItem?.summary, optionValue = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.optionValue) else 0, totalAssetAmount = if (quesDetails?.questionFlag.equals( QUESTION_FLAG_WEIGHT ) ) answersItem?.totalWeight?.toDouble() else stringToDouble( formatRatio( answersItem?.ratio ?: DOUBLE_ZERO ) ), needsToPost = false, answerValue = (if (quesDetails?.questionFlag.equals( QUESTION_FLAG_WEIGHT ) ) answersItem?.totalWeight?.toDouble() else stringToDouble( formatRatio( answersItem?.ratio ?: DOUBLE_ZERO ) )).toString(), type = answersItem?.questionType ?: QuestionType.RadioButton.name, assetAmount = answersItem?.assetAmount ?: "0", questionFlag = quesDetails?.questionFlag ?: BLANK_STRING ) ) if (answersItem?.options?.isNotEmpty() == true) { answersItem?.options?.forEach { optionItem -&gt; numAnswerList.add( NumericAnswerEntity( id = 0, optionId = optionItem?.optionId ?: 0, questionId = answersItem?.questionId ?: 0, weight = optionItem?.weight ?: 0, didiId = item.beneficiaryId ?: 0, count = optionItem?.count ?: 0, optionValue = optionItem?.optionValue ?: 0 ) ) } } } } else { answerList.add( SectionAnswerEntity( id = 0, optionId = answersItem?.options?.get( 0 )?.optionId ?: 0, didiId = item.beneficiaryId ?: 0, questionId = answersItem?.questionId ?: 0, villageId = item.villageId ?: 0, actionType = answersItem?.section ?: TYPE_EXCLUSION, weight = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.weight) else 0, summary = answersItem?.summary, optionValue = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.optionValue) else 0, totalAssetAmount = if (quesDetails?.questionFlag.equals( QUESTION_FLAG_WEIGHT ) ) answersItem?.totalWeight?.toDouble() else stringToDouble( formatRatio( answersItem?.ratio ?: DOUBLE_ZERO ) ), needsToPost = false, answerValue = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.display ?: BLANK_STRING) else BLANK_STRING, type = answersItem?.questionType ?: QuestionType.RadioButton.name ) ) } } } } } if (answerList.isNotEmpty()) { // answerDao.insertAll(answerList) answerDao.updateAnswersAfterRefresh(forceRefresh, village.id, answerList) } if (numAnswerList.isNotEmpty()) { // numericAnswerDao.insertAll(numAnswerList) numericAnswerDao.updateNumericAnswersAfterRefresh(forceRefresh, didiIdList, numAnswerList) } } } else { val ex = ApiResponseFailException(answerApiResponse.message) /* if (!RetryHelper.retryApiList.contains(ApiType.PAT_BPC_SURVEY_SUMMARY)) RetryHelper.retryApiList.add( ApiType.PAT_BPC_SURVEY_SUMMARY ) if (!RetryHelper.stepListApiVillageId.contains(village.id)) RetryHelper.stepListApiVillageId.add( village.id ) */ onCatchError(ex, ApiType.PAT_BPC_SURVEY_SUMMARY) networkCallbackListener.onFailed() } } catch (ex: Exception) { /*if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.PAT_BPC_SURVEY_SUMMARY)) RetryHelper.retryApiList.add( ApiType.PAT_BPC_SURVEY_SUMMARY ) if (!RetryHelper.stepListApiVillageId.contains(village.id)) RetryHelper.stepListApiVillageId.add( village.id ) }*/ onCatchError(ex, ApiType.PAT_BPC_SURVEY_SUMMARY) networkCallbackListener.onFailed() } prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + village.id, true) prefRepo.savePref(PREF_BPC_DIDI_LIST_SYNCED_FOR_VILLAGE_ + village.id, true) } catch (ex: Exception) { NudgeLogger.e( "VillageSelectionViewModel", "fetchDataForBpc -&gt; onCatchError", ex ) onCatchError(ex, ApiType.FETCH_ALL_DATA) networkCallbackListener.onFailed() } finally { checkPendingDidiForVerification(prefRepo.getSelectedVillage().id, prefRepo) prefRepo.savePref(LAST_UPDATE_TIME, System.currentTimeMillis()) withContext(Dispatchers.Main) { delay(250) } } }.await()</ID>
    <ID>UnusedPrivateProperty:BpcAddMoreDidiScreen.kt$val coroutineScope = rememberCoroutineScope()</ID>
    <ID>UnusedPrivateProperty:BpcAddMoreDidiViewModel.kt$BpcAddMoreDidiViewModel$private var _markedNotAvailable = MutableStateFlow(mutableListOf&lt;Int&gt;())</ID>
    <ID>UnusedPrivateProperty:BpcPrgressScreen.kt$val dividerMargins = 32.dp</ID>
    <ID>UnusedPrivateProperty:BpcPrgressScreen.kt$val scope = rememberCoroutineScope()</ID>
    <ID>UnusedPrivateProperty:BpcPrgressScreen.kt$val screenHeight = configuration.screenHeightDp</ID>
    <ID>UnusedPrivateProperty:BpcPrgressScreen.kt$val villages by bpcProgreesScreenViewModel.villageList.collectAsState()</ID>
    <ID>UnusedPrivateProperty:BugLogggingMechanismScreen.kt$var endPadding by remember { mutableStateOf(16.dp) }</ID>
    <ID>UnusedPrivateProperty:BugLogggingMechanismScreen.kt$var startPadding by remember { mutableStateOf(16.dp) }</ID>
    <ID>UnusedPrivateProperty:BugLogggingMechanismScreen.kt$var topPadding by remember { mutableStateOf(5.dp) }</ID>
    <ID>UnusedPrivateProperty:CurlLoggingInterceptor.kt$CurlLoggingInterceptor$val bodySize = if (contentLength != -1L) "$contentLength-byte" else "unknown-length"</ID>
    <ID>UnusedPrivateProperty:CustomFloatButton.kt$private val ExtendedFabSize = 48.dp</ID>
    <ID>UnusedPrivateProperty:DataDumpRequestParts.kt$DataDumpRequestParts.Companion$private val TAG = DataDumpRequestParts::class.java.simpleName</ID>
    <ID>UnusedPrivateProperty:DataDumpRequestParts.kt$DataDumpRequestParts.Companion$val dataDumpList = arrayListOf&lt;MultipartBody.Part&gt;()</ID>
    <ID>UnusedPrivateProperty:DowloadCompleteReceiver.kt$DownloadCompleteReceiver$private lateinit var downloadManager: DownloadManager</ID>
    <ID>UnusedPrivateProperty:DropDownWithTitle.kt$val showLoader = remember { mutableStateOf(false) }</ID>
    <ID>UnusedPrivateProperty:FinalStepCompletion.kt$val animationOver = remember { mutableStateOf(false) }</ID>
    <ID>UnusedPrivateProperty:FormPictureScreen.kt$val arrowRotationDegree by transition.animateFloat({ tween(durationMillis = EXPANSTION_TRANSITION_DURATION) }, label = "rotationDegreeTransition") { if (it) 0f else -90f }</ID>
    <ID>UnusedPrivateProperty:FormPictureScreen.kt$val imageToBeReplaced = formPictureScreenViewModel.formCImageList.value["Page_${index + 1}"]</ID>
    <ID>UnusedPrivateProperty:FormPictureScreen.kt$val screenHeight = LocalConfiguration.current.screenHeightDp</ID>
    <ID>UnusedPrivateProperty:FormPictureScreenViewModel.kt$FormPictureScreenViewModel$val pageKey = getFormPathKey(File(it.value).nameWithoutExtension)</ID>
    <ID>UnusedPrivateProperty:HomeScreen.kt$val stepsNavController = rememberNavController()</ID>
    <ID>UnusedPrivateProperty:ImageViewer.kt$val coroutineScope = rememberCoroutineScope()</ID>
    <ID>UnusedPrivateProperty:ImageViewer.kt$val nextButtonVisible = remember { derivedStateOf { pagerState.currentPage &lt; 4 // total pages are 5 } }</ID>
    <ID>UnusedPrivateProperty:ImageViewer.kt$val prevButtonVisible = remember { derivedStateOf { pagerState.currentPage &gt; 0 } }</ID>
    <ID>UnusedPrivateProperty:ImageViewer.kt$val scale = remember { mutableStateOf(1f) }</ID>
    <ID>UnusedPrivateProperty:MainActivity.kt$MainActivity$val onlineStatus = remember { mutableStateOf(false) }</ID>
    <ID>UnusedPrivateProperty:NetworkModule.kt$NetworkModule$val cache = Cache(application.cacheDir, 10 * 1024 * 1024) // 10 MB</ID>
    <ID>UnusedPrivateProperty:PatDidiSummaryScreen.kt$val permissionsState = rememberMultiplePermissionsState( permissions = listOf( Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE ) )</ID>
    <ID>UnusedPrivateProperty:PdfUtils.kt$PdfUtils$private val titleTextProperties = getTitleTextProperties()</ID>
    <ID>UnusedPrivateProperty:PdfViewer.kt$val lazyScrollState = rememberLazyListState()</ID>
    <ID>UnusedPrivateProperty:PdfViewer.kt$val zoomState = rememberZoomState()</ID>
    <ID>UnusedPrivateProperty:ResponseHandler.kt$ResponseHandler$private var mCall: Call&lt;T&gt;? = null</ID>
    <ID>UnusedPrivateProperty:ScoreComparisionScreen.kt$val screenHeight = configuration.screenHeightDp</ID>
    <ID>UnusedPrivateProperty:SingleQuestionScreen.kt$val selQuesIndex = remember { mutableStateOf(0) }</ID>
    <ID>UnusedPrivateProperty:SocialMappingDidiListScreen.kt$val showDialog = remember { mutableStateOf(false) }</ID>
    <ID>UnusedPrivateProperty:SplashScreen.kt$val scope = rememberCoroutineScope()</ID>
    <ID>UnusedPrivateProperty:SurveySummaryViewModel.kt$SurveySummaryViewModel$val updateScoreResponse = repository.updateDidiScore(scoreDidiList)</ID>
    <ID>UnusedPrivateProperty:Theme.kt$//To be changes after consulting with Design team. private val DarkColorPalette = darkColors( primary = Color.White, primaryVariant = Color.White, secondary = Color.White )</ID>
    <ID>UnusedPrivateProperty:TransetWalkScreen.kt$val isTolaAdded = remember { mutableStateOf(0) }</ID>
    <ID>UnusedPrivateProperty:TransetWalkScreen.kt$val networkError = viewModel.networkErrorMessage.value</ID>
    <ID>UnusedPrivateProperty:TransetWalkScreen.kt$var mEditedTola:TolaEntity?=null</ID>
    <ID>UnusedPrivateProperty:VideoListScreen.kt$val isDownloaded by remember { mutableStateOf(videoItem.isDownload) }</ID>
    <ID>UnusedPrivateProperty:VillageSelectionRepository.kt$VillageSelectionRepository$val awaitDeff = CoroutineScope(Dispatchers.IO).async { try { //Fetch PAT Question fetchQuestions(prefRepo) val villageList = villageListDao.getAllVillages(prefRepo.getAppLanguageId() ?: 2) val villageIdList: ArrayList&lt;Int&gt; = arrayListOf() villageList.forEach { village -&gt; villageIdList.add(village.id) //Fetch Step List Data try { NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList request -&gt; village.id = ${village.id}") val response = apiService.getStepsList(village.id) NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "response status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}") if (response.status.equals(SUCCESS, true)) { response.data?.let { it -&gt; if (it.stepList.isNotEmpty()) { it.stepList.forEach { steps -&gt; steps.villageId = village.id /*steps.isComplete = findCompleteValue(steps.status).ordinal*/ if(steps.id == 40){ prefRepo.savePref( PREF_TRANSECT_WALK_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 41){ prefRepo.savePref( PREF_SOCIAL_MAPPING_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 46){ prefRepo.savePref( PREF_WEALTH_RANKING_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 43){ prefRepo.savePref( PREF_PAT_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 44){ prefRepo.savePref( PREF_VO_ENDORSEMENT_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if (steps.id == 45) { prefRepo.savePref( PREF_BPC_PAT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } } val localStepListForVillage = stepsListDao.getAllStepsForVillage(village.id) NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "stepsListDao.insertAll(it.stepList) before") val updatedStepList = mutableListOf&lt;StepListEntity&gt;() localStepListForVillage.forEach { step -&gt; updatedStepList.add(step.getUpdatedStep(it.stepList[it.stepList.map { it.id }.indexOf(step.id)])) } if (localStepListForVillage.size != it.stepList.size) { if (localStepListForVillage.size &lt; it.stepList.size) { val tempStepList = mutableListOf&lt;StepListEntity&gt;() tempStepList.addAll(it.stepList) tempStepList.sortedBy { it.orderNumber } localStepListForVillage.forEach { localStep -&gt; if (it.stepList.map { remoteStep -&gt; remoteStep.id }.contains(localStep.id)) { tempStepList.remove(it.stepList.sortedBy { it.orderNumber }[it.stepList.map { it.id }.indexOf(localStep.id)]) } } updatedStepList.addAll(tempStepList) } else { val tempStepList = mutableListOf&lt;StepListEntity&gt;() tempStepList.addAll(localStepListForVillage) tempStepList.sortedBy { it.orderNumber } it.stepList.forEach { remoteStep -&gt; if (localStepListForVillage.map { localStep -&gt; remoteStep.id }.contains(remoteStep.id)) { tempStepList.remove(localStepListForVillage.sortedBy { it.orderNumber }[localStepListForVillage.map { it.id }.indexOf(remoteStep.id)]) } } updatedStepList.addAll(tempStepList) } } if (updatedStepList.isNotEmpty()) { stepsListDao.deleteAllStepsForVillage(village.id) delay(100) stepsListDao.insertAll(updatedStepList) } NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "stepsListDao.insertAll(it.stepList) after") } prefRepo.savePref( PREF_PROGRAM_NAME, it.programName ) } } else { val ex = ApiResponseFailException(response.message) if (!RetryHelper.retryApiList.contains(ApiType.STEP_LIST_API)) RetryHelper.retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) onCatchError(ex, ApiType.STEP_LIST_API) } } catch (ex: Exception) { if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.STEP_LIST_API)) RetryHelper.retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) } onCatchError(ex, ApiType.STEP_LIST_API) } //Fetch BPC Summary Data try { NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getBpcSummary " + "village.id = ${village.id}") val bpcSummaryResponse = apiService.getBpcSummary(villageId = village.id) NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "bpcSummaryResponse status = ${bpcSummaryResponse.status}, message = ${bpcSummaryResponse.message}, data = ${bpcSummaryResponse.data.toString()}") if (bpcSummaryResponse.status.equals(SUCCESS, true)) { bpcSummaryDao.deleteForVillage(villageId = village.id) bpcSummaryResponse.data?.let { val bpcSummary = BpcSummaryEntity( cohortCount = it.cohortCount, mobilisedCount = it.mobilisedCount, poorDidiCount = it.poorDidiCount, sentVoEndorsementCount = it.sentVoEndorsementCount, voEndorsedCount = it.voEndorsedCount, villageId = village.id ) NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "bpcSummaryDao.insert(bpcSummary) before") bpcSummaryDao.insert(bpcSummary) NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "bpcSummaryDao.insert(bpcSummary) after") } } else { NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "bpcSummaryDao.insert(BpcSummaryEntity(0, 0, 0, 0, 0, 0, villageId = village.id))") val existingSummaryDataForVillage = bpcSummaryDao.getBpcSummaryForVillage(villageId = village.id) if (existingSummaryDataForVillage != null &amp;&amp; !existingSummaryDataForVillage.isSummaryEmpty()) bpcSummaryDao.insert(BpcSummaryEntity.getEmptySummaryForVillage(village.id)) val ex = ApiResponseFailException(bpcSummaryResponse.message) if (!RetryHelper.retryApiList.contains(ApiType.BPC_SUMMARY_API)) RetryHelper.retryApiList.add( ApiType.BPC_SUMMARY_API ) RetryHelper.stepListApiVillageId.add(village.id) onCatchError(ex, ApiType.BPC_SUMMARY_API) } } catch (ex: Exception) { val existingSummaryDataForVillage = bpcSummaryDao.getBpcSummaryForVillage(villageId = village.id) if (existingSummaryDataForVillage != null &amp;&amp; !existingSummaryDataForVillage.isSummaryEmpty()) bpcSummaryDao.insert(BpcSummaryEntity.getEmptySummaryForVillage(village.id)) if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.BPC_SUMMARY_API)) RetryHelper.retryApiList.add( ApiType.BPC_SUMMARY_API ) RetryHelper.stepListApiVillageId.add(village.id) } onCatchError(ex, ApiType.BPC_SUMMARY_API) } //Fetch Cohort/Tola Data FetchTolaForBpc(village.id) } //Sync and fetch Didi and other data syncAndFetchDidiForBpc(prefRepo, object : NetworkCallbackListener { override fun onSuccess() { villageList.forEach { village -&gt; fetchDidiForBpc(village.id, prefRepo) fetchPoorDidisForBpc(village.id, prefRepo) } } override fun onFailed() { networkCallbackListener.onFailed() } }) } catch (ex: Exception) { NudgeLogger.e( "VillageSelectionRepository", "refreshBpcData -&gt; onCatchError", ex ) onCatchError(ex, ApiType.FETCH_ALL_DATA) } finally { prefRepo.savePref(LAST_UPDATE_TIME, System.currentTimeMillis()) withContext(Dispatchers.Main) { delay(250) // NudgeLogger.d("VillageSelectionRepository", "fetchDataForBpc finally -&gt; viewModel.showLoader.value = false") // showLoader.value = false } } }.await()</ID>
    <ID>UnusedPrivateProperty:VillageSelectionRepository.kt$VillageSelectionRepository$val awaitDeff = CoroutineScope(Dispatchers.IO).async { try { //Fetch PAT Question fetchQuestions(prefRepo) val villageList = villageListDao.getAllVillages(prefRepo.getAppLanguageId() ?: 2) val villageIdList: ArrayList&lt;Int&gt; = arrayListOf() villageList.forEach { village -&gt; villageIdList.add(village.id) //Fetch Step List Data try { NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList request -&gt; village.id = ${village.id}") val response = apiService.getStepsList(village.id) NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "response status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}") if (response.status.equals(SUCCESS, true)) { response.data?.let { it -&gt; if (it.stepList.isNotEmpty()) { it.stepList.forEach { steps -&gt; steps.villageId = village.id /*steps.isComplete = findCompleteValue(steps.status).ordinal*/ if(steps.id == 40){ prefRepo.savePref( PREF_TRANSECT_WALK_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 41){ prefRepo.savePref( PREF_SOCIAL_MAPPING_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 46){ prefRepo.savePref( PREF_WEALTH_RANKING_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 43){ prefRepo.savePref( PREF_PAT_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 44){ prefRepo.savePref( PREF_VO_ENDORSEMENT_COMPLETION_DATE_ +village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if (steps.id == 45) { prefRepo.savePref( PREF_BPC_PAT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } } val localStepListForVillage = stepsListDao.getAllStepsForVillage(village.id) NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "stepsListDao.insertAll(it.stepList) before") val updatedStepList = mutableListOf&lt;StepListEntity&gt;() localStepListForVillage.forEach { step -&gt; updatedStepList.add(step.getUpdatedStep(it.stepList[it.stepList.map { it.id }.indexOf(step.id)])) } if (localStepListForVillage.size != it.stepList.size) { if (localStepListForVillage.size &lt; it.stepList.size) { val tempStepList = mutableListOf&lt;StepListEntity&gt;() tempStepList.addAll(it.stepList) tempStepList.sortedBy { it.orderNumber } localStepListForVillage.forEach { localStep -&gt; if (it.stepList.map { remoteStep -&gt; remoteStep.id }.contains(localStep.id)) { tempStepList.remove(it.stepList.sortedBy { it.orderNumber }[it.stepList.map { it.id }.indexOf(localStep.id)]) } } updatedStepList.addAll(tempStepList) } else { val tempStepList = mutableListOf&lt;StepListEntity&gt;() tempStepList.addAll(localStepListForVillage) tempStepList.sortedBy { it.orderNumber } it.stepList.forEach { remoteStep -&gt; if (localStepListForVillage.map { localStep -&gt; remoteStep.id }.contains(remoteStep.id)) { tempStepList.remove(localStepListForVillage.sortedBy { it.orderNumber }[localStepListForVillage.map { it.id }.indexOf(remoteStep.id)]) } } updatedStepList.addAll(tempStepList) } } if (updatedStepList.isNotEmpty()) { stepsListDao.deleteAllStepsForVillage(village.id) delay(100) stepsListDao.insertAll(updatedStepList) } NudgeLogger.d("VillageSelectionRepository", "refreshBpcData getStepsList " + "stepsListDao.insertAll(it.stepList) after") } prefRepo.savePref( PREF_PROGRAM_NAME, it.programName ) } } else { val ex = ApiResponseFailException(response.message) if (!RetryHelper.retryApiList.contains(ApiType.STEP_LIST_API)) RetryHelper.retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) onCatchError(ex, ApiType.STEP_LIST_API) } } catch (ex: Exception) { if (ex !is JsonSyntaxException) { if (!RetryHelper.retryApiList.contains(ApiType.STEP_LIST_API)) RetryHelper.retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) } onCatchError(ex, ApiType.STEP_LIST_API) } } // //Fetch Cohort/Tola Data // syncCrpData(prefRepo = prefRepo, object : NetworkCallbackListener { // override fun onSuccess() { // //fetch all data // villageList.forEach { village -&gt; // fetchDidiForCrp(prefRepo, village.id) // } // } // // override fun onFailed() { // networkCallbackListener.onFailed() // } // }) } catch (ex: Exception) { NudgeLogger.e( "VillageSelectionRepository", "refreshCrpData -&gt; onCatchError", ex ) onCatchError(ex, ApiType.FETCH_ALL_DATA) } finally { prefRepo.savePref(LAST_UPDATE_TIME, System.currentTimeMillis()) withContext(Dispatchers.Main) { delay(250) // NudgeLogger.d("VillageSelectionRepository", "fetchDataForBpc finally -&gt; viewModel.showLoader.value = false") // showLoader.value = false } } }.await()</ID>
    <ID>UnusedPrivateProperty:VillageSelectionViewModel.kt$VillageSelectionViewModel$private var checkStatusCount = 0</ID>
    <ID>UnusedPrivateProperty:VillageSelectionViewModel.kt$VillageSelectionViewModel$val awaitDeff= CoroutineScope(Dispatchers.IO).async { try { val villageList = villageListDao.getAllVillages(prefRepo.getAppLanguageId() ?: 2) val villageIdList: ArrayList&lt;Int&gt; = arrayListOf() val localAnswerList = answerDao.getAllAnswer() if (localAnswerList.isNotEmpty()) { answerDao.deleteAnswerTable() } val localNumAnswerList = numericAnswerDao.getAllNumericAnswers() if (localNumAnswerList.isNotEmpty()) { numericAnswerDao.deleteNumericTable() } villageList.forEach { village -&gt; villageIdList.add(village.id) stateId.value = village.stateId RetryHelper.stateId = stateId.value try { NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList request -&gt; village.id = ${village.id}") val response = apiService.getStepsList(village.id) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList " + "response status = ${response.status}, message = ${response.message}, data = ${response.data.toString()}") if (response.status.equals(SUCCESS, true)) { response.data?.let { if (it.stepList.isNotEmpty()) { it.stepList.forEach { steps -&gt; steps.villageId = village.id steps.isComplete = findCompleteValue(steps.status).ordinal if(steps.id == 40){ prefRepo.savePref( PREF_TRANSECT_WALK_COMPLETION_DATE_+village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 41){ prefRepo.savePref( PREF_SOCIAL_MAPPING_COMPLETION_DATE_+village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 46){ prefRepo.savePref( PREF_WEALTH_RANKING_COMPLETION_DATE_+village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 43){ prefRepo.savePref( PREF_PAT_COMPLETION_DATE_+village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if(steps.id == 44){ prefRepo.savePref( PREF_VO_ENDORSEMENT_COMPLETION_DATE_+village.id, steps.localModifiedDate?: System.currentTimeMillis()) } if (steps.id == 45) { prefRepo.savePref( PREF_BPC_PAT_COMPLETION_DATE_ + village.id, steps.localModifiedDate ?: System.currentTimeMillis() ) } // if(steps.id == 44){ // prefRepo.savePref( // PREF_WEALTH_RANKING_COMPLETION_DATE, steps.localModifiedDate?: BLANK_STRING) // } } NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList " + "stepsListDao.insertAll(it.stepList) before") stepsListDao.insertAll(it.stepList) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList " + "stepsListDao.insertAll(it.stepList) after") val bpcStepId = it.stepList.sortedBy { stepEntity -&gt; stepEntity.orderNumber } .last().id if (it.stepList[it.stepList.map { it.id } .indexOf(bpcStepId)].status != StepStatus.COMPLETED.name) stepsListDao.markStepAsCompleteOrInProgress( bpcStepId, StepStatus.INPROGRESS.ordinal, village.id ) } prefRepo.savePref( PREF_PROGRAM_NAME, it.programName ) } } else { val ex = ApiResponseFailException(response.message) if (!retryApiList.contains(ApiType.STEP_LIST_API)) retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) onCatchError(ex, ApiType.STEP_LIST_API) } } catch (ex: Exception) { if (ex !is JsonSyntaxException) { if (!retryApiList.contains(ApiType.STEP_LIST_API)) retryApiList.add( ApiType.STEP_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) } onCatchError(ex, ApiType.STEP_LIST_API) } try { NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getBpcSummary " + "village.id = ${village.id}") val bpcSummaryResponse = apiService.getBpcSummary(villageId = village.id) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList " + "bpcSummaryResponse status = ${bpcSummaryResponse.status}, message = ${bpcSummaryResponse.message}, data = ${bpcSummaryResponse.data.toString()}") if (bpcSummaryResponse.status.equals(SUCCESS, true)) { bpcSummaryResponse.data?.let { val bpcSummary = BpcSummaryEntity( cohortCount = it.cohortCount, mobilisedCount = it.mobilisedCount, poorDidiCount = it.poorDidiCount, sentVoEndorsementCount = it.sentVoEndorsementCount, voEndorsedCount = it.voEndorsedCount, villageId = village.id ) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList " + "bpcSummaryDao.insert(bpcSummary) before") bpcSummaryDao.insert(bpcSummary) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList " + "bpcSummaryDao.insert(bpcSummary) after") } } else { NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getStepsList " + "bpcSummaryDao.insert(BpcSummaryEntity(0, 0, 0, 0, 0, 0, villageId = village.id))") bpcSummaryDao.insert( BpcSummaryEntity( 0, 0, 0, 0, 0, 0, villageId = village.id ) ) val ex = ApiResponseFailException(bpcSummaryResponse.message) if (!retryApiList.contains(ApiType.BPC_SUMMARY_API)) retryApiList.add( ApiType.BPC_SUMMARY_API ) RetryHelper.stepListApiVillageId.add(village.id) onCatchError(ex, ApiType.BPC_SUMMARY_API) } } catch (ex: Exception) { bpcSummaryDao.insert( BpcSummaryEntity( 0, 0, 0, 0, 0, 0, villageId = village.id ) ) if (ex !is JsonSyntaxException) { if (!retryApiList.contains(ApiType.BPC_SUMMARY_API)) retryApiList.add( ApiType.BPC_SUMMARY_API ) RetryHelper.stepListApiVillageId.add(village.id) } onCatchError(ex, ApiType.BPC_SUMMARY_API) } try { NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getCohortFromNetwork " + "request village.id = ${village.id}") val cohortResponse = apiService.getCohortFromNetwork(villageId = village.id) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getCohortFromNetwork " + "cohortResponse status = ${cohortResponse.status}, message = ${cohortResponse.message}, data = ${cohortResponse.data.toString()}") if (cohortResponse.status.equals(SUCCESS, true)) { cohortResponse.data?.let { NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getCohortFromNetwork " + "tolaDao.insertAll(it) before") tolaDao.insertAll(it) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getCohortFromNetwork " + "tolaDao.insertAll(it) after") } } else { val ex = ApiResponseFailException(cohortResponse.message) if (!retryApiList.contains(ApiType.TOLA_LIST_API)) retryApiList.add( ApiType.TOLA_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) onCatchError(ex, ApiType.TOLA_LIST_API) } } catch (ex: Exception) { if (ex !is JsonSyntaxException) { if (!retryApiList.contains(ApiType.TOLA_LIST_API)) retryApiList.add( ApiType.TOLA_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) } onCatchError(ex, ApiType.TOLA_LIST_API) } try { NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getDidiForBpcFromNetwork " + "request village.id = ${village.id}") val didiResponse = apiService.getDidiForBpcFromNetwork(villageId = village.id) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getDidiForBpcFromNetwork " + "didiResponse status = ${didiResponse.status}, message = ${didiResponse.message}, data = ${didiResponse.data.toString()}") if (didiResponse.status.equals(SUCCESS, true)) { didiResponse.data?.let { didiList -&gt; if (didiList.isNotEmpty()) { try { didiList.forEach { didi -&gt; var tolaName = BLANK_STRING var casteName = BLANK_STRING val singleTola = tolaDao.fetchSingleTola(didi.cohortId) val singleCaste = casteListDao.getCaste(didi.castId, prefRepo?.getAppLanguageId()?:2) singleTola?.let { tolaName = it.name } singleCaste?.let { casteName = it.casteName } // if (singleTola != null) { val wealthRanking = if (didi.beneficiaryProcessStatus?.map { it.name } ?.contains(StepType.WEALTH_RANKING.name) == true) didi.beneficiaryProcessStatus?.get( didi.beneficiaryProcessStatus!!.map { process -&gt; process.name } .indexOf(StepType.WEALTH_RANKING.name))?.status else WealthRank.NOT_RANKED.rank val patSurveyAcceptedRejected = if (didi.beneficiaryProcessStatus?.map { it.name } ?.contains(StepType.PAT_SURVEY.name) == true) didi.beneficiaryProcessStatus?.get( didi.beneficiaryProcessStatus!!.map { process -&gt; process.name } .indexOf(StepType.PAT_SURVEY.name))?.status else DIDI_REJECTED val voEndorsementStatus = if (didi.beneficiaryProcessStatus?.map { it.name } ?.contains(StepType.VO_ENDROSEMENT.name) == true) didi.beneficiaryProcessStatus!![didi.beneficiaryProcessStatus!!.map { process -&gt; process.name } .indexOf(StepType.VO_ENDROSEMENT.name)]?.let { DidiEndorsementStatus.toInt( it.status) } else DidiEndorsementStatus.NOT_STARTED.ordinal didiDao.insertDidi( DidiEntity( id = didi.id, serverId = didi.id, name = didi.name, address = didi.address, guardianName = didi.guardianName, relationship = didi.relationship, castId = didi.castId, castName = casteName, cohortId = didi.cohortId, villageId = village.id, cohortName = tolaName, needsToPost = false, wealth_ranking = wealthRanking?: BLANK_STRING, forVoEndorsement = if (patSurveyAcceptedRejected.equals( COMPLETED_STRING, true ) ) 1 else 0, voEndorsementStatus = voEndorsementStatus, needsToPostRanking = false, createdDate = didi.createdDate, modifiedDate = didi.modifiedDate, beneficiaryProcessStatus = didi.beneficiaryProcessStatus, shgFlag = SHGFlag.fromSting(intToString(didi.shgFlag)?: SHGFlag.NOT_MARKED.name).value, transactionId = "", localCreatedDate = didi.localCreatedDate, localModifiedDate = didi.localModifiedDate, score = didi.bpcScore ?: 0.0, comment = didi.bpcComment ?: BLANK_STRING, crpScore = didi.crpScore, crpComment = didi.crpComment, bpcScore = didi.bpcScore ?: 0.0, bpcComment = didi.bpcComment ?: BLANK_STRING, crpUploadedImage = didi.crpUploadedImage, needsToPostImage = false, rankingEdit = didi.rankingEdit, patEdit = didi.patEdit, voEndorsementEdit = didi.voEndorsementEdit, ableBodiedFlag = AbleBodiedFlag.fromSting(intToString(didi.ableBodiedFlag) ?: AbleBodiedFlag.NOT_MARKED.name).value ) ) // } if(!didi.crpUploadedImage.isNullOrEmpty()){ downloadAuthorizedImageItem(didi.id,didi.crpUploadedImage?: BLANK_STRING, prefRepo = prefRepo ) } } } catch (ex: Exception) { onError( tag = "VillageSelectionViewModel", "Error : ${didiResponse.message}" ) } } } } else { val ex = ApiResponseFailException(didiResponse.message) if (!retryApiList.contains(ApiType.BPC_DIDI_LIST_API)) retryApiList.add( ApiType.BPC_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) onCatchError(ex, ApiType.BPC_DIDI_LIST_API) } } catch (ex: Exception) { if (ex !is JsonSyntaxException) { if (!retryApiList.contains(ApiType.BPC_DIDI_LIST_API)) retryApiList.add( ApiType.BPC_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) } onCatchError(ex, ApiType.BPC_DIDI_LIST_API) } try { NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getDidisWithRankingFromNetwork " + "request -&gt; villageId = village.id, \"Category\", StepResultTypeRequest(\n" + " StepType.WEALTH_RANKING.name, ResultType.POOR.name") val poorDidiList = apiService.getDidisFromNetwork(village.id)/*apiService.getDidisWithRankingFromNetwork( villageId = village.id, "Category", StepResultTypeRequest( StepType.WEALTH_RANKING.name, ResultType.POOR.name ) )*/ NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getDidisWithRankingFromNetwork " + "poorDidiList status = ${poorDidiList.status}, message = ${poorDidiList.message}, data = ${poorDidiList.data.toString()}") if (poorDidiList.status.equals(SUCCESS, true)) { poorDidiList.data?.let { didiRank -&gt; if (didiRank.didiList.isNotEmpty()) { didiRank.didiList.forEach { poorDidis -&gt; poorDidis?.let { didi -&gt; var tolaName = BLANK_STRING var casteName = BLANK_STRING val singleTola = tolaDao.fetchSingleTola(didi.cohortId) val singleCaste = casteListDao.getCaste(didi.castId, prefRepo?.getAppLanguageId()?:2) singleTola?.let { tolaName = it.name } singleCaste?.let { casteName = it.casteName } // if (singleTola != null) { val wealthRanking = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.WEALTH_RANKING.name)) didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.WEALTH_RANKING.name)].status else WealthRank.NOT_RANKED.rank val patSurveyAcceptedRejected = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.PAT_SURVEY.name)) didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.PAT_SURVEY.name)].status else DIDI_REJECTED val voEndorsementStatus = if (didi.beneficiaryProcessStatus.map { it.name } .contains(StepType.VO_ENDROSEMENT.name)) DidiEndorsementStatus.toInt( didi.beneficiaryProcessStatus[didi.beneficiaryProcessStatus.map { process -&gt; process.name } .indexOf(StepType.VO_ENDROSEMENT.name)].status) else DidiEndorsementStatus.NOT_STARTED.ordinal NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getDidisWithRankingFromNetwork " + "poorDidiListDao.insertPoorDidi() didiId = ${didi.id} before") poorDidiListDao.insertPoorDidi( PoorDidiEntity( id = didi.id, serverId = didi.id, name = didi.name, address = didi.address, guardianName = didi.guardianName, relationship = didi.relationship, castId = didi.castId, castName = casteName, cohortId = didi.cohortId, villageId = village.id, cohortName = tolaName, needsToPost = false, wealth_ranking = wealthRanking, forVoEndorsement = if (patSurveyAcceptedRejected.equals( COMPLETED_STRING, true ) ) 1 else 0, voEndorsementStatus = voEndorsementStatus, needsToPostRanking = false, createdDate = didi.createdDate, modifiedDate = didi.modifiedDate, beneficiaryProcessStatus = didi.beneficiaryProcessStatus, shgFlag = SHGFlag.fromSting(didi.shgFlag ?: SHGFlag.NOT_MARKED.name).value, transactionId = "", localCreatedDate = didi.localCreatedDate, localModifiedDate = didi.localModifiedDate, score = didi.score, crpScore = didi.crpScore, crpComment = didi.crpComment, comment = didi.comment, crpUploadedImage = didi.crpUploadedImage, needsToPostImage = false, rankingEdit = didi.rankingEdit, patEdit = didi.patEdit ) ) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc getDidisWithRankingFromNetwork " + "poorDidiListDao.insertPoorDidi() didiId = ${didi.id} after") } } } } } else { val ex = ApiResponseFailException(poorDidiList.message ?: "Poor Didi Ranking list error") if (!retryApiList.contains(ApiType.BPC_POOR_DIDI_LIST_API)) retryApiList.add( ApiType.BPC_POOR_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) onCatchError(ex, ApiType.BPC_POOR_DIDI_LIST_API) } } catch (ex: Exception) { if (ex !is JsonSyntaxException) { if (!retryApiList.contains(ApiType.BPC_POOR_DIDI_LIST_API)) retryApiList.add( ApiType.BPC_POOR_DIDI_LIST_API ) RetryHelper.stepListApiVillageId.add(village.id) } onCatchError(ex, ApiType.BPC_POOR_DIDI_LIST_API) } try { NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc fetchPATSurveyToServer " + "request -&gt; ${listOf(village.id)}") val answerApiResponse = apiService.fetchPATSurveyToServer( listOf(village.id) ) NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc fetchPATSurveyToServer " + "response -&gt; status: ${answerApiResponse.status}") if (answerApiResponse.status.equals(SUCCESS, true)) { answerApiResponse.data?.let { val answerList: ArrayList&lt;SectionAnswerEntity&gt; = arrayListOf() val numAnswerList: ArrayList&lt;NumericAnswerEntity&gt; = arrayListOf() it.forEach { item -&gt; if (item.userType.equals(USER_BPC, true)) { didiDao.updatePATProgressStatus( patSurveyStatus = item.patSurveyStatus ?: 0, section1Status = item.section1Status ?: 0, section2Status = item.section2Status ?: 0, didiId = item.beneficiaryId ?: 0, shgFlag = item.shgFlag ?: -1, patExclusionStatus = item.patExclusionStatus ?: 0 ) if (item?.answers?.isNotEmpty() == true) { item?.answers?.forEach { answersItem -&gt; val quesDetails = questionListDao.getQuestionForLanguage( answersItem?.questionId ?: 0, prefRepo.getAppLanguageId() ?: 2 ) if (answersItem?.questionType?.equals( QuestionType.Numeric_Field.name ) == true ) { if ((prefRepo.getPref( PREF_KEY_TYPE_NAME, "" ) ?: "").equals( BPC_USER_TYPE, true ) ) { answerList.add( SectionAnswerEntity( id = 0, optionId = 0, didiId = item.beneficiaryId ?: 0, questionId = answersItem?.questionId ?: 0, villageId = item.villageId ?: 0, actionType = answersItem?.section ?: TYPE_EXCLUSION, weight = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.weight) else 0, summary = answersItem?.summary, optionValue = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.optionValue) else 0, totalAssetAmount = if (quesDetails?.questionFlag.equals( QUESTION_FLAG_WEIGHT ) ) answersItem?.totalWeight?.toDouble() else stringToDouble( formatRatio( answersItem?.ratio ?: DOUBLE_ZERO ) ), needsToPost = false, answerValue = (if (quesDetails?.questionFlag.equals( QUESTION_FLAG_WEIGHT ) ) answersItem?.totalWeight?.toDouble() else stringToDouble( formatRatio( answersItem?.ratio ?: DOUBLE_ZERO ) )).toString(), type = answersItem?.questionType ?: QuestionType.RadioButton.name, assetAmount = answersItem?.assetAmount ?: "0", questionFlag = quesDetails?.questionFlag ?: BLANK_STRING ) ) if (answersItem?.options?.isNotEmpty() == true) { answersItem?.options?.forEach { optionItem -&gt; numAnswerList.add( NumericAnswerEntity( id = 0, optionId = optionItem?.optionId ?: 0, questionId = answersItem?.questionId ?: 0, weight = optionItem?.weight ?: 0, didiId = item.beneficiaryId ?: 0, count = optionItem?.count ?: 0, optionValue = optionItem?.optionValue ?: 0 ) ) } } } } else { answerList.add( SectionAnswerEntity( id = 0, optionId = answersItem?.options?.get( 0 )?.optionId ?: 0, didiId = item.beneficiaryId ?: 0, questionId = answersItem?.questionId ?: 0, villageId = item.villageId ?: 0, actionType = answersItem?.section ?: TYPE_EXCLUSION, weight = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.weight) else 0, summary = answersItem?.summary, optionValue = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.optionValue) else 0, totalAssetAmount = if (quesDetails?.questionFlag.equals( QUESTION_FLAG_WEIGHT ) ) answersItem?.totalWeight?.toDouble() else stringToDouble( formatRatio( answersItem?.ratio ?: DOUBLE_ZERO ) ), needsToPost = false, answerValue = if (answersItem?.options?.isNotEmpty() == true) (answersItem?.options?.get( 0 )?.display ?: BLANK_STRING) else BLANK_STRING, type = answersItem?.questionType ?: QuestionType.RadioButton.name ) ) } } } } } if (answerList.isNotEmpty()) { answerDao.insertAll(answerList) } if (numAnswerList.isNotEmpty()) { numericAnswerDao.insertAll(numAnswerList) } } } else { val ex = ApiResponseFailException(answerApiResponse.message) if (!retryApiList.contains(ApiType.PAT_BPC_SURVEY_SUMMARY)) retryApiList.add( ApiType.PAT_BPC_SURVEY_SUMMARY ) if (!RetryHelper.stepListApiVillageId.contains(village.id)) RetryHelper.stepListApiVillageId.add( village.id ) onCatchError(ex, ApiType.PAT_BPC_SURVEY_SUMMARY) } } catch (ex: Exception) { if (ex !is JsonSyntaxException) { if (!retryApiList.contains(ApiType.PAT_BPC_SURVEY_SUMMARY)) retryApiList.add( ApiType.PAT_BPC_SURVEY_SUMMARY ) if (!RetryHelper.stepListApiVillageId.contains(village.id)) RetryHelper.stepListApiVillageId.add( village.id ) } onCatchError(ex, ApiType.PAT_BPC_SURVEY_SUMMARY) } prefRepo.savePref(PREF_NEED_TO_POST_BPC_MATCH_SCORE_FOR_ + village.id, true) prefRepo.savePref(PREF_BPC_DIDI_LIST_SYNCED_FOR_VILLAGE_ + village.id, true) } } catch (ex: Exception) { NudgeLogger.e( "VillageSelectionViewModel", "fetchDataForBpc -&gt; onCatchError", ex ) onCatchError(ex, ApiType.FETCH_ALL_DATA) } finally { prefRepo.savePref(LAST_UPDATE_TIME, System.currentTimeMillis()) startRetryIfAny() withContext(Dispatchers.Main) { delay(250) // NudgeLogger.d("VillageSelectionScreen", "fetchDataForBpc finally -&gt; viewModel.showLoader.value = false") // showLoader.value = false } } }.await()</ID>
    <ID>UnusedPrivateProperty:VoEndorsementSummaryScreen.kt$val context = LocalContext.current</ID>
    <ID>UnusedPrivateProperty:VoEndorsementSummaryViewModel.kt$VoEndorsementSummaryViewModel$val updatedDidi = repository.getDidiFromDB(didiId)</ID>
    <ID>UnusedPrivateProperty:WealthRankingViewModel.kt$WealthRankingViewModel$val updatedDidiList = didiList.value</ID>
    <ID>UseCheckOrError:Media.kt$throw IllegalStateException()</ID>
    <ID>VariableNaming:AndroidDownloader.kt$AndroidDownloader$val _downloadStatus = MutableStateFlow&lt;Map&lt;Int, DownloadStatus&gt;&gt;(mapOf())</ID>
    <ID>VariableNaming:BPCProgressScreenRepository.kt$BPCProgressScreenRepository$private val TAG = BPCProgressScreenRepository::class.java.simpleName</ID>
    <ID>VariableNaming:BpcProgressScreenViewModel.kt$BpcProgressScreenViewModel$val _passPercentage = MutableStateFlow(0)</ID>
    <ID>VariableNaming:BpcVillageScreenViewModel.kt$BpcVillageScreenViewModel$var _filterVillageList = MutableStateFlow(listOf&lt;VillageEntity&gt;())</ID>
    <ID>VariableNaming:ComposeableUtils.kt$val houseNumber_1 = createRefFor("houseNumber_1")</ID>
    <ID>VariableNaming:ConnectionMonitor.kt$ConnectionMonitor$val TAG = "ConnectionMonitor"</ID>
    <ID>VariableNaming:DowloadCompleteReceiver.kt$DownloadCompleteReceiver$private val TAG = DownloadCompleteReceiver::class.java.simpleName</ID>
    <ID>VariableNaming:ExportHelper.kt$ExportHelper$private val TAG = ExportHelper::class.java.simpleName</ID>
    <ID>VariableNaming:MainActivity.kt$MainActivity$private val REQ_USER_CONSENT = 200</ID>
    <ID>VariableNaming:ParticipatoryWealthRankingSurvey.kt$val houseNumber_1 = createRefFor("houseNumber_1")</ID>
    <ID>VariableNaming:ScoreComparisonViewModel.kt$ScoreComparisonViewModel$val _passPercentage = MutableStateFlow(0)</ID>
    <ID>VariableNaming:SocialMappingDidiListScreen.kt$val houseNumber_1 = createRefFor("houseNumber_1")</ID>
    <ID>VariableNaming:SurveySummaryViewModel.kt$SurveySummaryViewModel$val _inclusiveQueList = repository.getAllInclusiveQues(didiId = didiId)</ID>
    <ID>VariableNaming:SyncBPCDataOnServer.kt$SyncBPCDataOnServer$val _inclusiveQueList = answerDao.getAllInclusiveQues(didiId = didiId)</ID>
    <ID>VariableNaming:SyncHelper.kt$SyncHelper$private val TAG="SyncHelper"</ID>
    <ID>VariableNaming:SyncHelper.kt$SyncHelper$val _inclusiveQueList = answerDao.getAllInclusiveQues(didiId = didiId)</ID>
    <ID>VariableNaming:VillageSelectionRepository.kt$VillageSelectionRepository$val _inclusiveQueList = answerDao.getAllInclusiveQues(didiId = didiId)</ID>
    <ID>VariableNaming:VillageSelectionViewModel.kt$VillageSelectionViewModel$var _filterVillageList = MutableStateFlow(listOf&lt;VillageEntity&gt;())</ID>
    <ID>VariableNaming:VoEndorsementScreen.kt$val houseNumber_1 = createRefFor("houseNumber_1")</ID>
    <ID>VariableNaming:VoEndorsementSummaryViewModel.kt$VoEndorsementSummaryViewModel$val _selectedDidiEntity = MutableStateFlow( DidiEntity( id = 0, name = "", address = "", guardianName = "", relationship = "", castId = 0, castName = "", cohortId = 0, cohortName = "", villageId = 0, createdDate = System.currentTimeMillis(), modifiedDate = System.currentTimeMillis(), shgFlag = SHGFlag.NOT_MARKED.value, ableBodiedFlag = AbleBodiedFlag.NOT_MARKED.value ) )</ID>
    <ID>VariableNaming:WealthRankingScreen.kt$val _pendingDidiCount = remember { mutableStateOf(newFilteredDidiList.value.size) }</ID>
    <ID>WildcardImport:AddDidiScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:AddDidiScreen.kt$import com.patsurvey.nudge.utils.*</ID>
    <ID>WildcardImport:AddTola.kt$import com.patsurvey.nudge.utils.*</ID>
    <ID>WildcardImport:ApiService.kt$import com.patsurvey.nudge.model.request.*</ID>
    <ID>WildcardImport:ApiService.kt$import com.patsurvey.nudge.model.response.*</ID>
    <ID>WildcardImport:ApiService.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:ControllerState.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CurlLoggingInterceptor.kt$import okhttp3.*</ID>
    <ID>WildcardImport:CustomProgressBar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:DidiScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EditTextWithTitle.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EditTextWithTitle.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:EditTextWithTitle.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:ExampleUnitTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:Extensions.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:HomeNavScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HomeNavScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:HomeScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HomeScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:HomeScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:HomeScreen.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:HtmlText.kt$import android.text.style.*</ID>
    <ID>WildcardImport:HtmlText.kt$import androidx.compose.ui.text.*</ID>
    <ID>WildcardImport:ImageViewer.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ImageViewer.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:LanguageSelectorScreen.kt$import androidx.compose.foundation.*</ID>
    <ID>WildcardImport:LanguageSelectorScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:LanguageSelectorScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:LanguageSelectorScreen.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:LanguageSelectorScreen.kt$import com.patsurvey.nudge.utils.*</ID>
    <ID>WildcardImport:LoginScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:LoginScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:LoginScreen.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:Media.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:MediaState.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:MetricAffectingSpan.kt$import android.text.style.*</ID>
    <ID>WildcardImport:ModuleAddedSuccessView.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:NetworkModule.kt$import com.patsurvey.nudge.utils.*</ID>
    <ID>WildcardImport:NetworkModule.kt$import okhttp3.*</ID>
    <ID>WildcardImport:OtpInputField.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:OtpInputField.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:OtpVerificationScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:OtpVerificationScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:OtpVerificationScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:OtpVerificationScreen.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:OtpVerificationScreen.kt$import com.patsurvey.nudge.utils.*</ID>
    <ID>WildcardImport:OtpView.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:OtpView.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:Player.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:PlayerState.kt$import androidx.media3.common.*</ID>
    <ID>WildcardImport:RadioButtonTypeQuestion.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:RadioButtonTypeQuestion.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:ReLoginScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ReLoginScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ResizeMode.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SarathiLogoTextView.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ScreenRoutes.kt$import com.patsurvey.nudge.utils.*</ID>
    <ID>WildcardImport:SimpleController.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SimpleController.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SocialMappingActivity.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SocialMappingActivity.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:TimeBar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:TimeBar.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:VOAndVillageBoxView.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:VideoDetailPlayerScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:VideoDetailPlayerScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:VideoDetailPlayerScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:VideoDetailPlayerScreen.kt$import com.patsurvey.nudge.utils.*</ID>
    <ID>WildcardImport:VoEndorsementSummaryScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:VoEndorsementSummaryScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:VoEndorsementSummaryScreen.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:VoEndorsementSummaryScreen.kt$import com.patsurvey.nudge.utils.*</ID>
    <ID>WildcardImport:YesNoQuestion.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:YesNoQuestion.kt$import com.patsurvey.nudge.activities.ui.theme.*</ID>
    <ID>WildcardImport:keyboardAsState.kt$import androidx.compose.runtime.*</ID>
  </CurrentIssues>
</SmellBaseline>
